进程状态文件辅助查看内存信息
/proc/pid/statm
image.png

/proc/pid/stat
linux:/opt# cat /proc/27759/stat

27759 (proc) S 10933 27759 3238 0 -1 8388864 23840264 11421 45 0 176394 32845 2 4 18 0 75 54834902 54834194 933576704 77805 4294967295 134512640 144173964 3218373568 3218373152 4294960144 0 0 0 2147221231 4294967295 0 0 17 3 0 0 0
vsize=933576704（bytes） 该任务的虚拟地址空间大小
rss=77805 (page) 该任务当前驻留物理地址空间的大小, 转换成bytes的公式：
((x) << (PAGE_SHIFT - 10))， 在Linux，PAGE_SHIFT等于12，也就是page是4K。
Number of pages the process has in real memory,minu 3 for administrative purpose.
这些页可能用于代码，数据和栈。
rlim=4294967295（bytes） 该任务能驻留物理地址空间的最大值
start_code=134512640该任务在虚拟地址空间的代码段的起始地址
end_code=144173964该任务在虚拟地址空间的代码段的结束地址
start_stack=3218373568该任务在虚拟地址空间的栈的结束地址

/proc/pid/status
该文件下面内存相关的参数：

VmPeak: 60184 kB /进程地址空间的大小/
VmSize: 60180 kB /进程虚拟地址空间的大小reserved_vm：进程在预留或特殊的内存间的物理页/
VmLck: 0 kB /进程已经锁住的物理内存的大小.锁住的物理内存不能交换到硬盘/
VmHWM: 18020 kB /文件内存映射和匿名内存映射的大小/
VmRSS: 18020 kB /应用程序正在使用的物理内存的大小，就是用ps命令的参数rss的值 (rss)/
VmData: 12240 kB /程序数据段的大小（所占虚拟内存的大小），存放初始化了的数据/
VmStk: 84 kB /进程在用户态的栈的大小/
VmExe: 576 kB /程序所拥有的可执行虚拟内存的大小,代码段,不包括任务使用的库 /
VmLib: 21072 kB /被映像到任务的虚拟内存空间的库的大小/

/proc/pid/maps
查看进程的虚拟地址空间是如何使用的。
该文件有6列，分别为：
地址：库在进程里地址范围
权限：虚拟内存的权限，r=读，w=写,x=执行,s=共享,p=私有；
偏移量：库在进程里地址偏移量
设备：映像文件的主设备号和次设备号，可以通过通过 cat /proc/devices查看设备号对应的设备名
节点：映像文件的节点号；
路径: 映像文件的路径，经常同一个地址有两个地址范围，那是因为一段是r-xp为只读的代码段，一段是rwxp为可读写的数据段。
每项都与一个vm_area_struct结构成员对应

[root@localhost ~]# cat /proc/7114/maps
08047000-080dc000 r-xp 00000000 03:06 884901 /bin/bash
080dc000-080e3000 rwxp 00094000 03:06 884901 /bin/bash
080e3000-08129000 rwxp 080e3000 00:00 0 [heap]
4d575000-4d58a000 r-xp 00000000 03:06 736549 /lib/ld-2.3.4.so
4d58a000-4d58b000 r-xp 00015000 03:06 736549 /lib/ld-2.3.4.so
4d58b000-4d58c000 rwxp 00016000 03:06 736549 /lib/ld-2.3.4.so
4d58e000-4d6b1000 r-xp 00000000 03:06 736550 /lib/tls/libc-2.3.4.so
4d6b1000-4d6b2000 r-xp 00123000 03:06 736550 /lib/tls/libc-2.3.4.so
4d6b2000-4d6b5000 rwxp 00124000 03:06 736550 /lib/tls/libc-2.3.4.so
4d6b5000-4d6b7000 rwxp 4d6b5000 00:00 0
4d6de000-4d6e0000 r-xp 00000000 03:06 736552 /lib/libdl-2.3.4.so
4d6e0000-4d6e2000 rwxp 00001000 03:06 736552 /lib/libdl-2.3.4.so
4d807000-4d80a000 r-xp 00000000 03:06 736567 /lib/libtermcap.so.2.0.8
4d80a000-4d80b000 rwxp 00002000 03:06 736567 /lib/libtermcap.so.2.0.8
b7bf2000-b7c1e000 r-xp 00000000 03:06 881337 /usr/lib/gconv/GB18030.so
b7c1e000-b7c20000 rwxp 0002b000 03:06 881337 /usr/lib/gconv/GB18030.so
b7c20000-b7c26000 r-xs 00000000 03:06 881502 /usr/lib/gconv/gconv-modules.cache
b7c26000-b7d2f000 r-xp 02197000 03:06 852489 /usr/lib/locale/locale-archive
b7d2f000-b7f2f000 r-xp 00000000 03:06 852489 /usr/lib/locale/locale-archive
b7f2f000-b7f38000 r-xp 00000000 03:06 734450 /lib/libnss_files-2.3.4.so
b7f38000-b7f3a000 rwxp 00008000 03:06 734450 /lib/libnss_files-2.3.4.so
b7f3a000-b7f3c000 rwxp b7f3a000 00:00 0
b7f51000-b7f52000 rwxp b7f51000 00:00 0
bfc3d000-bfc52000 rw-p bfc3d000 00:00 0 [stack]
ffffe000-fffff000 ---p 00000000 00:00 0 [vdso]
top命令
这个就不说了，大家都知道的命令

内存定位工具
valgrind
valgrind工具网上有很多介绍，这里简单介绍一下：
Valgrind是一套Linux下，开放源代码（GPL V2）的仿真调试工具的集合。Valgrind由内核（core）以及基于内核的其他调试工具组成。内核类似于一个框架（framework），它模拟了一个CPU环境，并提供服务给其他工具；而其他工具则类似于插件 (plug-in)，利用内核提供的服务完成各种特定的内存调试任务。Valgrind的体系结构如下图所示：
Valgrind 体系结构
image.png

Valgrind包括如下一些工具：

Memcheck。这是valgrind应用最广泛的工具，一个重量级的内存检查器，能够发现开发中绝大多数内存错误使用情况，比如：使用未初始化的内存，使用已经释放了的内存，内存访问越界等。
Callgrind。它主要用来检查程序中函数调用过程中出现的问题。
Cachegrind。它主要用来检查程序中缓存使用出现的问题。
Helgrind。它主要用来检查多线程程序中出现的竞争问题。
Massif。它主要用来检查程序中堆栈使用中出现的问题。
Extension。可以利用core提供的功能，自己编写特定的内存调试工具。
valgrind内存检查原理
image.png
Memcheck 能够检测出内存问题，关键在于其建立了两个全局表。

Valid-Value 表：
对于进程的整个地址空间中的每一个字节(byte)，都有与之对应的 8 个 bits；对于 CPU 的每个寄存器，也有一个与之对应的 bit 向量。这些 bits 负责记录该字节或者寄存器值是否具有有效的、已初始化的值。
Valid-Address 表
对于进程整个地址空间中的每一个字节(byte)，还有与之对应的 1 个 bit，负责记录该地址是否能够被读写。
检测原理：

当要读写内存中某个字节时，首先检查这个字节对应的 A bit。如果该A bit显示该位置是无效位置，memcheck 则报告读写错误。
内核（core）类似于一个虚拟的 CPU 环境，这样当内存中的某个字节被加载到真实的 CPU 中时，该字节对应的 V bit 也被加载到虚拟的 CPU 环境中。一旦寄存器中的值，被用来产生内存地址，或者该值能够影响程序输出，则 memcheck 会检查对应的V bits，如果该值尚未初始化，则会报告使用未初始化内存错误。
Valgrind基本功能介绍
1，使用未初始化的内存(Use of uninitialised memory)
2，使用已经释放了的内存(Reading/writing memory after it has been free'd)
3，使用超过malloc分配的内存空间(Reading/writing off the end of malloc'd blocks)
4，对堆栈的非法访问(Reading/writing inappropriate areas on the stack)
5，申请的空间是否有释放(Memory leaks -- where pointers to malloc'd blocks are lost forever)
6，malloc/free/new/delete申请和释放内存的匹配(Mismatched use of malloc/new/new [] vs free/delete/delete [])
7，src和dst的重叠(Overlapping src and dst pointers in memcpy() and related functions)

工具约束：

Valgrind不会对静态数组(分配在栈上)进行边界检查。
Valgrind占用内存很高，不适合压力测试，只适合覆盖测试。
自己接管内存分配和释放接口
这是一个很常见的办法，就是自己接管内存分配和释放，这样自己就可以很容易全局管理自己的内存，对于内存泄露就很容易实现。
比如自己构造内存池，重载new/delete等手段。

ASAN
这个工具这里不介绍了，传送门：http://3ms.huawei.com/hi/group/3064219/thread_6153835.html?mapId=7744335

具体内存问题
内存泄露
由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制，因而造成了内存的浪费。

A memory leak is a particular type of unintentional memory consumption by a computer program where the program fails to release memory when no longer needed. This condition is normally the result of a bug in a program that prevents it from freeing up memory that it no longer needs.This term has the potential to be confusing, since memory is not physically lost from the computer. Rather, memory is allocated to a program, and that program subsequently loses the ability to access it due to program logic flaws.

泄露主要分为两种：

堆内存泄漏（Heap leak）。对内存指的是程序运行中根据需要分配通过malloc,realloc new等从堆中分配的一块内存，再是完成后必须通过调用对应的 free或者delete 删掉。如果程序的设计的错误导致这部分内存没有被释放，那么此后这块内存将不会被使用，就会产生Heap Leak.

系统资源泄露（Resource Leak）.主要指程序使用系统分配的资源比如 Bitmap, handle , SOCKET等没有使用相应的函数释放掉，导致系统资源的浪费，严重可导致系统效能降低，系统运行不稳定。 关于资源泄露会在单独章节里面讲解，这里就不会展开。

如何定位内存泄露
如果发现进程出现了core dump，从core文件和黑匣子可以看出是new/new[]申请内存失败，并且是SignalNo:6,SignalName:SIGABRT导致的core。那么可以认为是内存泄露或者内存空洞导致内存申请失败。

内存泄露定位一般就是几种方法：

检视代码，重点检查new/delete，尤其是异常分支的返回
使用valgrind工具
自己接管内存管理，比如自己分配和回收内存。
如何定位资源泄露
常见的资源泄露场景：

申请的内存没有释放。new/malloc—>delete/free
打开的文件句柄没有释放。 fopen/opendir-->fclose/closedir
socket的资源没有释放。
Windows下GDI，HANDLE资源泄露。
打开的动态库文件没有释放。 dlopen-->dlclose
在Linux下定位资源泄露一般都两个方法

lsof命令
/proc/pid/fd目录
通过这两个目录可以很方便地看到打开的文件句柄，打开的socket，看看是否有泄露。

内存空洞
从Glibc的内存管理可以看出：

--------——|-----------|-------------|------------------------------------堆顶
使用中内存A 释放的内存B 使用中内存C 释放的内存D

glibc管理的内存唯一释放的条件是堆顶存在128k（M_TRIM_THRESHOLD）或以上的空闲区时才会释放，比如只有D才有被归还系统的可能，B就成为内存空洞，虽然未来的分配还能用到，但释放不掉。

如果是通过mmap申请的内存，释放的时候是直接还给操作系统，不会产生空洞。

如何定位是内存空洞：
就是将前面讲的malloc_stats方法来将进程的虚拟内存记录保存下来，比如1分钟打印一次：
image.png

从上图可以考到system bytes和in use bytes。
如果(system bytes - in use bytes)一直在增加，那么表示内存空洞在增加，如果这个差值达到了400~500M，应该就是内存空洞导致内存申请失败。
如果(system bytes - in use bytes)一直基本保持稳定，但是system bytes和in use bytes也一直在增加，就有可能是内存泄露。

内存越界
所谓内存越界（Heap Corruption），就是指当内存输入超出了预分配的空间大小，就会覆盖该空间之后的一段存储区域，导致系统异常。
由于内存越界有很强的滞后性，往往出错的地方并不是真正内存越界的地方。
读写越界都可能导致程序出现异常。

内存越界问题是最难定位的，因为很多时候你不知道什么时候出现了踩内存，死机的时候不一定是踩内存的现场。

如何定位内存越界问题
内存越界导致程序core dump一般都是由于11信号量导致的：
Program received signal SIGSEGV(11), Segmentation fault.

内存越界一般由几个工具可以尝试一下：

valgrind工具
GDB的观察某个值或者内存断点
int main(void)

{
       int sum = 0, i = 0;
       char input[5] = {0};
       int j = 0;
       //while (1) {
              sum = 0;
              memcpy(input, "123459", 6);
              for (i = 0; input[i] != '\0'; i++)
                     sum = sum*10 + input[i] - '0';
              printf("input=%d\n", sum);
              j++;
       //}
       return 0;
}
Breakpoint 1, main () at zhanghui.cpp:9
9            int sum = 0, i = 0;
(gdb) n
10           char input[5] = {0};
(gdb) x/7b input
0x7fffffffdf70:       0     0     0     0     0     0     0
(gdb) watch input[5]  //观察input[5] 这个字符的值
Hardware watchpoint 2: input[5]
(gdb) n
11           int j = 0;
(gdb) n
13                  sum = 0;
(gdb) n
14                  memcpy(input, "123459", 6);
(gdb) n
Hardware watchpoint 2: input[5]


Old value = 0 '\000'
New value = 57 '9'  
0x00007ffff73566a9 in memcpy () from /lib64/libc.so.6  //input[5]被修改
(gdb)
ASAN工具
依赖内存哨兵的性质，在内存中进行只读内存的打点，一旦触发了内存越界，那么将触发死机信号，就可以根据堆栈看到是哪里进行踩内存了。
总结
由于C/C++需要程序员自己管理内存，那么内存问题是必然存在的，即使程序员多么小心，都会不小心遇到内存问题， 及时有很多工具和方法，但是内存问题很多都是体力活，需要耗费大量的时间去定位，并且很多偶现问题都定位不出来了。除了换成带有GC的语言以外，我们应该如何降低内存问题的发生概率呢？

使用智能指针
使用RAII技术
基于大对象和小对象的合理组合，减少小对象的申请和释放
自己管理内存
根据自己的内存模型选择其他内存管理组件，比如tcmalloc
