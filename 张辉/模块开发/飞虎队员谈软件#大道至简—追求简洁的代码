大道至简—追求简洁的代码
1      大道至简
大道理（指基本原理、方法和规律）是极其简单的，简单到一句话就能说明白。

复杂的事情要简单去做,简单的事情要重复去做,重复做的事情要用心去做,坚持下去,这样就没有做不成的事情。

2      程序员的敌人
作为一个软件开发者，你就是你最大敌人。代码是我们写的，代码是我们堆砌的，代码是我们修改bug添加上去的，是我们让自己浪费更多的精力去维护代码。

最好的代码是没有代码，最好的代码时间简洁易懂的代码。

3      什么代码才是简洁的代码
3.1      代码越小越好？
assert((!bucket=FindBucket(key))) || !bucket->IsOccupied());

还是

bucket=FindBucket(key)；

If（bucket != NULL)

{

       assert (!bucket->IsOccupied());

}

从上面来看第一行代码虽然只有一行，但是理解起来没有没有下面的代码好。

3.2      可读性的基本定理
代码的写法应当使别人理解它所需的时间最小化。

4      识别坏代码
如果能理解一些坏代码的标准，对于写出好的代码是有帮助的。



5      编程是一种态度
Ø  编写程序首先为人，其次是计算机。

--Steve McConnell，《代码大全》作者，软件工程知识体(SWEBOK) 项目构建领域领导者。

Ø  任何一个傻瓜都能写出机器能读懂的代码，好的程序员应该写出人能懂的代码。

--Martin Fowler《重构》作者，十六位 “敏捷软件开发宣言”创作者之一。

Ø  整洁的代码简单直接，整洁的代码如同优美发散文，整洁的代码从不隐藏设计者的意图，充满了干净利落的抽象和直截了当的控制语句

--Grady Booch《面向对象分析与设计》作者，UML创始人，IBM Fellow。   .

Ø  编程的时候，总要想着那个维护代码的人会是一个知道你住在哪儿的有暴力倾向的精神病患者。

--Martin Golding

 

代码的三个层次：

1.         正确

代码最基本的要求。要实现这一要求，需要对功能需求有全面的分析，对没个实现细节都做到心中有底。基本不出现什么Bug。

2.         简洁

这是这在写出正确代码的基础上对程序员提出更高的要求，即使得代码精简，没有冗余。尽量使代码显的扁平化，没有深层嵌套。及时的重构代码。

3.         优美

优美的代码会让读代码的人觉得轻松，有继续阅读的欲望。优美的代码，不仅看程序员本身技术，更涉及代码的骨架及软件架构的设计。

6      如何编写简洁优美的代码
6.1      变量名，函数名等命名的技巧
把信息要装入名字中

6.1.1        选择更专业的词语
我们在定义函数时，很多动词就喜欢使用send，find等，其实根据上下文场景，可能其他的英文单词更合适。

单词

更多选择

Send

deliver, dispatch, announce, distribute, route

Find

search, extract, locate, recover

Start

Launch, create, begin, open

Make

Create, set up, build, generate, compose, add, new

6.1.2        尽量避免tmp或者retval这种变量名
这类tmp名字一般是我们实在想不出一个名字而使用的替代品。

在某些场景下tmp是挺好的，比如经典的两个变量交互的场景。但是很多时候tmp是一种懒惰的表现：

Std::string tmp = user.name();

Tmp += “…”;

Tmp += “…”;

这种场景应该赋予一个有意义的名字，比如userInfo等。

建议：tmp这个名字只应用于短期存在且临时性为其主要存在因素的变量。Retval这个名字没有包含太多信息，用一个描述该变量的值的名字来替代它。

6.1.3        对于循环迭代器要考虑i, j, iter这类是否合适
6.1.4        给变量名赋予更多的细节
最重要的例子就是这个变量是记录事件，长度等，那么最好将单位信息放在变量中，比如_ms, _byte表示是毫秒，字节数。

6.1.5        丢掉一些啰嗦的词
比如ConvertToString()完全可以直接写成ToString();

6.1.6        不要使用误解的名字
Ø  使用min_或者max_来表示极限值，避免使用limit这类有“大小差一”的命令方式 。

Ø  使用first和end来表示包含/排除范围，比如C++ STL中的典型用法。

Ø  使用is, has, can, should等使布尔值更明确，也尽量避免使用反义名称。

Ø  小心用户对特定词的期望，比如get()或者size()方法是轻量的方法，时间复杂度是O(1)。

6.2      保持代码的审美
使用一致的布局，让读者很快就习惯这种风格。比如统一使用空格来保持对齐，统一使用驼峰式命名规则或者下划线命名法，最重要的是风格保持统一。

让相关的代码行分组，形成代码块。

6.3      注释应该怎么写
Ø  最好的注释就是代码，要做到代码自注释。

Ø  如果是编写公共API，Java推荐使用javadoc，C/C++可以使用doxygen。

6.4      函数的设计
Ø  函数名很重要：

l  函数名要体现这个函数的真正功能，不要挂羊头卖狗肉

l  函数名推荐使用动词或者动宾结构：使用getFirstName()而非firstName()

l  函数名尽量增加语境，比如getFirstNameFromAddress比getFirstName更能让人理解

Ø  函数的访问权限很重要：如果是非外部接口，就不要对外体现，类中使用private访问权限。

Ø  尽量设计少的函数参数：最理想的参数数量是零，其次是一，再次是二，有足够的理由才能使用三个以上参数

Ø  不要重复你自己 DRY原则（Don’t repeat yourself） ，要避免重复代码。代码不要拷贝粘贴。

Ø  函数的圈复杂要控制

Ø  一个函数只应该做一件事情。最好这件事。单职责原则。

Ø  推荐使用“卫语句”， 使用卫语句代替嵌套的条件表达式，这样做的精髓在于：强调某个条件，并告诉别人，这种情况很罕见，如果真的发生了，就要做一些必要的整理并退出。

Ø  对于复杂的条件表达式，最好抽取方法或者使用解释变量。

6.5      培养代码的洁癖
一些典型代码洁癖的表现：

Ø  多余的空行、分号，没有使用的变量，见一个删一个。

Ø  tab或者空格没有对齐的必须纠正过来，除了缩进用，不允许看到代码内连续两个空格。

Ø  错误的拼写，无论是在命名还是注释必须纠正过来；不一致的大小写，必须要纠正过来；标点符号的遗漏，必须补上。

Ø  看到if(a==0)这样的代码必须改成if(0==a)这样的形式。

Ø  所有IDE对代码的告警必须消除，无论采取的方式是否有实际意义。

Ø  看到赤裸的数字，必须定义成常量，即便数字表意很直观，还是只能接受常量数字。

Ø  见不得非静态的公有变量，必须建立get/set方法。

Ø  不断地按代码格式整理的快捷键。

Ø  一旦看到超过连续3个的if-else判断分支，就要优化；类似的方法调用代码，如果连续出现，就要优化；超过若干行的方法，必须重构。

代码洁癖有好有坏，需要自己权衡，但是最终的目的就是要让代码简洁易懂，可维护性高。

6.6      团队规则
一个团队要选择一种格式风格，后面每个成员都应该采用这种风格。

Ø  括号放置的位置

Ø  缩进是采用空格还是Tab键

Ø  命名法是采用驼峰式还是下划线等

6.7      设计模式
在合适的场景下使用合适的设计模式可以提高代码的可阅读性和可维护性。

这里不讲解各种设计模式，有兴趣的自行Google。

7      总结
Ø  追求代码的简洁

好的代码一定是最简洁的代码，大道至简。代码不要人为的复杂化。

Ø  培养代码的洁癖

Ø  培养童子军军规，不要形成破窗效应

当你离开时候要不你进入时还要干净。当我们接手一个模块时一定要比我们交接出去代码更清晰，更简单。对代码要有偏执的精神。 

8      推荐的书籍
l  代码整洁之道CleanCode

l  代码大全

l  编写可读代码的艺术

l  代码之美

l  重构--改善既有代码的设计
