C++拾遗录--C++标准学习之程序行为定义
日期：2012-09-04 12:24浏览：206评论：0
一直以来都想写一系列C++的文章，来记录C++中比较典型的问题和概念，并且重点介绍C++ ISO标准中的关键章节。

这次就先简单介绍一下C++标准是怎么定义我们写的C++的程序的行为的，只有这样才能保证我们的代码才是正常的代码，才能被所有编译器正常编译的代码。

 

C++标准中对于程序行为有三种分类：
implementation-defined behavior
对于一个良好的程序和数据的行为依赖于特定的实现，并且这些实现必须文档化：
比如C++中下面的行为就是依赖具体实现的：
1. 基本类型(short, int等)的大小
2. char是有符号还是无符号
3. C++中出现未捕获异常时是否需要进行堆展开(stack unwinding)

如果在阅读C++标准时发现了implementation-defined，就需要查阅对应的编译器文档。

unspecified behavior
对于一个良好的程序和数据的行为依赖于特定的实现，这些实现不要求被文档化(但是允许文档化)：
比如：
1. 函数调用实参表达式按照什么顺序求值
2. operator new是否调用C标准库的malloc

注意：implementation-defined behavior和unspecified behavior类似的，但是unspecified behavior

主要是指实现底层的机制，用户一般不会直接访问的，而implementation-defined主要是指可以被用户直

接使用的语言架构层面的。

undefined behavior
未定义的行为是标准未加任何要求的。未定义行为指来自错误程序和错误数据导致的一般性状态，可能会

引起运行时崩溃，不稳定程序状态，或者根本不会引起用户的注意。
常见的未定义行为如下：
1. 访问数组越界
2. 写缓冲区溢出
3. delete一个指向子类的父类指针，并且父类的析构不是virtual的，行为是未定义的。

 

Unspecified behavior 和 implementation-defined behavior是相容的行为。两者都是C++标准特意留在那的允许不同平台上的编译器实现。相反的， Undefined Behavior是不允许发生的，我们在写代码时应该禁止写出这种代码。
另外，虽然Unspecified behavior 和 implementation-defined behavior是允许的，但是却是编译器依

赖的，所以在编写跨平台程序时，不要出现这种代码。

 

所以我们在编写C/C++代码时，应该严格按照标准的定义来写代码，而不应该以某个编译器的特定实现为标准。
