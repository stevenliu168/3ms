辩证看待C++:后现代系统语言的选择

1      C++简介
贝尔实验室的比雅尼·斯特劳斯特鲁普博士在20世纪80年代发明并实现了C++。起初，这种语言被称作“C with Classes”（“包含类的C语言”），作为C语言的增强版出现。随后，C++不断增加新特性。虚函数（virtual function）、操作符重载（operator overloading）、多重继承（multiple inheritance）、模板（template）、异常处理（exception）、RTTI（Runtime type information）、名字空间（namespace）逐渐纳入标准。1998年，国际标准组织（ISO）颁布了C++程序设计语言的第一个国际标准ISO/IEC 14882:1998，目前最新标准为ISO/IEC 14882:2014。

C++这个语言最吸引人的地方有：

1.     强大的内存管理机制：这个是从C语言吸收过来的，这个可以让程序员自由操控任何内存，这个是Java比拟不了的，但是却带来了无穷无尽的内存泄露和越界的苦恼，但是这都是可以通过其他的手段解决（比如RAII， DDD， Smart Pointer等）。

2.     面向对象的特性: 封装，继承和多态让C++写出来的代码能让系统简单化，系统层次化和模块化。并且随着OO设计原则和设计模式的发展，让C++可以写出更优美架构的代码。

3.     泛型编程：这个在C++成为模板，但是这个泛型有人觉得是学术派的理论，实际用处不大，比如Go语言就没有泛型。但是泛型提高代码复用方面的确有很大的帮助。

 

2      哪些程序适合使用C++？
l  程序须尽量发挥硬件的最高性能，且性能瓶颈在于CPU和内存；

l  程序须频繁地与操作系统或硬件沟通；

 

按应用领域来说，C++适用于开发服务器软件、桌面应用、游戏、实时系统、高性能计算、嵌入式系统等。

 

简单来说， 需要提升性能的地方都可以使用C++。

3      C++的使用驱动力：性能
3.1      C++的关注点：性能


 

C++注重效率，灵活和抽象，而C语言只注重效率，灵活; Java和C#注重抽象和生产率。

 

性能就是钱： 我们一般从三个方面来描述：

l  耗电，移动设备的耗电量，家用电脑的耗电量都和钱有关系。

l  资源，家用电脑和移动设备上的处理器资源有限，因为要让一般消费者买的起。

l  体验，在更小的设备上会有更好的体验，有更好的体验就可以挣更多的钱。

 

3.2      C++为什么今天比前些年火了呢：性能


 

我们从C++的进化发展来看，可以分为四个阶段：

l  1979年~1989年：基于C语言的对象能力

l  1989年~1999年：C++强大的面向对象能力，STL和Boost程序库的使用，泛型编程的使用使得C++成为主流语言。

l  1999年~2009年：Java和C#语言的的出现，硬件价格下降，上层应用领域受到冲击。

l  2009年~至今：Native Code的兴起，C++又开始受到关注，尤其是移动端。 主要原因还是由于追求性能，节约成本，创造更大的价值。

 

打拼市场的时候追求的是快速上线和高生产力，市场站稳以后就是要保证稳定性和高性能。

 

 

我们从业界程序的关注点可以看出：

在1970~1980年，由于机器的资源不够，厂商的主要关注点还是节省性能。

在1980~1990年，开始逐步追求抽象和生产率。

在1990~2010年，机器性能越来越高，硬件价格越来越便宜，大家都在追求抽象和高生产率。

在2010年后，随着云计算数据中心的兴起，移动客户端的流行，性能问题越来越严重。

3.3      业界C++的发展
l  移动客户端：该开始的时候iOS，Android和Windows Phone都不支持C++，后来第二版都支持C++，就是为了提高一下性能。

陈皓：Why C++ ? 王者归来

l  Apple和Google：

Apple和Google都在研究C++编译器LLVM， 因为g++的架构和性能都不行， 现在更关注Native Code的性能，gcc4.9开始以后也注意微架构的性能。

 

3.4      云平台数据中心的性能
为什么Google，阿里云需要把数据中心都建在北极或者湖底，就是为了节省性能，降低降温的开销。对于数据中心的机房来说，最花钱的费用主要包括：（1）硬件购买和机房的构建；（2）降温处理；（3）电量消耗。这三个几乎占用数据中心90%的费用。

 

比如现在的阿里云， Google，推特，AWS都是用C++来实现的底层基础设施层，比如阿里的飞天云平台。无论上层使用多么弹性，多么高级的语言，基础设施层基本都是使用C++这种高性能语言。

 

My contribution to the fight against global warming is C++’s efficiency: Just think if Google had to have twice as many server farms! Each uses as much energy as a small town. And it’s not just a factor of two… Efficiency is not just running fast or running bigger programs, it’s also running using less resources.

Bjarne Stroustrup, June 2011

 

效率不仅仅是运行的快，运行更大的程序，更可以使用更少的资源。

 

3.5      C++致力于性能和抽象之间的平衡
在C++2003的时候，C++的开发效率还是比较低的，标准库里面没有多线程，没有正则表达式，没有类型推导，没有FP特性，没有智能指针，没有hashmap等等，只能使用一些开源的库来支持（比如boost）， 但是到了C++11/C++14以后，C++对于开发效率提升有显著的提高，提供了很多现代高级语言的特性：



 

4      C++真的是一门复杂的语言吗
答案：是的，C++11可以说是语言特性最多的语言之一。Scala号称JVM上的C++，也是有很多语言特性。

 

我们可以看一下语言特性：



 

标准库还包括下面的内容：



 

所以说，C++语言的语言特性的确很多，正如Stroustrup关于使用C++各种语言特性的回应：

：“你可以做，不意味着你必须这么做。(Just because you can do it, doesn't mean that you have to.)”。 就像你家里有一个工具箱，里面有很多工具，不用的时候你完全可以收起来，但是一旦你要使用的时候，如果没有这个工具，你就需要花费很多不要的精力去完成。所以不要被C++或者Scala这么多的语言特性所吓倒。

 

也有很多人骂C++的，比如Linus：C++是一门很恐怖的语言，而比它更恐怖的是很多不合格的程序员在使用着它。



为什么有很多骂C++的声音呢？

l  C++的确有一些不完美的地方，不过很多都是从C语言继承过来的，C++的标准委员会对于语言特性的添加太慢了。

l  很多人不了解面向对象，对于面向对象不了解的人去使用C++难怪会被别人骂了。

l  C++比较灵活，有些人喜欢秀自己，导致一些特性被滥用和误用

 

不管怎么样，C++是一门卓越的语言，虽然不完美，但是只有我们真正去掌握C++，才会发挥这个语言最大的价值。才能驾驭它，用好他。如果我们都不去深入了解这个语言，不了解OO思想，就去指责这个语言，这是不可取的一种态度。

 

5      人人亦云的语言之争
现在网络上大量的语言之争，OO和FP之争，C++和Java之争，Go和Scala之争，Java和C#之争啊。 有时候这与争论只是为了一种广告推销的效果，但是有些程序员却特别热衷于争论某些语言，这些这些争论大部分时候都没有意义，只要我们抓住事情的本质，就不会被业界的各种观点所迷惑。

 

5.1      同一维度语言的争论：C VS C++ VS Rust
这三个语言代表了追求性能的系统编程语言，C语言现在已经不满足时代要求，表达力太弱，不够抽象；C++目前来说是现阶段高性能系统编程语言的首选，尤其是C++11；Rust语言才刚开始发展，目前不好说，希望后面可以更好的发展。

 

C++由于背负了严重的C的历史包袱，有些很ugly的东西无法解决。所以还是希望后面出现一种真正能够颠覆C++，但是必须保留C++现有的有点，解除了C++的历史包袱。

 

5.2      不同维度的语言：C++和Go，Scala和Java语言
C++和这些高级语言不在一个层面上，新型的语言为了提高开发效率损失了一部分性能，这是一个权衡，C++标准委员会也是一直在性能和其他特性之间做权衡，选择最适合C++的语言特性。

 

所以如果你的程序可以损失一部分性能，那么推荐使用Go/Scala/Java，这些可以显著提高开发效率。

 

6      总结
C++语言就是一门追求性能的语言，尤其在今天的C++1z， 如果加入了module system， reflection反射等特性，那么C++除了是一门传统的系统编程语言，也具备了现代语言应有的特性，而且也有了很多的和正在进行的新的拓展。

 

所以，在云计算和物联网的今天，C++将会重获新生，尤其在数据中心基础设施，移动终端设备。

 

最后，喜欢C++11的赶紧切换到C++11吧， 你会发现代码写起来会方便。
