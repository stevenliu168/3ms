http://3ms.huawei.com/km/blogs/details/9280695

1. 什么是模型，什么是软件模型：
模型是对系统和对象本质信息的表达。软件模型一方面承载了问题域的核心关系和特征，另一方面基于这些特征给出了满足问题域需求的流程方法。
软件模型一方面包括领域模型，反映问题域逻辑关系；一方面包括软件实现模型，从实现的角度考虑如何去承载和细化领域模型。

2. 谁来建模？
承担软件架构设计的人员，可能是SE（需求分析时可能会产生实现的冲动，进而有个雏形的想法，再去POC，调研、验证...）、架构师，也可能是高级的开发人员。因为从这个领域模型的分析，到软件实现模型的落地，是一个连续的迭代优化过程，不建议在流程中对职责进行明确的割裂和划分，而应该鼓励更多的高级软件开发人员，主动学习这样的思路和方法，从建模的角度去思考问题，让建模、设计和开发这个过程，真正有机的融合起来，从而从根本上提高软件的质量。

3. 建模与软件开发其他工作环节的关系？
如果把软件开发看作是设计生产一辆好车的过程，建模就是让这辆车体现出其核心理念、风格、性能等关键因素的环节，而软件开发中的流程、工具、方法则是保证其核心设计理念得以实现，在各个细节环节上落地实施的过程。

4. 软件建模该如何做？想做好须具备哪些能力？
从需求分析开始，领域模型的需求来自问题域分析，软件建模的需求来自领域模型。抽象是建模的核心能力，抽象包括两个过程，一是识别和把握过程和事物的本质属性和规律，二是把这些内容通过系统化的方法表达出来。前者需要我们在分析的过程中，识别约束的主次和层次性，展开层次化的抽象过程，让最内层的抽象来表达最本质的属性和关系，然后根据其应用场景，逐层叠加具体的场景约束和需求。建模的过程，同时也是经验的应用过程，因此要想提高建模能力，一方面要多学习前人总结的设计模式，包括具体的领域模式和通用的软件设计模式，另一方面还要多分析和体会优秀的设计案例，从中学习别人的设计思路方法和在细节上的权衡、思考点，从这两个方面逐步积攒自己的经验值。


5. 如何进行抽象
从框架、逻辑域、约束三个维度入手进行分析。


框架
决定了是什么，要做什么。框架承载两个内容，即关系和元素。关系又包括两类，一个是逻辑域之间的交互合作关系，一个是逻辑域内部的关系。逻辑域内部的关系又可以分为纵向和横向的，纵向的是元素之间的抽象关系，即继承和多态的关系，横向是元素之间的关联关系，包括组合、聚合、访问等。
从核心关系(系统目标）入手，对系统运行的内在逻辑进行抽象。识别支撑核心关系的逻辑元素，分析(考虑核心约束)其本质有哪些属性、行为。关系是在对过程的分析和归纳中识别的，与元素的抽象是相辅相成的过程，核心关系的表达和实现需要基于对元素特征和行为的进一步提炼、抽象，是作用在抽象对象上的。
约束
来自于一个逻辑域的不同场景，对元素和关系施加影响。核心的关系需要在多个应用场景中发挥作用，这个核心关系要能够适应各个场景中的区别和变化。不同场景中的约束，以层次化的方式对关系和元素施加影响，我们需要逐层提取共性的约束，使抽象的元素和核心关系在各个场景中被具体化和应用起来。
逻辑域
系统整体表现出巨大的复杂性和无规律性，但其中的一个部分，通常具有特定的功能和规律。我们需要从系统中拆分具有特定目标的独立子系统、子功能，遵循稳定抽象原则(Stable Abstractions Principle)：稳定的关系应该是抽象的，不稳定的关系应该是具体的。


6. 经常会遇到别人问我这样一个问题：如何能让一个模型更加的通用，适应未来的需求变化？
我的思考是这样的：模型的通用性，首先取决于你所已知问题域的丰富性，以及对它们从各个维度上分析思考的程度，讲的具体一点，就是对所有的需求，我们在思考怎么解决实现时，总会遇到这样那样各种各样的矛盾和冲突的地方，这些点阻碍了方案的进一步推进，这时候我们需要一再地细化对这些关键点地思考，从更本质地因素角度上去分析是什么产生了这样地问题或冲突，这些本质因素上有没有可以突破的解决方案，或者新的思路idea，亦或该如何权衡这些因素之间的关系。只有从这些最本质的地方把一个个问题分析透彻了，我们才能比较准确地理解一个问题，找到可能地解决方法和思路，识别核心的约束和本质，进而得到一个相对合理的对问题的认识即抽象，以及相关的解决方案。这样的抽象和方案，才能具有相对来说最大化的适用性和可行性。
为什么说是相对的呢，因为，从另一个方面来说，问题域的展现不一定是充分的，有些未来的问题和需求是不可知甚至是不可预见的，如果一个新的需求，其在问题域本质上发生了变化，这个时候不能奢求既有的模型和方案也能解决，这里也有两个问题：1）什么是问题域本质？2）这时该怎么办？
就我的理解来说，问题域本质，是你之前在建立模型时，基于已知和可预见需求和问题类型时，考虑和分析出来的所有本质性因素时，没有包含这个新问题域本质特征的那部分内容。那么，怎么区分是当初的分析疏忽还是真的是问题域本质的变化呢？好吧，回答这个问题，只能用小徐总的那句话：软件是个良心活。
话说回来，遇到这个问题，该怎么办呢？重构呗：）重新把这个本质因素考虑进去，看有什么方法和思路可以从本质上来解决和适应这个新的因素和矛盾（必然是个矛盾，否则就不用重构了），若仍然找不到合理合适的模型和统一方案，那么从另一个角度来说，是不是要进行逻辑域的分解了？因为本质上它们就不应该属于一个模型所涵盖的内容，也就是说，从系统的更高层面把它们隔离开来，并以一定的方式关联起来。

7. 建模是不是事后诸葛亮？
有的时候是的，因为开始你无法预见到各个问题和需求场景，你的模型开始就不能有足够的适应性和通用性，也没有必要。所以从这个角度上来说，建模也是在逐渐增加对问题域的了解和认识后，才能达到的，如果这些需求是分阶段输入和认识到的，那么它们也许只能通过重构的方式来迭代适配。从另一个角度来说，建模也需要考虑一定的前瞻性，在实践上我的理解是，建模时，让核心因素和功能不要偏离本质，避免将核心因素和非核心因素耦合在一起，这样即使以后需要扩展，也有足够的空间和方法，而不是要打破之前的耦合性。另外，也不要为了未知的需求，引入过多的灵活性，即遵循一个原则：以完美主义的思路去分析问题，以实用主义的方法去解决问题。
