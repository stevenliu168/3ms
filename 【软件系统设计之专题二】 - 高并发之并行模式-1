http://3ms.huawei.com/km/blogs/details/8847021?l=zh-cn


Version:0.10, last modified: 2020/08/31

Author: scott.zhang

 

一.   单例的并行模式

二.   Actor/CSP模式

三.   Barrier模式

四.   Future模式

五.   Pipeline模式

六.   Workers Pool模式

七.   生产者消费者模式

八.   Pub/Sub 模式

九.   分而治之

……

 

 

首先明确两个词：并发、并行，这两个词意思太过相近，比较容易混淆。并发而非并行，前者更加偏向于设计，而后者更加偏向于结构。

·       如果有且只有一个处理器，那么你的程序可以是并发的，但一定不是并行的；

·       一个良好的并发程序并非一定是并行的；

·       并行是一种物理状态，而并发是一种设计思想、程序的内部结构；

·       多处理器才有可能达到并发的物理状态；



并发强调一段时间做多件事，而并行则更强调同一时间做多件事。软件系统设计中关于高并发的并行设计模式涵盖多种，涉及但不仅限于单例并行模式、Actor/CSP模式、Barrier模式、Future模式、Pipeline模式、Workers Pool模式、生产者消费者、Pub/Sub模式、分而治之等模式。







说明：本文中程序代码主要以Java/GoLang示例为参考， 但并行模式的设计思想同样适用于像Python, Rust, C/C++等其它编程语言。

一.  单例的并行模式

本章节以 Java示例讲解。

单例是最常见的一种设计模式, 一般用于全局对象管理, 比如xml配置读写之类的.一般分为懒汉式, 饿汉式.



 

1.  饿汉式

JAVA


public class Singleton1 {

   private Singleton1() {}

   private static final Singleton1 single = new Singleton1();

   public static Singleton1 getInstance() {

      return single;

   }

}

缺点在于对象在一开始就直接初始化了.

 

2.  懒汉式

JAVA 方法上加synchronized

public static synchronized Singleton getInstance() {

   if (single == null) {

     single = new Singleton();

   }

   return single;

}

这种方式, 由于每次获取示例都要获取锁, 不推荐使用, 性能较差

 

懒汉式: 使用双检锁 + volatile

private volatile Singleton singleton = null;

public static Singleton getInstance() {

   if (singleton == null) {

      synchronized (Singleton.class) {

           if (singleton == null) {

            singleton = new Singleton();

          }

       }

   }

   return singleton;

}

本方式是对直接在方法上加锁的一个优化, 好处在于只有第一次初始化获取了锁，后续调用getInstance已经是无锁状态，只是写法上稍微繁琐点。使用volatile关键字, 主要涉及到JDK指令重排

 

懒汉式: 使用静态内部类

public class Singleton {

  private static class LazyHolder {

    private static final Singleton INSTANCE = new Singleton();

   }

   private Singleton (){}

   public static final Singleton getInstance() {

     return LazyHolder.INSTANCE;

  }

}

该方式既解决了同步问题, 也解决了写法繁琐问题. 推荐使用该写法.缺点在于无法响应事件来重新初始化INSTANCE.

 

二.  Actor/CSP模式

本章节以 Golang 示例讲解。

1.  Actor 模式

通用并发编程模型之一，可应用在几乎任何一种编程语言。多个actor可同时运行、不共享状态、通过向与进程绑定的消息队列(信箱)异步发送消息来进行通信。

下图：actor-1与actor-2进程通信依赖一个消息队列，且消息队列与进程互相耦合绑定。actor-1在发送完消息之后，在actor-2没有处理该消息的情况下，可以继续执行其他任务，说明actor进程间的通信为异步。



优点

·       消息传输和封装，多个Actor可以同时运行，但不共享状态，而且单个actor中的事件是串行执行（队列）

·       Actor模型支持共享内存模型，也支持分布式内存模型

缺点

·       尽管Actor模型比使用线程和锁模型的程序更易debug，但是也会存在死锁的问题，而且还需要担心绑定进程的队列溢出的问题;

·       没有对并行提供直接支持，需要通过并发的技术来构造并行方案。

 

2.  CSP 模式



CSP即通信顺序进程(communicating sequential processes)，与Actor模型类似，也是由独立的、并发执行的实体所组成，实体之间通过发送消息进行通信。go中的csp 模型channel对于goroutine来说是匿名的，无需和gid绑定，通过channel完成 goroutine之间的通信。(channel在 CSP 代表通道概念，这里只讨论Go相关，channel 等价于Go中的channel)

优点

·       与Actor相比，CSP最大优点是灵活性。Actor模型，负责通信的媒介和执行单元是耦合的。而CSP中，channel是第一类对象，可被独立创造、写入、独处数据，也可在不同执行单元中传递。

缺点

·       CSP 模型也易受死锁影响，且没有提供直接的并行支持。并行需要建立在并发基础上，引入了不确定性。

 

3.  两者区别

·       Actor模型重在参与交流的实体(即进程)，而CSP重在交流的通道，如Go中channel

·       CSP 模型不关注发送消息的进程，而是关注发送消息时使用的channel，而channel不像Actor模型那样进程与队列紧耦合。而是可以单独创建和读写，并在进程goroutine之间传递。

 

4. Go 的并发模型

Go采用CSP思想，Go的设计者 Rob Pike有一句经典的名言，“Do not communicate by sharing memory; instead, share memory by communicating.”

1. 使用发送消息来同步信息相比于直接使用共享内存和互斥锁是一种更高级的抽象，能够为程序设计上提供更好的封装，让程序的逻辑更加清晰；

2. 消息发送在解耦方面与共享内存相比也有一定优势，可以将线程的职责分成生产者和消费者，并通过消息传递的方式将它们解耦，不需要再依赖共享内存；

3. Go 语言选择消息发送的方式，通过保证同一时间只有一个活跃的线程能够访问数据，能从设计上天然地避免线程竞争和数据冲突问题；

 

三.  Barrier模式

本章节以 Golang 示例讲解。

barrier屏障模式顾名思义就是一种屏障，用来阻塞直到聚合所有 goroutine 返回结果。

使用场景

·       多个网络请求并发，聚合结果

·       粗粒度任务拆分并发执行，聚合结果



示例：/** Barrier*/


type barrierResp struct {

    Err error

    Resp string

    Status int

}

// 构造请求

func makeRequest(out chan<- barrierResp, url string)  {

    res := barrierResp{}

    client := http.Client{

        Timeout: time.Duration(2*time.Microsecond),

    }

    resp, err := client.Get(url)

    if resp != nil {

        res.Status = resp.StatusCode

    }

    if err != nil {

        res.Err = err

        out <- res

        return

    }

    byt, err := ioutil.ReadAll(resp.Body)

    defer resp.Body.Close()

    if err != nil {

        res.Err = err

        out <- res

        return

    }

    res.Resp = string(byt)

    out <- res

}

func barrier(endpoints ...string) {// 合并结果

    requestNumber := len(endpoints)

    in := make(chan barrierResp, requestNumber)

    response := make([]barrierResp, requestNumber)

    defer close(in)

    for _, endpoints := range endpoints {

        go makeRequest(in, endpoints)

    }

 

    var hasError bool

    for i := 0; i < requestNumber; i++ {

        resp := <-in

        if resp.Err != nil {

            fmt.Println("ERROR: ", resp.Err, resp.Status)

            hasError = true

        }

        response[i] = resp

    }

    if !hasError {

        for _, resp := range response {

            fmt.Println(resp.Status)

        }

    }

}

func main() {

barrier([]string{"https://www.baidu.com","http://www.sina.com", "https://segmentfault.com/"}...)

}

  

四.  Future模式

核心思想是异步调用，有点类似于异步的Ajax请求.当调用某个方法时,可能该方法耗时较久,而在主函数中也不急于立刻获取结果。因此可以让调用者立刻返回一个凭证,该方法放到另外线程执行,后续主函数拿凭证再去获取方法的执行结果即可, 其结构图如下。





1. Go: Future

常用在异步处理也称为 Promise 模式，采用一种fire-and-forget的方式，指主 goroutine 不等子 goroutine 执行完就直接返回了，然后等到未来执行完的时候再去取结果。在Go中由于goroutine的存在，实现这种模式挺简单。



/** Future */

type Function func(string) (string, error)

type Future interface {

    SuccessCallback() error

    FailCallback()    error

    Execute(Function) (bool, chan struct{})

}

 

type AccountCache struct {

    Name string

}

func (a *AccountCache) SuccessCallback() error {

    fmt.Println("It's success~")

    return nil

}

func (a *AccountCache) FailCallback() error {

    fmt.Println("It's fail~")

    return nil

}

func (a *AccountCache) Execute(f Function) (bool, chan struct{}){

    done := make(chan struct{})

    go func(a *AccountCache) {

        _, err := f(a.Name)

        if err != nil {

           _ = a.FailCallback()

        } else {

           _ = a.SuccessCallback()

        }

        done <- struct{}{}

    }(a)

    return true, done

}

func NewAccountCache(name string) *AccountCache {

    return &AccountCache{

       name,

    }

}

func testFuture() {

    var future Future

    future = NewAccountCache("Tom")

    updateFunc := func(name string) (string, error){

        fmt.Println("cache update:", name)

        return name, nil

    }

    _, done := future.Execute(updateFunc)

    defer func() {

        <-done

    }()

}

 

func main() {

    var future Future

    future = NewAccountCache("Tom")

    updateFunc := func(name string) (string, error){

        fmt.Println("cache update:", name)

        return name, nil

    }

    _, done := future.Execute(updateFunc)

    defer func() {

        <-done

    }()

    // do something

}

 

2. Java: Future



 

Future模式接口示例如下:





 

1)  FutureTask实现

注意其中两个耗时操作.

·    如果doOtherThing耗时2s, 则整个函数耗时2s左右.

·    如果doOtherThing耗时0.2s, 则整个函数耗时取决于RealData.costTime, 即1s左右结束.

 

public class FutureDemo1 {

  public static void main(String[] args) throws InterruptedException, ExecutionException {

  FutureTask<String> future=new FutureTask<String>(new Callable<String>() {

     @Override

     public String call() throws Exception {

      return new RealData().costTime();

  }});

  ExecutorService service = Executors.newCachedThreadPool();

  service.submit(future);

   System.out.println("RealData方法调用完毕");

  doOtherThing(); // 模拟主函数中其他耗时操作

  System.out.println(future.get());// 获取RealData方法的结果

  }

  private static void doOtherThing() throws InterruptedException {

   Thread.sleep(2000L);

  }

} 

class RealData {

   public String costTime() {

     try {

        Thread.sleep(1000L); // 模拟RealData耗时操作

        return "result";

     }catch (InterruptedException e) {

        e.printStackTrace();

     }

     return "exception";

   }

} 
 

2)  Future实现

与上述FutureTask不同的是, RealData需要实现Callable接口

public class FutureDemo2 {

  public static void main(String[] args) throws InterruptedException, ExecutionException {

     ExecutorService service = Executors.newCachedThreadPool();

     Future<String> future = service.submit(new RealData2());

     System.out.println("RealData2方法调用完毕");

     doOtherThing(); // 模拟主函数中其他耗时

     System.out.println(future.get());// 获取RealData2方法的结果

  }

  private static void doOtherThing() throws InterruptedException {

     Thread.sleep(2000L);

  }

}

class RealData2 implements Callable<String>{

  public String costTime() {

    try {

      Thread.sleep(1000L); // 模拟RealData耗时操作

      return "result";

    }catch (InterruptedException e) {

      e.printStackTrace();

     }

     return "exception";

  }

   @Override

   public String call() throws Exception {

    return costTime();

  }

}

 

另外Future本身还提供了一些额外的简单控制功能

其API如下

boolean cancel(boolean mayInterruptIfRunning); // 取消任务
boolean isCancelled();// 是否已经取消

boolean isDone();// 是否已经完成

V get() throws InterruptedException, ExecutionException; // 取得返回对象

V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException; //取得返回对象, 可设置超时时间

 


五.  Pipeline模式

本章节以 GoLang示例讲解。

Pipeline 即管道，和Barrire模式不同的是，它是按顺序的，类似于流水线。可利用多核的优势把一段粗粒度逻辑分解成多个 goroutine 执行。

下图不是很能表达并行的概念，其实三个goroutine是同时执行的，通过buffer channel将三者串起来，只要前序goroutine处理完一部分数据，就往下传递，达到并行的目的。



示例： 实现一个功能，给定一个切片，然后求它的子项的平方和。

例如，[1, 2, 3] -> 1^2 + 2^2 + 3^2 = 14。正常的逻辑，遍历切片，然后求平方累加。使用 pipeline 模式，可以把求和和求平方拆分出来并行计算。

/** Pipeline 模式 */

func generator(max int) <-chan int{

    out := make(chan int, 100)

    go func() {

        for i := 1; i <= max; i++ {

            out <- i

        }

        close(out)

    }()

    return out

}

func power(in <-chan int) <-chan int{

    out := make(chan int, 100)

    go func() {

        for v := range in {

            out <- v * v

        }

        close(out)

    }()

    return out

}

func sum(in <-chan int) <-chan int{

    out := make(chan int, 100)

    go func() {

        var sum int

        for v := range in {

            sum += v

        }

        out <- sum

        close(out)

    }()

    return out

}

func main() {

    // [1, 2, 3]

    fmt.Println(<-sum(power(generator(3))))

} 
