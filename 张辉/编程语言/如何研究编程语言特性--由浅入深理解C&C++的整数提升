如何研究编程语言特性--由浅入深理解C&C++的整数提升
日期：2018-05-08 08:55浏览：1263评论：4
前言
写这篇技术文章的主要目的不是为了介绍整数提升，而是介绍一下对于编程语言特性我们应该如何去进行研究，如何做到举一反三，锻炼自己的发散性思维，追本溯源，找到本质原因。

总的来说，编程语言特性还是比较好的研究的，无非就是下面三个步骤：

通过代码测试，先有一个感性的认识
阅读C/C++/Java等的标准规范文档，查看规范里面是如何定义的， 如果是未定义行为或者编译器实现行为，那么各个厂商的编译器可能实现就不一样了。
追本溯源，研究汇编/JVM等底层，看看语言特性后面的本质是什么，尤其是一些语法糖，回到本质其实很简单。
那么我就针对整数提升这个特性来进行一次思维探索过程。

类型转换
在C&C++编程中，有char，short，int，long, float, double类型，并且还分为有符号和无符号，在编码过程中那么很容易出现类型转换，包括隐式转换和显式转换。 由于各个计算机系统对于整数和浮点数的实现可能有差异，并且在C标准中对于类型转换描述的比较晦涩，那么就导致我们在编写代码的时候往往不关注类型转换，但是却偶尔出现一两个极其怪异的问题。
所以本文将主要介绍整数提升（Interger Promotion）这种类型的隐式转换。

Interger Promotion的概念
在一个表达式中，凡是可以使用int或unsigned int类型做右值的地方也都可以使用有符号或无符号的char型、short型和Bit-field。如果原始类型的取值范围都能用int型表示，则其类型被提升为int，如果原始类型的取值范围用int型表示不了，则提升为unsigned int型，这称为IntegerPromotion。做Integer Promotion只影响上述几种类型的值，对其它类型无影响。
我们看两个例子：

#include <stdio.h> 
int main()
{
    char a = 30, b = 40, c = 10;
    char d = (a * b) / c;
    printf ("%d ", d); 
    return 0;
}
输出结果是 120.

上面的例子如果按照char运算结果：30 * 40一定会溢出，因为char的的取值范围是-128到127，那么实际的值应该是-8。 但是结果却是120，这就是因为integer promotion的结果，a * b的时候已经提升将a和b提升到int进行了运算。

另外一个例子：

#include <stdio.h>

int main()
{
    char a = 0xfb;
    unsigned char b = 0xfb;

    if (a == b)
      printf("\nSame");
    else
      printf("\nNot Same");
    return 0;
}
输出结果是Not Same。
这是因为a是一个有符号的char，那么转换成int以后就是-5， b是一个无符号char，但是int可以容纳0xfb(251)，所以if判断的时候类似于下面的代码
if (（int）-5 == (int)251)， 所以是NOt Same。

C标准中对于integer promotion的场景描述
Default Argument Promotion
If the expression that denotes the called function has a type that does not include a prototype, the integer promotions are performed on each argument, and arguments that have type float are promoted to double. These are called the default argument promotions.

如果一个函数的形参类型未知， 例如使用了Old Style C风格的函数声明，或者函数的参数列表中有 …，那么调用函数时要对相应的实参做Integer Promotion，此外，相应的实参如果是float型的也要被提升为double类型，这条规则称为Default Argument Promotion。

char ch = 'A';
printf("%c", ch);
ch要被提升为int型之后再传给printf。

如果我们要实现一个自定义的printf，会有一个判断占位符的代码，类似下面的

switch (*fmt)
        {  
            case '%': /* 连续2个'%'输出1个'%' */ 
                putchar('%');  
                break;  
            case 'd': /* 按照int输出 */ 
            {  
                /* 下一个参数是int，取出 */
                int i = va_arg(ap,int);  
                printf("%d",i);  
            }  
            break;  
            case 'c': /* 按照字符输出 */
            {  
                /** 但是，下一个参数是char吗 这里实现是错误的*/
                char c = va_arg(ap,char);
                printf("%c",c);
            }
            break;  
        }
我们用va_arg(ap,type)取出一个参数的时候，
type绝对不能为以下类型：

char、signed char、unsigned char
short、unsigned short
signed short、short int、signed short int、unsigned short int
float
这是因为C标准里面规定了这种不定参数函数调用的规则：
If the expression that denotes the called function has a type that does include a prototype, the arguments are implicitly converted, as if by assignment, to the types of the corresponding parameters, taking the type of each parameter to be the unqualied versionof its declared type. The ellipsis notation in a function prototype declarator causes argument type conversion to stop after the last declared parameter. The default argument promotions are performed on trailing arguments.
在C语言中，调用一个不带原型声明的函数时：调用者会对每个参数执行“默认实际参数提升(default argument promotions)。同时，对可变长参数列表超出最后一个有类型声明的形式参数之后的每一个实际参数，也将执行上述提升工作。

所以，不定参数调用的时候有如下规则：

float类型的实际参数将提升到double
char、short和相应的signed、unsigned类型的实际参数提升到int
如果int不能存储原值，则提升到unsigned int
所以上面错误的代码应该这么写

int c = va_arg(ap,int); 
printf(“%c”,c);
Integer conversion rank
在C++标准中，定义了每个integer type的Integer conversion rank：

No two signed integer types other than char and signed char (if char is signed) shall have the same rank, even if they have the same representation.
The rank of a signed integer type shall be greater than the rank of any signed integer type with a smaller size.
The rank of long long int shall be greater than the rank of long int, which shall be greater than the rank of int, which shall be greater than the rank of short int, which shall be greater than the rank of signed char.
The rank of any unsigned integer type shall equal the rank of the corresponding signed integer type.
The rank of any standard integer type shall be greater than the rank of any extended integer type with the same size.
The rank of char shall equal the rank of signed char and unsigned char.
The rank of bool shall be less than the rank of all other standard integer types.
The ranks of char16_t, char32_t, and wchar_t shall equal the ranks of their underlying types.
The rank of any extended signed integer type relative to another extended signed integer type with the same size is implementation-defined, but still subject to the other rules for determining the integer conversion rank.
For all integer types T1, T2, and T3, if T1 has greater rank than T2 and T2 has greater rank than T3, then T1 shall have greater rank than T3.
当触发integer promotion和usual arithmetic conversions的时候就会使用上面的rank。具体的我就不翻译了，比较简单的英文，就是介绍几个整形类型之间的提升的优先级排序。

Usual Arithmetic Conversion
两个算术类型的操作数做算术运算，比如a + b，如果两边操作数的类型不同，编译器会自动做类型转换，使两边类型相同之后才做运算，这称为Usual Arithmetic Conversion。转换规则如下：

如果有一边的类型是long double，则把另一边也转成long double。
否则，如果有一边的类型是double，则把另一边也转成double。
否则，如果有一边的类型是float，则把另一边也转成float。
否则，两边应该都是整型，首先按上一小节讲过的规则对a和b做Integer Promotion，然后如果类型仍不相同，则需要继续转换。首先我们规定char、short、int、long、long long的转换级别（Integer Conversion Rank）一个比一个高，同一类型的有符号和无符号数具有相同的Rank。转换规则如下：

a. 如果两边都是有符号数，或者都是无符号数，那么较低Rank的类型转换成较高Rank的类型。例如unsigned int和unsigned long做算术运算时都转成unsigned long。

b. 否则，如果一边是无符号数另一边是有符号数，无符号数的Rank不低于有符号数的Rank，则把有符号数转成另一边的无符号类型。例如unsigned long和int做算术运算时都转成unsigned long，unsigned long和long做算术运算时也都转成unsigned long。

c. 剩下的情况是：一边有符号另一边无符号，并且无符号数的Rank低于有符号数的Rank。这时又分为两种情况，如果这个有符号数类型能够覆盖这个无符号数类型的取值范围，则把无符号数转成另一边的有符号类型。例如遵循LP64的平台上unsignedint和long在做算术运算时都转成long。

d. 否则，也就是这个有符号数类型不足以覆盖这个无符号数类型的取值范围，则把两边都转成有符号数的Rank对应的无符号类型。例如在遵循ILP32的平台上unsignedint和long在做算术运算时都转成unsigned long。

下面这些运算符需要进行Usual Arithmetic Conversion：

Multiplicative *, /, %
Additive +, -
Bitwise &, ^, |
The conditional operator (… ? … : …)
Relational operators >, >=, <, <=
Equality operators ==, !=
单目运算符+ - ~只有一个操作数，移位运算符<< >>两边的操作数类型不要求一致，这些运算不需要做Usual Arithmetic Conversion，但也需要做Integer Promotion。

单目运算符+ - ~只有一个操作数，移位运算符<< >>两边的操作数类型不要求一致，这些运算不需要做Usual Arithmetic Conversion，但也需要做Integer Promotion。所以在C语言中其实并不存在8位整数的位运算，操作数在做位运算之前都至少被提升为int型了。比如：

unsigned char c = 0xfc;
unsigned int i = ~c;
计算过程是这样的：常量0xfc是int型的，赋给c要转成unsigned char，值不变；c的十六进制表示是fc，计算~c时先提升为整型（000000fc）然后取反，最后结果是ffffff03。注意，如果把~c看成是8位整数的取反，最后结果就得3了，这就错了。

枚举和整数之间的转换(C++中的规则研究)
在C++11以前，比如C++03中，The underlying type of an enumeration is an integral type that can represent all the enumerator values defined in the enumeration. It is implementation-defined which integral type is used as the underlying type for an enumeration except that the underlying type shall not be larger than int unless the value of an enumerator cannot fit in an int or unsigned int.

所以对于枚举自动转换成的整数类型是由编译器实现决定的，在VS2017上面，我们定义一个enum，通过sizeof可以得到4，那么底层类型是int。在gcc中有编译选项-fshort-enums, -fno-short-enums，可以优化enum的类型空间， 通过char或者short来作为枚举的底层数据类型。

在C2011中也是如此描述的：
Constraints:
The expression that defines the value of an enumeration constant shall be an integer
constant expression that has a value representable as an int.

Each enumerated type shall be compatible with char, a signed integer type, or an unsigned integer type. The choice of type is implementation-defined,128) but shall be capable of representing the values of all the members of the enumeration. The enumerated type is incomplete until immediately after the } that terminates the list of enumerator declarations, and complete thereafter.

说句实话，我被C/C++的标准要搞疯了，描述的很晦涩， 查了半天：enumeration constant and enumerated type is not the same thing. The former are the contents of the enum declaration list, the latter is the actual variable. So while the enumeration constants must be int, the actual enumeration variable could be another type.
也就是说枚举里面的各个常量的类型应该是int，但是枚举定义本身的底层类型可能是int，char或者long long等，只要能够容纳所有的枚举常量就行。

enum X { A, B };

// A has type int
assert(sizeof(A) == sizeof(int));

// some integer type. Maybe even int. This is
// implementation defined. 
assert(sizeof(enum X) == sizeof(some_integer_type));
在C++11以后，比如在C++14的规范中：Each enumeration defines a type that is different from all other types. Each enumeration also has an underlying type. The underlying type can be explicitly specified using enum-base; if not explicitly specified, the underlying type of a scoped enumeration type is int.

A prvalue of an unscoped enumeration type whose underlying type is not fixed (7.2) can be converted to a prvalue of the first of the following types that can represent all the values of the enumeration (i.e., the values in the range bmin to bmax as described in 7.2): int, unsigned int, long int, unsigned long int, long long int, or unsigned long long int.

对于C++来说：

enum name { enumerator = constexpr , enumerator = constexpr , ... }： 声明无作用域枚举类型，其底层类型不固定（此情况中，底层类型是实现定义的能表示所有枚举项值的整数类型；此类型不大于 int ，除非枚举项的值不能放入 int 或 unsigned int 。若枚举项列表为空，则底层类型为如同枚举拥有单个值为 0 的枚举项）。
enum struct|class name { enumerator = constexpr , enumerator = constexpr , ... }： 声明底层类型为 int 的有作用域枚举类型：
enum name : type { enumerator = constexpr , enumerator = constexpr , ... }
enum struct|class name : type { enumerator = constexpr , enumerator = constexpr , ... }
都指定了枚举的底层类型，为type
无作用域枚举类型的值可隐式转换为整数类型。若底层类型不固定，则值可转换到下列列表中能保有其整体值范围的首个类型： int 、 unsigned int 、 long 、 unsigned long 、 long long 或 unsigned long long 。若底层类型规定，则值可转换到其提升后的底层类型。
enum class C : char { C1 = 1, C2 = 2 }; // 指定枚举的底层数据类型为char
enum class D : unsigned int { D1 = 1, D2 = 2, Dbig = 0xFFFFFFF0U }; // 指定枚举的底层数据类型为unsigned int

std::cout << sizeof(C::C1) << std::endl; // 1
std::cout << sizeof(D::D1) << std::endl; // 4
std::cout << sizeof(D::Dbig) << std::endl; // 4
在C++11中，定义枚举的时候可以直接指定枚举的底层数据类型，可以通过std::underlying_type来获取底层数据类型，在这个数据类型基础上面在进行整形提升和Usual Arithmetic Conversion。

Integer Promotion的底层原理
我们深入汇编看一下Integer Promotion，看看为什么需要实现这个特性？

int main(void)
{
    unsigned char a = 0xff;
    char b = 0xff;
    int c = a + b;
    return 0;
}
通过反汇编：

movl    $0, -4(%rbp)        # The return value of main is 0
movb    $-1, -5(%rbp)       # unsigned char a = 0xff;
movb    $-1, -6(%rbp)       # char b = 0xff;
movzbl  -5(%rbp), %eax
movsbl  -6(%rbp), %ecx
addl    %eax, %ecx          # int c = a + b
movl    %ecx, -12(%rbp)     # store c onto the stack
movl    -4(%rbp), %eax
popq    %rbp
ret                         # return value 0 from eax
在汇编指令中的b,l，s等意思如下：

b = byte (8 bit)
s = short (16 bit integer) or single (32-bit floating point)
w = word (16 bit)
l = long (32 bit integer or 64-bit floating point)
q = quad (64 bit)
t = ten bytes (80-bit floating point)
这种GAS（GNU Assembler， GNU汇编器）形式的汇编语法是将参数从左到右操作的：
movl $0, -4(%rbp)表示将0x00000000移动到地址-4(%rbp)。
movzbl -5(%rbp), %eax表示将-5(%rbp)的值（0xff）移动到 %eax，但是是拷贝32位整数长度，并且多余的部分按照0来补充（也就是无符号的char提升到int）
movsbl -6(%rbp), %ecx表示将-6(%rbp)的值（0xff）移动到 %ecx，但是是拷贝32位整数长度，并且多余的部分按照有符号位来补充（也就是有符号的char提升到int）
最后addl就是按照32位的整数来进行加法运算。

所以从最底层的汇编来分析，所有整数的运算都是基于32位来进行的（32位系统上面），在编程语言层面的char，short的操作都会提升到int来进行汇编指令的计算。
也就是说在32位CPU下面，寄存器都是32位的，所以低于32位的值都会提升到32位，然后通过寄存器交给ALU来进行运算。

总结
关于整数提升这个特性就介绍完了， 我先吐槽一下C/C++的标准是在是太难读了，有的时候感觉前后矛盾，好晦涩。（只能怪自己的英文不行了）
但是如何研究一个语言特性的过程就是这样的， 通过一些日常工作和书籍的做一个感性的认识，然后查阅分析标准，最后研究底层实现。
