软件架构的背后--正反康威定律
1      康威定律
康威定律（Conway's Law）：“让四个人开发编译器，你就会得到四个（4-pass）编译器”。

更容易理解的说法就是：“设计系统的组织,最终产生的设计等同于组织之内、之间的沟通结构。”

 

康威定律其实是一个社会研究，其实编程在今天社会，已经完全是一个社会工作，程序员的技术要求越来越低，大量的开源框架和工具让编码变得很简单。

其实当初编程就是讲社会上的某些问题转换成图灵机某型，让计算机来解决。

 

我们看一下主流的一个公司的软件架构：



 

从上图可以看出，每个公司的软件架构都是公司组织架构的直接映射。

2      正康威定律
在一个公司需要进行新架构设计或者演进的时候，如果仅仅是从技术层面来分析可行性，那么必然会是一个失败或者不完美的产品。

 

我们先看一下Linux开源社区，linux有一个微内核，这个作为核心部件，其他的开发人员都是基于这个核心来进行扩展开发的，所有的开发都必须遵守核心部件的接口。这是与Linux社区的组织结构有关心，核心委员会具有绝对的权利，任何扩展都必须按照委员会的要求来做，如果不满足，那么代码将无法提交。

 

比如华为，简单来说，就是平台+应用的战略。在华为就比较难做到类似于Linux那样的社区式开发，因为华为的组织结构是应用比平台更具有话语权，及时这个特性对于平台的架构有冲击，但是只要应用来自一线的压力，那么就会强制要求平台实现，所以平台和应用之间的耦合是相当复杂。

3      逆转康威定律
上面说到因为康威定律的存在，可能导致一个软件公司或者组织无法实现架构的演进，那么怎么办，在最新的ThoughtWorks公司的技术雷达的[8] Inverse Conway Maneuver.



反向康威操纵（Inverse Conway Maneuver）(Trial)——它建议“逐渐改进你的团队和组织结构来促进你所渴望的架构”，理想情况下，达到技术架构与业务架构的同构。

 

从上面的定义可以看出，既然组织结构会影响产品的架构，那么就逐渐改进组织结构，来促进软件架构。

 

但是任何架构的演进或者软件工程的切换，都有可能失败或者没有达到预期的目标。就拿华为公司来说，在2008年风风火火的全员敏捷其实是不成功的, 根本原因就是在变革的时候有些步骤没有做到位（比如没有让全员信服为什么要敏捷，没有让核心授权团队参与）。

Kotter在组织变革中描述了八个步骤：



 

 

从这八个步骤可以看出，不管是做软件架构的重大变革，组织结构的变革，还是流程方法的变革，都需要按照上面的八个步骤来进行。

 

比如现在很流行的微服务架构，如果还是按照以前的组织结构，一个团队几十个人，是无法有效地开发微服务的架构，需要将团队进行划分，比如2个披萨的团队。这样可以让团队更容易内聚，更容易聚焦到独立的模块，更容易做到团队的使命感和授权。这样的组织架构才能高效地做出微服务架构。

 

 

最后说几点：

1.     在进行软件架构演进的时候不要只考虑技术层面，对于组织层面和人员能力的要求也需要考虑的，这是对架构师的一个要求，不要写出架构文档就不管了，不要描述出技术方案就行了。

2.     对于软件架构的演进或者工程方法的推行，需要按照一定的方案来推行，不要强制推行，一定要注意推行过程中如何过渡。可以按照Kotter在组织变革八步骤来进行。

3.     如果组织架构已经约束了软件架构，那么需要对组织架构进行适当的调整，来促进软件架构的发展。
