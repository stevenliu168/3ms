软件设计三剑客：领域驱动设计+演进式设计+正交设计

     --探究软件设计的本质解决之道

1    软件设计的本质

谈到软件设计，有很多种解释：有人说软件设计就是从需求出发，划分软件系统的架构；有人说软件设计就是使用面向对象或者面向过程等范式来指导软件架构的设计；有人说软件设计是采用某种编程语言来解决某个需求的过程。 上面这些说法都是正确的，但是却没有抓住软件设计的本质，没有理解到软件设计是一个持续的过程。

“Design is there to enable you to keep changing the software easily in the long term”
–- Kent Beck. 软件设计其实是为了软件在长期范围内容易应对变化。

从另一个方面来讲，软件都是在变化的，因为需求是变化的

如果我们的软件不需要演进，一次性的，那么我不的确不需要什么设计，用完就抛弃掉，何必浪费人力去设计。但是现实世界不是这样的，软件一定是一个演进的过程，是一个不停修改需求，添加需求的过程。

所以我们在软件设计和开发中总是与变化做斗争，好的软件设计就是可以让架构很低成本地应对变化。

所以我们可以这么说，软件设计和开发的本质就是要应对变化，进行演进。如果从最本质上来说，也就是为了最小投入追求最大利益实现软件。

2    领域驱动设计的理解

Eric Evans的那本《领域驱动设计——软件核心复杂性应对之道》提出了在大型复杂系统中如何设计出易理解，易维护的系统。我们刚开始学习DDD的时候，觉得这个和OOAD比较像，但是我们传统的面向对象是领域中立的，主要是为了解决模块化和复用的问题。领域驱动设计更重要是一个管理的作用，One Team One Module, 让一个团队有一个统一的语言，统一的模型，这样交流非常顺畅，也保证了领域和设计一致的，使得软件更具有理解性，也具有演进性。 传统的瀑布式开发的缺点:


这样设计，开发和测试总是分离的，导致了交流之间容易信息流失和误解，也导致了代码的模型也只有开发能够看懂。而领域驱动设计的统一模型方便了整个团队的交流。


最后领域驱动设计里面有很多模式（实体，值对象，工厂，防腐层等等），这些都是优秀实践，如果你真正去了解过软件设计，很多东西都是很自然的，而不需要你去死记硬背，对于没有软件设计经验的人来说，却可以提高设计素养和指导，让后续的软件设计中有章可循。

3    演进式设计的理解

演进式设计是一个系统不断演化的过程，旨在响应不断变化的需求，并更好地理解现有需求，同时也为了抓住由于新技术和更好思想的产生以及世界的不断变化而出现的新机遇。为了提高效率并且最小化风险，演进式设计都要遵守TDD和面向模式的开发。

演进式的就是“适度预先设计” 和 ”保持设计合理状态”。

适度：满足当前需求，切勿过度设计
保持设计合理：及时将需求变化时出现的不合理改变成合理


演进式设计背后有一个原则就是最大收益比，在这个阶段我就只是实现这个需求，不要去为了追求完美设计而实现暂时不需要的功能，也不要为了暂时不需要的扩展性带来不必要的复杂度，因为：

你需要付出更多的精力去做完美设计，甚至可能导致设计难产
软件开发阶段引入了不必要的复杂度，需要额外写很多暂时不需要的代码和接口
一旦变化出现，可能你以前的设想是错误的，你不得不重新修改代码来满足变化
但是为了保证演进式设计，那么就有一些具体要求，其中最重要一个原则就是“简单设计原则” 以下四个原则的重要程度依次降低。

通过所有测试Passes all tests
尽可能消除重复 No Duplication(DRY)
尽可能清晰的表达 Reveals Intent (Self-Documenting Code)
尽可能的减少代码元素的的数量 Has no superfluous parts (Minimizes the number of classes and methods)
重要性： 1 > 2 > 3 >4 也有这么排名的: 1 > 3 > 2 > 4

其实简单设计原则可以让我们在设计和决策的时候有很清晰的Guideline，遇到具体问题的时候我应该如何抉择，也可以让我在软件设计和实现的时候最低成本。 对于简单设计的第二点尽可能消除重复, 重复就意味着违背了高内聚低耦合，那么可以通过正交设计来指导消除重复。

4    正交设计的理解

正交设计，是Thoughtworks的高级咨询师袁英杰提出来的，总的来说就是下面四个原则：

最小化重复： 如果一个变化点要修改多个地方
分离关注点： 如果多个变化点要修改一个地方
缩小依赖范围： 不依赖不必要的依赖
向着稳定的方向依赖 ： 不依赖不稳定依赖
从根本来说，正交四原则就是为了追求软件架构的高内聚和低耦合而提出来的，由软件的变化驱动，反过来让系统演进的更容易应对变化。按照Kent Beck的说法就是追求局部化影响。

正交设计其实是提供了一种手段，一种可以让你的程序低成本演进的手段。在变化没有出现之前，代码就是稳定的，一旦变化出现，按照一定的手段进行调整，以此来满足本次变化，并且后续相同的变化也只需要扩展就行，不需要修改代码。

我们经常说的SOLID原则和面向对象领域的各种设计模式其实都是正交四原则的应用。

5    如何进行软件设计

我们以前的设计思维方式，比如熟悉面向对象或者过程式设计方式，或者为了追求技术潮流，进行微服务改造或者云化改造，就会根据这些设计方法的描述，定义出了一套步骤，先做什么，后做什么，就怕别人不知道你是在面向对象设计或者微服务架构设计。

其实我们主要缺乏的是下面两点：

对于技术的本质概念了解很少， 大部分时候停留在技术本身层面，对于技术背后要表达的概念和思想却不甚了解。我们不了解技术本身并不可怕，不了解可以再学，最怕的是只了解技术本身，而不了解背后原理就开始胡乱使用。
没有从问题出发来考虑问题，只要你去解决这些问题的时候，你都不用去死记硬背什么SOLID原则，什么GoF设计模式，只要你去追求最本质的东西，自然而然设计出来的软件就自然遵从了这些原则。
无论我们是做传统嵌入式软件设计，还是做云化分布式软件设计，还是做微服务架构设计，总体来说都需要解决下面问题：

软件设计出来模型如何实现
软件设计应该如何保证高内聚低耦合, 满足后续变化演进
软件设计如何获得最高收益比
对于第一个问题，如果是超简单系统。你都不用什么图形，什么工具就可以直接建模，那么也是OK的，因为是如此简单以至于我不要借助所谓的工具；如果是稍微复杂的系统，团队之间为了更好地交流，为了讨论出这个模型，一定需要借助工具，那么就可以使用DDD来协助团队进行建模了。

对于第二个问题，如何保证高内聚低耦合，这是一个很难回答的问题，过于抽象了，但是正交设计就是为了解决这个问题的，代码重复就是代码低内聚高耦合的直接表现，那么正交策略就是在变化出现的时候来通过消除重复来满足高内聚和低耦合。

对于第三个问题，在大部分的系统设计，演进式设计就是追求收益比，在当前情况下采用适度的设计，如果出现不合理的地方进行修正。但是如何演进式设计是最低成本的，那么正交设计就出来的。正交设计可以保证软件演进是低成本的。 但是也有演进式不太适用的地方，比如极强的高可靠系统，航天软件，车载软件就比较推荐计划式设计，只有这样，才能保证安全可靠。

我们现在正在做一个软件的项目架构设计，由于是一个复杂的电信软件，所以采用了领域驱动设计来进行统一建模，团队的所有的交流都是基于这个模型进行的。其次在软件设计过程中进行模块化的时候进行全面解耦，运用正交设计来不停地分离变化方向，抽取抽象接口。最后在每一个设计的时候都是基于现有需求为出发点，绝对不过度设计，不需要的接口不会出现。

我们再看看现在流行的微服务架构设计，我们上来就是讨论微服务该如何如何划分，该选用什么通讯框架。其实微服务划分就是一个高内聚和低耦合的模块划分过程，如果你以前在面向对象中知道如何划分，你现在也知道到该如何划分，如果你以前不懂领域建模，那么你在微服务下也不会，只不过你现在要考虑的东西更多一点：异步通信的性能能否接受，是否需要故障隔离，是否需要独立伸缩等。如果你以前不懂模块化的概念，不懂高内聚低耦合，那么你的微服务也一定划分不好。至于什么通讯框架，你要看你的系统的性能要求，是要求同步的HTTP，还是异步的消息通信，是否需要全面解耦，使用kafka这样的消息系统。
微服务架构本身一个演进式架构，因为微服务遵循DDD中的边界上下文，并且是物理隔离，所以微服务的替换和升级是非常容易。

所以我们在进行微服务这些新潮的软件架构实现时，不要被一些新技术所迷惑，回到本质，回到你需要用微服务解决的问题，其实就很清楚应当如何进行微服务设计了,其实也就是追求高内聚低耦合，追求演进最小成本。

6    总结

软件的设计是为了解决客户的业务问题，如何最小成本低实现软件，如何保证软件的可演进性，这都是我们追求的。我希望我们后续软件设计中从这个地方出发，通过我们掌握的软件设计方法(领域驱动设计，演进式设计和正交设计)来解决实际中问题，才能设计出简单的，易懂的，高度灵活的系统。

这里描述了“领域驱动设计”， ”演进式设计”和“正交设计”的一些本质理解, 这三种设计方法和原则可以解决我们在设计过程遇到的软件组织上的问题（其他的比如性能，可靠性需要单独考虑）。希望这三种设计方法可以被大家从本质上掌握，无论是传统嵌入式软件设计，还是CloudNative软件设计，都离不开这些基本的设计方法，我们不希望一旦到了比较High Level的层面设计就忘掉了最本质的东西。即使是华为公司的ACT 15³提出的各种设计原则最终还是需要这些设计方法和实践的支撑。

参考：
对于什么是正交设计，这里进行描述：http://3ms.huawei.com/hi/blog/40602_2196735.html?h=h

什么是简单设计，这里进行了描述：http://3ms.huawei.com/hi/blog/40602_2196741.html
