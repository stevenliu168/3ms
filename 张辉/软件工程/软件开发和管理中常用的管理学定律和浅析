软件开发和管理中常用的管理学定律和浅析
最近和ThoughtWorks公司的人交流软件技术和发展的时候，他们总会说一些XX定律，搞得节奏跟不上，所以花了点时间学习了一些对于软件研发有帮助的管理学，社会学或者犯罪学上的定律。也简单地思考了一下在实际开发中遇到的一些问题和如何运用这些定律来分析和解决。


下面的东西都暂时都理解比较粗浅，需要在实际软件开发和管理中不停地思考和实践，才能真正理解和运用，提高研发效率。

1      墨菲定律
l  定律内容

墨菲定律（Murphy's Law），又译为墨菲定理、墨菲定理，具体内容是“凡是可能出错的事必定会出错”，指的是任何一个事件，只要具有大于零的概率，就不能够假设它不会发生。

l  理解与思考

1.            不要存在侥幸心理，在编码设计中如果总是觉得操作系统应该是稳定的啊；硬件应该很难故障；这个代码分支是异常分支，很难跑到；这个指针前面都有赋值啊，应该不会为NULL。如果觉得这些概率低的问题不会发生，不希望花更多的时间浪费在异常保护上面。那么这些问题在软件开发中会一定出现的，只是时间早晚的问题。

2.            任何软件出的bug都是有原因的，不可能是无缘无故的问题。如果突然出现了概率性极低的问题，但是后面一直重现不了，那么怎么处理，是否可以不处理，反正也不重现。可以考虑用日志等记录一下信息，总有一天会出现的，那个时候保证你有足够的信息来定位这个问题是很关键的。

3.            要杜绝这些偶发性问题，一旦出现，要及时总结，及时回溯，通过一些分析方法（比如QCC中鱼骨图，5Why等），在项目开发流程中不停地总结，减少墨菲定律的出现。

2      康威定律
l  定律内容：

康威定律（Conway's Law）， 说的是“设计系统的组织，最终产生的设计等同于组织之内、之间的沟通结构”，让四个人开发编译器，你就会得到四个（4-pass）编译器，也就是说产品必然是其组织沟通结构的缩影。

l  理解与思考

1.         对于团队的要求：团队内部和之间要加强沟通和交流，并且小的团队比庞大的团队更有效率。

2.         对于架构师的要求：架构师在进行架构设计的时候，除了技术层面的掌握外，更需要关注组织架构和对于组织中成员的能力要求，因为这些也直接决定了软件架构是否成功。

3      布鲁克斯定律
l  定律内容：

布鲁克斯(Brooks)在《人月神话》中提到： 往进度落后的项目中投入更多的人手往往使进度更加落后。原因在于新人进来后的所必需经历的学习曲线。

l  理解思考：

1.      知识管理的重要性：在知识管理上面，知识是分为显式知识和隐式知识。尤其是隐式知识，是很重要的，需要通过一定的手段将隐式知识转换成显式支持，然后传递给

关于显式知识和隐式知识的介绍和转换，这篇博客中有介绍：

http://3ms.huawei.com/hi/blog/40602_1967611.html?h=h

2.   敏捷迭代开发和服务化组件化开发

只有这种开发模式，才有一定的阶段性和隔离性，这能才能保证开发人员的在阶段间隙加入项目，才相对地在同一个起跑线上。

4      帕金森定律
l  定律描述：

帕金森（Parkinson）定律：工作总是拖延到它所能够允许最迟完成的那一天（Workexpands to fit the allotted time.）。

所以帕金森定律又被称为学生定律。有时候时间太多反而使你懒散、缺乏原动力、效率低，可能还会大幅度降低效力。

l  理解思考：

1.      及时暴露问题

通过现在流行的每日站会，快速迭代，Story分析，持续集成和部署等将这个开发流程透明化，这样大家可以及时了解和反馈项目中的信息，不会导致到最后面才会出现问题。这也是敏捷的思想。

2.   项目流程的定制

不管是项目，还是人员本身，都最后先紧后松，给项目和自己留一点缓冲的时间。

5      手表定律
l  定律内容：

手表定理（Watch Law）是指一个人有一只表时，可以知道现在是几点钟，当他同时拥有两只表时，却无法确定。两只手表并不能告诉一个人更准确的时间，反而会让看表的人失去对准确时间的信心。

l  理解思考：

这个在华为公司是比较常见的，比如一个新员工要去咨询一个方案，两个不同的SE，或者PL给出的理解都不一样，导致新员工就浪费时间在方案澄清上面了

那这种现象怎么避免了，比较简单的做法就是要组织架构的调整，任何决策只有一个决策人，前期可以讨论，后期必须有决策人来进行拍板，如果决策人摇摆不定，那么项目开发就很容易瞎折腾，做一些无用功。

6      木桶定律&新木桶定律
l  定律内容：

木桶原理又称短板理论，木桶短板管理理论，所谓“木桶理论”也即“木桶定律”，其核心内容为：一只木桶盛水的多少，并不取决于桶壁上最高的那块木块，而恰恰取决于桶壁上最短的那块。

反木桶原理就是说：木桶最长的一根木板决定了其特色与优势，在一个小范围内成为制高点；对组织而言，凭借其鲜明的特色，就能跳出大集团的游戏规则，独树一帜建立自己的王国。

新木桶定律：如果把木桶放置在一个斜面上的时候，木桶装水的多少就取决于最长的一块板子的长度。

l  理解与思考：

其实最新时代的互联网创业时代，短板理论已经不怎么使用了。因为现在的时代更是合作的时代，没必要把自己的团队搞成什么都精通的时代，各个领域相互合作，创造共赢才是最快速的，最经济的。

我们软件工程师现在都在追求全栈工程师，恨不得自己啥都精通。其实这是不可能的，稍微多一点知识体系就会很浪费精力。我们需要做的是精通几个主流的机制，其他的了解就行，还需要建立自己的知识体系地图和周边业界求助咨询通道，这样就可以在工作中通过周边的资源快速解决问题，快速学习。

7      破窗效应
l  定律介绍

破窗效应（Broken windows theory）：破窗效应是犯罪学的一个理论，该理论由詹姆士·威尔逊（James Q. Wilson）及乔治·凯林（George L. Kelling）提出，并刊于《The Atlantic Monthly》1982年3月版的一篇题为《Broken Windows》的文章。此理论认为环境中的不良现象如果被放任存在，会诱使人们仿效，甚至变本加厉。

以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。又或想像一条人行道有些许纸屑，如果无人清理，不久后就会有更多垃圾，最终人们会视若理所当然地将垃圾顺手丢弃在地上。因此破窗理论强调着力打击轻微罪行有助减少更严重罪案，应该以“零容忍”的态度面对罪案。

l  理解与思考

在软件开发中有一个惯性，如果某个模块的架构已经很乱了，后续开发人员会把这个架构做的更乱，如果某个系统的代码已经很乱了，后面维护的人员也会写入更乱的代码。

那么怎么解决这种现象，就是要持续优化和改进，代码和架构持续重构，这样才能让后续的开发人员知道不好的东西要及时修补，要及时更正和优化。

8      童子军规则
l  定律介绍

童子军有一条规则：“永远保持离开时的露营地比你发现它时更整洁”。如果你在地面上发现了脏东西，那么无论是否是你留下的，你都要将它清理干净。你有意地为下一组露营者改善环境。（实际上，由童子军之父罗伯特·斯蒂芬森·史密斯·贝登堡编写的原版规则是这样的：“尝试让这个世界在你离开时比你发现它时变得更美好。”）

l  理解与思考

那么对于程序员来说，有一个简单的规则可以遵循“总是保持提交时的代码比Check Out时更整洁”。 如果大家都遵循这一简单的规则，我们将看到那些软件系统恶化腐朽的终结。我们的系统将逐渐变得越来越好。这个和”破窗效应“是对立的。
