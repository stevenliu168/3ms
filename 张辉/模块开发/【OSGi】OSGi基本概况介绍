OSGI基本介绍
1      OSGi是什么？
OSGi是Open Services Gateway initiative的缩写，叫做开放服务网关协议。我们说到OSGi时，根据上下文不同，通常可能指OSGi联盟、OSGi标准或者OSGi框架。OSGi联盟成立于1999年，当时是为了建立一套将可管理的服务（Managed Service）通过网络交付到设备中的开放标准。可见，OSGi最开始面向的是从嵌入式和移动设备，这也不难理解OSGi名称的由来了。不过现在OSGi已经不作为开放服务网关协议的缩写了，OSGi联盟官方网站的介绍中，OSGi只是作为一种技术的名称，而不是一种缩写了。因为时至今日，OSGi已经逐渐扩展到了企业应用领域，在JAVA企业级开发中扮演越来越重要的角色。

OSGi联盟现在将OSGi定义为一种技术：

OSGi技术是指一系列用于定义Java动态化组件系统的标准。这些标准通过为大型分布式系统以及嵌入式系统提供一种模块化架构减少了软件的复杂度。

这一系列的标准由OSGi联盟维护，标准的实现通常则称为OSGi容器或者OSGi服务平台。下面我们就分别简单介绍OSGi标准、OSGi的特点、业务主流的OSGi实现与扩展和OSGi联盟。

2      OSGi标准
既然OSGi技术是指一系列标准，那么我们从对OSGi标准的了解开始。OSGi R1于2000年发布，现在最新的标准版本是R5，到现在为止应用最广泛的当属是2005年发布的R4。2003年Eclipse开始基于OSGi对Eclipse进行了重构，IBM的加入也影响了R4的制定，作为Eclipse内核的Equinox也成为OSGi标准的参考实现。OSGi各个版本的标准可以从osgi.org中下载。最新标准分为两个部分，OSGi Core和OSGi Enterpise。

OSGi Core顾名思义，就是OSGi的核心标准，正是这个标准定义了一种动态化模块化的应用架构，其中主要定义了OSGi框架。OSGi框架提供了一个通用安全可管理的Java框架，能够支持可扩展可下载的应用（即bundles）的部署。OSGi框架是OSGi技术最基础也是最核心的部分。OSGi框架分为以下几层，如下图所示：

l  安全层

l  模块层

l  生命周期层

l  服务层

http://assets.osgi.com.cn/article/7289226/overview.png

l  执行环境（Execution Environment）。由于 OSGi 所适用的目标范围非常广泛，为了

更好地处理不同硬件、软件环境对OSGi 造成的兼容性问题，在建立其他约定之前，

必须先定义好系统的执行环境。

l  安全层（Security Layer）。描述了基于 Java 2 安全架构实现的代码验证、JAR 文件数

字签名、数字证书服务，安全层贯穿了OSGi 框架的其他各个层次。

l  模块层（Module Layer）。模块层从“静态”的角度描述了一个模块的元数据信息、

执行环境定义、模块约束和解析过程、类加载顺序等内容。模块层是整个OSGi 中最

基础、最底层的层次。

l  生命周期层（Life Cycle Layer）。生命周期层从“动态”的角度描述了一个模块从安

装到被解析、启动、停止、更新、卸载的过程，以及在这些过程中的事件监听和上

下文支持环境。

l  服务层（Service Layer）。描述了如何定义、注册、导出、查找、监听和使用 OSGi

中的服务。服务层是所有OSGi 标准服务的基础。

除了OSGi 核心标准(core specification)中的服务，OSGi联盟也定义了一组非核心的(non-core)标准服务，称为compendium服务。Core服务在任何运行的OSGi框架内都是可用的，这要求所有的OSGi框架都要实现核心服务。而compendium服务则不然。这些服务以分离的bundle的形式出现，由框架实施者或者第三方实现并提供，能在任何框架上运行。

❑ 事件服务（Event Admin Service）

❑ 包管理服务（Package Admin Service）

❑ 日志服务（Log Service）

❑ 配置管理服务（Configuration Admin Service）

❑ HTTP 服务（HTTP Service）

❑ 用户管理服务（User Admin Service）

❑ 设备访问服务（Device Access Service）

❑ IO 连接器服务（IO Connector Service）

❑ 声明式服务（Declarative Services）

❑ 其他 OSGi 标准服务



OSGi中统一的编程模型可以帮助bundle开发者应对很多情况下的扩展的问题，这一点非常重要，因为框架需要运行在各种硬件设备上，设备的不同硬件特性可能影响服务实现的许多方面。统一的接口使得软件组件能够匹配和组合，同时保证稳定的运行。

OSGi框架中bundle 可以在运行时通过服务注册中心选择一个可用的实现，bundle 可以注册新服务、接收关于服务状态的通知或者查找服务区以适配当前的设备。这使得一个bundle在部署后仍然具有可扩展性，新的bundle可被安装，已存在的bundle可修改和更新，而无需重新启动系统。

OSGi Enterprise由OSGi联盟的EEG(Enterprise Expert Group ) 制定，主要通过裁剪或者扩展OSGi框架（即OSGi Core）来定义技术需求与标准，以满足企业环境下IT软件基础设施的用况。OSGi Enterprise主要包括组件模型、分布式服务、Web应用于HTTP Servlet、事件模型、管理与配置服务、名称与目录服务、数据访问、事务支持以及其它一些支持服务。OSGi Enterprise在这里不详细展开，后面我们将会有详细的介绍。

3      OSGi的特点
OSGi已经被用于构建很多非常复杂的系统，比如IDE（Eclipse），应用服务器（GlassFish, IBM Websphere, Oracle/BEA Weblogic, Jonas, JBoss），应用框架（Spring，Guice），工业自动化等等。是什么特点使得OSGi称为这些系统的选择呢？

不妨从几个角度来说一说OSGi的特点。从开发的角度来说，OSGi具有以下特点：
● 复杂性的降低：基于OSGi的组件模型bundle能够隐藏内部实现，bundle基于服务进行交互。
● 复用：很多第三方的组件可以以bundle的形式进行复用。
● 简单：核心的API总过包括不超过30个类和接口。
● 小巧：OSGi R4框架的实现仅需要300KB的JAR file就足够。在系统中引入OSGi几乎没有什么开销。
● 非侵入式：服务可以以POJO的形式实现，不需要关注特定的接口。

从部署和运行的角度来说，OSGi的特点就更多了，OSGi的动态化很大程度体现在系统的部署和运行时。这些特点包括：
● 切合真实运行环境：OSGi框架是动态的，bundle能够进行即时的更新，服务可以根据需要动态增加或者删除。比如一个服务可以是一个网络中的设备，如果一个设备被监测到，则服务可以动态注册；如果设备被移除，则服务能够动态注销。在这样的运行环境中编程将需要耗费大量的开销来处理动态性，但是OSGi帮助开发者处理了绝大多数动态性方面的工作。
● 易于部署：OSGi定义了组件是如何安装和管理的，标准化的管理API使得OSGi能够和现有和将来的各种系统有机的集成。
● 动态更新：这是OSGi被最经常提起的一个特性，即所谓的“热插拔”特性，bundle能够动态的安装、启动、停止、更新和卸载，而整个系统无需重启。
● 适配性：这主要得益于OSGi提供的服务机制、组件可以动态的注册、获取和监听服务，使得系统能够在OSGi环境调整自己的功能。
● 透明：提供了管理API来访问内部状态，因此通常无需去查看日志，能够通过命令行进行调试。
● 版本化：bundle可以版本化，多版本能够共存而不会影响系统功能，解决了JAR hell的问题。（这在开发时也提供了很大的帮助）
● 快速：这得益于OSGi的类加载机制，和JAR包的线性加载不同，bundle委托式的类加载机制，使得类的加载无需进行搜索，这又能有效的加快系统的启动速度。
● 懒加载：OSGi技术采用了很多懒加载机制。比如服务可以被注册，但是直到被使用时才创建。

此外OSGi还有一些其他的优势，比如：
● 安全：OSGi提供了一个安全层，基于Java的安全模型增加了可用性。
● 大公司的支持：OSGi联盟的成员里包含了很多业界有名的IT公司，比如Oracle, IBM, Samsung, Nokia, Progress, Motorola, NTT, Siemens, Hitachi, Deutsche Telekom, Redhat, Ericsson等。

4      OSGi的实现和扩展
OSGi框架最著名的三个实现包括Apache Felix, Equinox和Knopflerfish，这三个实现也是R4的认证实现。伴随OSGi框架的实现，通常会有相关的扩展，以进一步提供OSGi开发的工具或平台。

Apache Felix :

Felix项目包含了一个OSGi R4服务平台（Service Platform）标准的实现，以及大量相关的OSGi功能与技术的实现。Felix下的子项目有二十多个。除了核心框架的实现，也对主要的OSGi服务进行了实现，同时还提供了iPojo这样的OSGi编程模型（后面我们将会详细介绍）。Felix还提供了一个强大的Shell，名叫Gogo, 用以与OSGi的交互。还记得OSGi易于部署的特点吗？基于OSGi提供的管理API，你也可以实现一个于OSGi平台的交互控制台，甚至是图形化或者Web形式的交互方式。Gogo也被接下来要介绍的Virgo所采用。当然，Felix也提供了支持OSGi开发的SDK，同时还提供了一个bundle的中央仓库。

Apache还有另外一个项目Aries，这个项目里主要基于Felix，对OSGi企业标准进行了实现。

Equinox:

Equinox是Eclipse 社区开发的 OSGi 框架，也是 Eclipse 强大的插件体系的基础，是Eclipse著名的PDE开发环境的底层。在Equinox的基础上，Eclipse社区还有其它一些针对企业级开发的扩展项目。2008年开始Spring社区开始将Spring的编程模型引入到OSGi中，那时项目叫做Spring-OSGi，后来改名变成Spring DM，之后成为OSGi企业应用的标准，即Blueprint。可见，Gemini Blueprint是从Spring DM发展而来。使用Gemini Blueprint编写的代码更易于测试，同时与OSGi API是松耦合的。Gemini Web是OSGi Web Application Specification的一个参考实现，目的在于在OSGi环境下更好的支持Java EE中的Servlet模型。Virgo 项目EclipseRT项目的一部分，是一个完全模块化的Java运行时。Virgo自身就是设计为在Equinox之上的一个OSGi bundle集合。Virgo可以运行企业级Java应用以及基于Spring的应用。

值得一提的是，Spring社区的OSGi相关项目大多捐献给了Eclipse社区，这些项目也很大程度上影响了OSGi在企业级应用上的发展，从标准和工具支持上，都为OSGi走向企业级应用做出了很大的贡献。Spring Source现在也维护着最大也是最全面的一个bundle仓库，叫做Enterprise Bundle Respository，将绝大多数Java企业级开发的Package转换为了OSGi bundle。当你真正将OSGi应用到实际开发中时，你就能体会到这样一个仓库给我们带来了多大的方便。

Knopflerfish :

Knopflerfish也是一个大名鼎鼎的开源OSGi服务平台实现，由Markwave公司实现，目前最新的版本支持OSGi R4 V4.2。除了提供运行环境外，Knopflerfish也提供了一套Eclipse的SDK，帮助开发者开发OSGi应用。
