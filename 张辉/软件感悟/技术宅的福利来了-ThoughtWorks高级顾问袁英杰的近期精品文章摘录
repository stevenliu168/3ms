【技术宅的福利来了】ThoughtWorks高级顾问袁英杰的近期精品文章摘录

 

【顾问简介】

袁英杰：Thoughtworks高级顾问，对于软件设计，C++有独到的理解，英杰提出的正交四原则完美诠释了软件设计的本质，主导了mockcpp和testngcpp开源框架的编写，对于C++的单元测试领域做出了很大的贡献。

 

最近，云核心网和Thoughtworks的高级顾问袁英杰进行了技术合作，旨在提升软件设计能力和C++软件实现能力。

经过一个月的技术交流和结对编程，袁英杰对于软件设计，软件测试，面向对象编程领域，C++编程技巧分享了很多。现在对截止2016年7月14日所有的博客进行收录和点评，希望给大家对于工作中遇到的问题进行一些启发和指导。

 

下面的文章每一个都是精品，大家如果用心去品读，带着自己实际编码工作中遇到的问题去思考阅读，那么你一定会收获很多的。

1      第一颗子弹
链接：http://3ms.huawei.com/hi/blog/40602_2196581.html?h=h

简介：软件不软的一个主要原因，是其经常处于变化之中。所以，当策略分离不同的变化方向被提出后，一个随之而来的问题也就产生了：何时分离？

在被第一颗子弹击中时，能否做出正确的应对，除了辨别和解决问题所需的敏锐嗅觉之外，还需要勇气。当有人问我为何总是敢于在遗留系统上大刀阔斧时，答案很简单—— 胆大心细。

 

2      变化驱动：正交设计
链接：http://3ms.huawei.com/hi/blog/40602_2196735.html?h=h

简介：变化导致的修改有两类：

1.    一个变化导致多处修改（重复）；

2.    多个变化导致一处修改（多个变化方向）；

这就是正交设计前两个策略：消除重复；分离不同变化方向。

除此之外，我们要努力消除变化发生时不必要的修改，也有两种方式：

1.    不依赖不必要的依赖；

2.    不依赖不稳定的依赖；

这就是正交设计后两个策略：缩小依赖范围，向着稳定的方向依赖。

 

这篇文章就是来介绍如何运用正交四原则保证程序的高内聚低耦合。

 

3      简单设计
链接：http://3ms.huawei.com/hi/blog/40602_2196741.html?h=h

简介：Kent Beck给出的简单设计四个原则，通过对需求、易修改性、可理解性、复杂度，这四个在设计决策中最关键的因素给出了排序，让简单设计不再一个语义模糊的口号，而是对设计决策给出了清晰的guideline。

 

4      该怎样设计API
链接：http://3ms.huawei.com/hi/blog/40602_2197177.html?h=h

简介：在定义会影响到很多用户的api时（鉴于用户的广泛性，api哪怕只是更友好一点，综合起来都会节省大家大量的时间。另外，由于用户群的庞大，将来api变动也更困难）：

首先站在客户的角度思考，怎样才是客户真正的需要。此时完全不考虑技术实现的方式。

得到一个理想的API后，然后再去寻找一切可能的方式去实现API。

 

5      正交设计，面向对象与SOLID原则的关系
链接：http://3ms.huawei.com/hi/blog/40602_2197253.html?h=h 

简介：正交设计是一种与范式，语言无关的设计原则。为了解决在模块化的过程中，如何让软件在长期范围内更容易应对变化。

而面向对象是一种对模块化支持良好的范式。通过高内聚，低耦合原则，或正交策略的运用，面向对象范式下SOLID原则会自然浮现。

 

6      多态，OO与FP
链接：http://3ms.huawei.com/hi/blog/40602_2197263.html?h=h

简介：多态是用来应对变化，提高可重用性的重要手段。而不同多态，各自有各自的适用场景及问题。而如何取舍，则还是要用《简单设计原则》来作为标尺。

被某种具体范式的某个具体语言的某些具体特性在某些具体场景下漂亮应用所吸引，在不明觉历、或者并未明白设计的根本出发点的情况下，狂热的推崇一种范式，并转而攻击另外一种自己并不真正了解的范式，并不是一种可取的态度。

因此，作为解决实际问题的程序员，首先应该深刻去理解设计本身的挑战与目的。然后尽可能丰富自己的工具箱，让自己持有多种武器，以便与在解决具体问题时，可以找到更为合适的手段。而不是手里持有一把锤子，则到处都是钉子。

 

7      C++的模板
链接：

C++泛型与多态（1）：基础篇:      http://3ms.huawei.com/hi/blog/40602_2197267.html?h=h

C++泛型与多态（2）：模板特化:    http://3ms.huawei.com/hi/blog/40602_2197271.html?h=h

C++泛型与多态（3）：类模板特化:  http://3ms.huawei.com/hi/blog/40602_2197273.html?h=h

C++泛型与多态 （4）： Duck Typing:  http://3ms.huawei.com/hi/blog/40602_2197281.html?h=h

简介：

作者从简单到复杂，从表象到本质，详细地介绍了C++的模板的使用方法，从中可以看出，泛型是一种多态技术。而多态的核心目的是为了消除重复，隔离变化，提高系统的正交性。因而，泛型编程不仅不应该被看做奇技淫巧，而是任何一个追求高效的C++工程师都应该掌握的技术。

 

8      The Virtues Of Bastard：C++的私有继承
链接：http://3ms.huawei.com/hi/blog/40602_2197283.html?h=h

简介：C++的私有继承是一种非常有趣的关系。善用它，可以帮助我们在设计的便利性，信息隐藏，组合方面带来诸多好处。私有继承的美德可以让它成为软件设计一方之王。

 

9      类， 容器和封装
链接：

类和封装：http://3ms.huawei.com/hi/blog/40602_2197295.html?h=h

容器和封装：http://3ms.huawei.com/hi/blog/40602_2197307.html?h=h

简介：面向对象的主要目的是为了模块化。而封装作为OO的三大特征之一，其主要目的，是在模块化的过程中通过信息隐藏，封装变化，从而提高系统应对变化的能力。

第二篇文章描述了直接暴露容器所带来的问题，以及如何进行封装，以提高可维护性。关于封装。

 

10  小类，大对象
链接：

小类和大对象：http://3ms.huawei.com/hi/blog/40602_2197329.html?h=h

小类和大对象的C++实现：http://3ms.huawei.com/hi/blog/40602_2197333.html 

简介：类作为一种模块化手段，遵循高内聚，低耦合，让软件易于应对变化；让贫血模型和充血模型不再成为一个两难选择；

对象作为一种领域对象的的直接映射，解决了过多的类带来的可理解性问题，让领域可以指导设计，设计真正反映领域，而这才是领域驱动设计的真正目的和精髓。

第二篇文章描述了如何使用C++，在高性能计算领域，内存受限系统下，对于小类，大对象实现方式的主要方面。

 

11  其他文章：
l  设计模式中的单实例是否是邪恶的：讨论了如何正确看待和使用单实例这个模式。

http://3ms.huawei.com/hi/blog/40602_2197255.html?h=h

 

l  STRUCT vs. CLASS：讲述了C++中struct和class的区别和一些选择原则

http://3ms.huawei.com/hi/blog/40602_2197251.html?h=h

 

l  预防胜于治疗：MAKE POSSIBLE IMPOSSIBLE：通过几个不同的C++语言的例子，来说明预防胜于治疗思想对于提高系统健壮性的重要性。针对不同的语言，解决方案或许不同。

http://3ms.huawei.com/hi/blog/40602_2197195.html?h=h

 

l  Immutability: The Dark Side： FP语言中的对于不变性坚持的缺点和优点，在命令式语言中又是如何解决这个问题：

http://3ms.huawei.com/hi/blog/40602_2197185.html?h=h
