37.  插入迭代器之inserter

inserter(container,iterator)接受两个参数，第一个为要插入的容器，第二个为指向该容器的一个迭代器，返回一个迭代器，返回的迭代器所指的位置与第二个参数所指的位置一致，对返回的迭代器赋值，即是向容器插入一个值，插入的位置与容器的insert函数一致(即第二个参数所指元素的前一位置）。

 

对返回的迭代器赋值的形式

list<int> ilist={1,2,3};

auto iter = inserter(ilist,ilist.end());

*iter = 4;

iter = 5;

for (const auto &item : ilist)

    cout << item << " ";

// 1 2 3 4 5

常用第一种形式的赋值语句，其实两个赋值语句是等价的。对于插入迭代器 iter来说 ++iter，iter++，*iter都是等价于iter;

 

list<int> ilist={3,4,5};

auto iter =inserter(ilist,ilist.begin());

*iter=1;

*iter=2;

for (const auto &item : ilist)

    cout << item << " ";

//输出是 1 2 3 4 5还是2 1 3 4 5，这里的输出是1 2 3 4 5

对 *iter = 1的操作等价于：

iter=ilist.insert(iter,1);

++iter;

所以，开始的iter所指位置的元素是3(也就是ilist.begin()所指位置),经过*iter=1以后，iter所指位置的元素还是3，(有++iter的操作)，所以结果是1 2 3 4 5而不是2 1 3 4 5。

 

38.  STL标准模板库

STL包括容器和算法。容器即存放数据的地方(如array, vector)，分为序列式容器和关联式容器,序列式容器中的元素不一定有序，但都可被排序，如vector,list,queue,stack，heap, priority-queue。 关联式容器内部结构是一个平衡二叉树，每个元素都有一个键值和一个实值(如map,set,hashtable,hash_set)。算法有排序、复制等，以及各个容器特定算法。


每种容器类型都定义了自己的迭代器类型，定义了命名为begin和end的函数，用于返回迭代器。迭代器是容器的精髓，它提供了一种方法使得它能够按照顺序访问某个容器所含的各个元素，但无需暴露该容器的内部结构，它将容器和算法分开，让二者独立设计。

 

38.1  vector
vector与数组类似，拥有一段连续的内存空间。可以快速的访问随机的元素，快速的在末尾插入元素。因为内存空间是连续的，所以在进行插入和删除操作时，会造成内存块的拷贝，时间复杂度为o(n)。在序列中间随机的插入、删除元素慢。

vector能很好的支持随机存取，因此vector<int>::iterator支持“+”，“+=”，“<”等操作符。vector<int>::iterator和list<int>::iterator都重载了“++”运算符。

 

 1)  operator[]和at
由于at会做边界检查，如越界会抛出异常，应用可以try catch这个异常，应用还能继续运行,使用at时应使用try catch包裹住。

使用operator[]时一定要先检查一下是否越界。

 

 2)  vector扩容
vector是一个动态增长的数组，里面有一个指针指向一片连续的空间。调用push_back方法，当空间装不下的时候，一般会以原大小的两倍申请一片更大的空间，将原来的数据拷贝过去，并释放原来的旧空间。当删除的时候空间并不会被释放，只是清空了里面的数据。而array是静态空间，一旦配置就不能改变大小。vector、map等集合的clear并不释放内存，如果需要释放，可以和一个空的集合进行swap。

 

vector可以使用reserve预留空间避免反复增长/缩减大小重新分配内存以提高性能，size返回当前vector大小，capacity返回vector在分配新的存储空前之前能存储的元素总数

示例：容器的大小确定方法:

vector v;  // 未初始化， size()和capacity()为0

cout<<v.size()<<endl<<v.capacity()<<endl;

 

38.2         list
双向链表实现，因此内存空间可以是不连续。只能通过指针访问数据，list的随机存取非常没有效率，时间复杂度为o(n), 访问随机元素没有vector快; 但由于链表的特点，能高效地进行插入和删除, 随机地插入元素要比vector快。对每个元素分配空间，不存在空间不够，重新分配的情况。

 

list的内存空间可以是不连续，不支持随机访问，因此list<int>::iterator不支持“+”、“+=”、“<”等。

 

38.3  deque
deque(double-ended queue)双端队列容器是由一段一段的定量连续空间构成，小片间用链表相连，可以向两端发展，因此不论在尾部或头部安插元素都十分迅速(常数时间)。在中间部分或随机的插入、删除元素比较费时，因需移动其它元素。deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。

deque支持push_front、pop_front、push_back、pop_back

deque没有 capacity() 函数，而 vector 有

deque有 push_front() 和 pop_front()函数，而vector没有

deque没有data()函数，而vector有

deque相对于vector功能更强大，而性能相对较差。

 

1)  内存模型
deque模板中需要map，start，finish三个数据来管理整个内存空间。其一，map是指针数组，里面成员是分配空间Node的地址，明白如何动态分配二维数组，那么这个map就很容易理解；其二，迭代器，迭代器里面含有4个成员，连续空间开始地址(first)，结束地址(last)，空间中当前元素的地址(cur)及连续空间地址在map中的位置(node).



 

2)  创建deque容器
l  创建一个空 deque 容器： std::deque<int> d;  

l  创建一个具有10个元素（默认0）的deque容器

std::deque<int> d(10);  

l  创建一个包含10个元素（值为 5）的deque容器

std::deque<int> d(10, 5) //

l  拷贝创建一个新的 deque 容器:

std::deque<int> d1(5);std::deque<int> d2(d1);

l  拷贝其他类型容器中指定区域内的元素，创建一个新容器

//拷贝普通数组，创建deque容器

int a[] = { 1,2,3,4,5 };

std::deque<int>d(a, a + 5);

//适用于所有类型的容器

std::array<int, 5>arr{ 11,12,13,14,15 };

std::deque<int>d(arr.begin()+2, arr.end());//拷贝arr容器中的{13,14,15}

 

3)  deque的排序
#include <algorithm>

sort(deq.begin(), deq.end()); // 采用从小到大的排序

// 如果从大到小排序，可采用先排序后反转方式

// reverse(deq.begin(), deq.end());

// 也可自定义从大到小的比较器来改变排序方式

bool Comp(const int& a, const int& b) {

    return a > b;

}

sort(deq.begin(), deq.end(), Comp);

 

38.4     queue
queue的声明queue<int,deque<int> > s,是受限的队列，存储空间由第二个参数的容器确定，第一个参数在没有第二个参数的情况下，决定存储空间类型，第二个参数存在的情况下，第一个类型参数无效,默认deque。因此,queue<int> s1这样声明的队列存储空间就是默认的。另外，queue第二个参数可以选择的容器类型也包括list，其余的如果声明，操作受限。对于任何需要用 FIFO 准则处理的序列来说，使用 queue 容器适配器都是好的选择。

 

queue 容器及其一些基本操作

http://c.biancheng.net/uploads/allimg/180913/2-1P913113140553.jpg

 

Container需满足顺序容器的条件，且必须支持front、back、push_back、pop_front、empty() 和 size()操作，标准容器中有deque和list满足。也就是说标准容器中deque和list可以封装成queue。

std::queue<std::string, std::list<std::string>>words;

 

38.5   priority_queue
优先队列具有队列的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它本质是一个堆实现。与queue不同在于可以自定义其中数据的优先级, 让优先级高的排在队列前,优先出队。

 

priority_queue<Type, Container, Functional>

Container必须用数组实现的容器，如vector,deque等，不能用list，STL里默认用vector， 而dequeue功能虽更强大，但性能相对于vector较差，考虑到包装在优先队列后，dequeue功能并不能很好发挥，所以一般选择vector容器。Functional是比较的方式(默认是less)，当需用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，默认是大顶堆。

 

示例：

priority_queue<int> a; //大顶堆,等同priority_queue<int, vector<int>, less<int> > a;

priority_queue<int, vector<int>, greater<int> > c;  //小顶堆

priority_queue<string> b;

 

自定义类型
#include <iostream>

#include <queue>

using namespace std;

 

//方法1

struct tmp1  { //运算符重载 <

    int x;

    tmp1(int a) {x = a;}

    bool operator<(const tmp1& a) const  {

        return x < a.x; //大顶堆

    }

};

//方法2

struct tmp2 {

    bool operator() (tmp1 a, tmp1 b)  {

        return a.x < b.x; //大顶堆

    }

};

 

int main()  {

    tmp1 a(1);

    tmp1 b(2);

    tmp1 c(3);

    priority_queue<tmp1> d;

    d.push(b);

    d.push(c);

    d.push(a);

    while (!d.empty()) {

        cout << d.top().x << '\n';

        d.pop();

    }

    cout << endl;

    priority_queue<tmp1, vector<tmp1>, tmp2> f;

    f.push(c);

    f.push(b);

    f.push(a);

    while (!f.empty()) {

        cout << f.top().x << '\n';

        f.pop();

    }

}

 

38.6     stack
stack<T>容器适配器中的数据是以LIFO方式组织，是先进后出栈。只能访问stack顶部的元素，在移除顶部元素后，才能访问下方的元素。stack的默认存储空间也是deque，其他的声明和queue差不多，可以使用的容器类型包括deque、vector、list。

stack<typename T, typename Container=deque<T>>

std::stack<std::string,std::list<std::string>> fruit;

 

创建堆栈时，不能在初始化列表中用对象来初始化，但可用另一个容器来初始化，只要堆栈的底层容器类型和这个容器的类型相同。例如：

std::list<double> values {1.414, 3.14159265, 2.71828};

std::stack<double,std::list<double>> my_stack (values);

stack<T> 模板定义了拷贝构造函数，因而可复制现有的stack容器：

std::stack<double,std::list<double>>copy_stack {my_stack}

 

stack容器应用

譬如：编辑器中的 undo机制就是用堆栈来记录连续的变化。撤销操作可以取消最后一个操作，这也是发生在堆栈顶部的操作。编译器使用堆栈来解析算术表达式，当然也可以用堆栈来记录 C++ 代码的函数调用。

…. …

 

38.7     map,set
提供键值对的数据管理，内部实现了一个红黑树，元素有序，红黑树的每一个节点都代表着map的一个元素。因此，对于map进行的查找，删除，添加等一系列的操作都相当于是对红黑树进行的操作(O(logN)时间复杂度,效率高）。map中的元素是按二叉搜索树存储，使用中序遍历可将键值按照从小到大遍历出来。但空间占用率高。

1)  unordered_map
和map类似，存储key-value对，支持通过key快速索引到value，不同的是unordered_map不根据key进行排序，内部无序。底层是一个防冗余的哈希表，存储时根据key的hash值判断元素是否相同，查找的时间复杂度可达到O(1)。对于查找问题，unordered_map会更加高效一些，遇到查找问题常会考虑一下用unordered_map。哈希表的建立会相对比较耗费时间。

 

2)  map和set
map为一对一映射，key不重复。set内部元素唯一，遍历时已排序，查找也较快。map和set的底层实现主要通过红黑树来实现，红黑树是一种特殊的二叉查找树(二叉排序树和非严格意义上的二叉平衡树)。

1）每个节点或是黑色，或是红色，根节点是黑色;

2）每个叶子节点(NIL)是黑色。 [注：这里叶子节点是指为空(NIL或NULL)的叶子节点]

3）如果一个节点是红色的，则它的子节点必须是黑色的;

4）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。

特性3)4)决定了没有一条路径会比其他路径长出2倍，因此红黑树是接近平衡的二叉树。

 

38.8     遍历删除
在遍历vector,list,map时进行删除，调用erase方法删除元素，会返回下一个元素的迭代器。

for(vector<int>::iterator it=d.begin();it!=d.end();) {

   if(*it==3)  {

      it=d.erase(it);

   } else {

      it++;

   }

}

 

38.9     对比与选择
    
 

array 数组

vector 向量

list 列表

multiset

插入随机整数100万个

空间预分配

效率最高，70ms

push_back不确定空间,100万个整数耗时250ms左右

性能好于List

push_back不确定空间,需设置前后指针，元素分配,930ms左右

不确定空间，需排序

效率最低,6500ms

插入BigInt

 

插入100万耗时4150ms; 在预留容量前提下，性能提高>50%，耗时1600ms左右

不在连续的内存块中放置元素，不必面对容量问题及相关性能开销问题，比向量容器性能好,插入100万耗时2250ms左右

效率最低

插入BigInt指针

 

与插入100万个整数差别不大,260ms

 

效率最低

中间或前端插入

 

性能极为糟糕,从前端插入1万个整数耗时800ms左右

效率不变, 从前端插入1万个整数耗时10ms左右

 

 

 

 

 

 

删除

 

尾部插入/删除优秀；与集合大小无关、时间固定的操作；除尾部操作之外为极坏选择

 

 

删除-尾端

 

效率高，删除100万个整型，耗时60ms，性能胜于列表

效率低，删除100万，耗时750ms

 

删除-前端

 

删除100万(整型)耗时700ms，与删除位置到向量的最后一个元素间距离成比例

删除100万（整型），耗时7ms 左右

 

 

 

 

 

 

遍历

10000元素，100次遍历

两者相同，耗时110ms左右

决定因素：内存布局与系统缓存交互

逻辑相邻，内存中不一定相邻；列表元素比向量元素大。因此，遍历列表容器所产生的缓存失败要远超遍历数组和向量,耗时2600ms

 

查找100万个元素，100次迭代

40ms左右

40ms左右

800ms左右

效率最高0.06ms,以插入和删除操作的性能损失为基础

容器选择基本原则

l  如果需要高效的随机存取，而不在乎插入和删除的效率，使用vector;

l  如需要大量的插入和删除，而不关心随机存取，则应使用list



 

39.  异常、表达式


启用异常，代码上就会有膨胀(约5-15%);

异常路径上的性能损失较大，比错误码大得多(异常发生率应当小于 1%);

异常可能导致错误发生点和错误处理变得不明显；

需避免异常的问题: 如硬实时系统(时间开销)或某些嵌入式系统(空间开销)

 

39.1 不使用异常的后果
l  不能在构造函数中表示出错

规避方法：使用可永远成功的默认构造，然后再调用返回出错码的init方法

l  不能重载可能出错的运算符

规避方法：换用返回出错码的函数，用出参来返回对象

l  不能使用标准库(接口大部分按使用异常的方式设计的)

规避方法 1：假装内存分配永远成功；一旦失败就崩溃呗

在有虚拟内存的计算机上内存分配操作几乎永不失败

规避方法 2：不使用标准库，换用自己的定制库

 

39.2     异常安全性保证
l  不抛异常保证：操作一定成功

通常标为 noexcept，尤其是移动构造函数和 swap 函数

l  强异常安全保证：要么成功，要么都不变

关键操作通常提供这级保证，如标准库的 vector::push_bac

l  基本异常安全保证：保证数据处于正常状态，没有资源泄漏

标准库至少提供这一级的异常安全保证，如map里一次插入多项数据

l  无异常安全保证：啥都不保证

异常不安全的代码……

 

39.3 声明为noexcept
声明为noexcept的函数表示不会抛出异常或抛出的异常不会被截获并处理。默认构造函数、析构函数、swap 函数，move操作符都不应该抛出异常。

 

1)       如果函数不会抛出异常，声明为noexcept可让编译器大程度的优化函数，如减少执行路径，提高错误退出 的效率。建议系统关键路径可以声明为 noexcept

extern "C" double sqrt(double) noexcept;  // 永远不会抛出异

2)       vector等STL容器，为保证接口健壮性，如果保存元素的move运算符未声明为noexcept，则在容器扩张搬移元素时不会使用move机制，而使用copy机制，带来性能损失风险

// std::vector 的 move 操作需要声明 noexcept

class Foo1 {

public:    

Foo1(Foo1&& other);  // no noexcept ？ move constructor | copy constructor

};

std::vector<Foo1> a1;

a1.push_back(Foo1());

a1.push_back(Foo1());  // 触发容器扩张，搬移已有元素时调用copy constructor

 

39.4 throw 表达式参考
a) class exceptionType { }; 
     throw exceptionType();
b) enum mathErr { overflow, underflow, zeroDivide }; 
    throw zeroDivide; 

 

40.  模板，全特化，偏特化

模板使能快速建立具有类型安全的类库集合和函数集合，实现类型不同但行为相同的代码复用，它的实现方便了大规模的软件开发。

1) 可用来创建动态增长和减小的数据结构

2）类型无关，因此具有很高的可复用性

3）在编译时而不是运行时检查数据类型，保证了类型安全

4）平台无关的，具有可移植性

5）可用于基本数据类型

 

40.1 函数、类模版
模版可分两类：函数模版，类模版。函数模板可被重载，而类模板不能被重载，也就是说允许存在两个同名的函数模板，还可以对它们进行实例化，使它们具有相同的参数类型。函数模板的实例化是由编译程序在处理函数调用时自动完成的，而类模板的实例化必须由程序员在程序中显式地指定。

 

40.2 模板特化
对单一模板提供的一个特殊实例，使每种类型都具有相同的功能，将一个或多个模板参数绑定到特定的类型或值上。特化分为了两种，全特化和偏特化。

 

不能将特化和重载混为一谈，全特化和偏特化都没有引入一个全新的模板或者模板实例。它们只是对原来的泛型（或者非特化）模板中已经隐式声明的实例提供另一种定义。在概念上，这是一个相对比较重要的现象，也是特化区别于重载模板的关键之处。类模板不可被重载，可以通过特化来实现相似的效果，从而可透明地获得具有更高效率的代码。

 

1)      全特化
全特化是模板的一个唯一特例，指定的模板实参列表必须和相应的模板参数列表一一对应。不能用一个非类型值来替换模板类型参数。但如果模板参数具有缺省模板实参，那么用来替换实参就是可选的。

函数模板全特化：必须为原函数模板的每个模板参数都提供实参，且使用关键字template后跟一个空尖括号对<>,表明将原模板的所有模板参数提供实参。

template <typename T>

void fun(T a) {

 cout<< "The main template fun():" << a << endl;

}  

template <>   //对int型特例化

void fun(int a) {

 cout<< "Specialized template for int type:"<< a << endl;

}

int main(){  

  fun<char>('a');

  fun<int>(10);

  fun<float>(9.15);

   return 0;

}

对于除int型外的其他数据类型，都会调用通用版本的函数模板fun(T a)；对于int型，则会调用特例化版本的fun(int a)。一个特例化版本的本质是一个实例，而非函数的重载。因此，特例化不影响函数匹配。

 

2)      偏特化
感觉像是介于普通模板和全特化之间，只存在部分的类型明确化，而非将模板唯一化。函数模板不能被偏特化。

类模板的偏特化：

template <typename T>

class Test{

   public:

     void print(){

       cout << "General template object" << endl;

     }

};

template<>   //对int型特例化

class Test<int>{

public:

    void print() {

      cout << "Specialized template object" << endl;

    }

};

与函数模板不同，类模板的特例化不必为所有模板参数提供实参。可以只指定一部分而非所有模板参数，这叫做类模板的偏特化或部分特例化(partial specialization)。例如，C++标准库中的类vector的定义：

template <typename T, typename Allocator>

class vector {

     /*......*/

};

// 部分特例化

template <typename Allocator>

class vector<bool, Allocator> {

     /*......*/

};

上例中一个参数被绑定到bool类型，而另一个参数仍未绑定，需由用户指定。注意，一个类模板的部分特例化版本仍然是一个模板，因为使用它时用户还必须为那些在特例化版本中未指定的模板参数提供实参。

 

小结：

l  类模板和函数模板都可以被全特化；

l  类模板能偏特化，不能被重载；函数模板能被重载，不能被偏特化。

 

40.3 模板类调用优先级
对主版本模板类、全特化类、偏特化类的调用优先级从高到低进行排序：

全特化类 > 偏特化类 > 主版本模板类

 

40.4     template meta
模板元编程是屠龙之技，可利用编译器对于template的解释是静态的这一特性，让编译器在编译时做计算，可有效提高程序的执行效率。假如只从实际工程出发，没有太大必要研究模板元编程。在此写这个主题，是让大家感受一下模板居然可以做这种事情。

 

假如将模板当成一门全新编程语言，最少应该具有以下特性

l  需要有基本的数据类型，比如数字、字符串、布尔值等

l  需要某种方法，将基础类型组合起来，表达更高级的概念。如C语言中的 struct, 就是一种组合方法。数组和字典也是组合方法。

l  需要流程控制，典型的有顺序、分支、循环。

 

模板元编程的基本原则：将负载由运行时转移到编译时，同时保持原有抽象层次。负载分为两类，一类是程序运行本身的开销，一类则是需要编写的代码，前者可理解为编译时优化，后者则是为提高代码复用度，从而提高编程效率。

 

40.5 模板的一些特点
·     模板包括函数模板和类模板，模板参数形式有：类型、模板型、非类型(整型、指针)；

·     模板的特例化分完全特例化和部分特例化，实例将匹配参数集合最小的特例；

·     用实例参数替换模板形式参数称为实例化，实例化的结果是产生具体类型(类模板)或函数(函数模板)，同一模板实参完全等价将产生等价的实例类型或函数；

·     模板一般在头文件中定义，可能被包含多次，编译和链接时会消除等价模板实例；

·     template、typename、this 关键字用来消除歧义，避免编译错误或产生不符预期的结果；

·     C++11 对模板引入了新特性：“>>”、函数模板也可以有默认参数、变长模板参数、外部模板实例(extern)，并弃用 export template；

·     C++ 模板是图灵完备的，模板编程是函数编程风格，特点是：没有可变的存储、递归，以“<>”为输入，typedef 或静态常量为输出；

·     编译期数值计算虽然实际意义不大，但可很好证明 C++ 模板的能力，可以用模板实现类似普通程序中的 if 和 while 语句；

·     一个实际应用是循环展开，虽然编译器可以自动循环展开，但可以让这一切更可控；

·     表达式模板和向量计算是另一个可加速程序的例子，它们将计算表达式编码到类型，这是通过模板嵌套参数实现的；

·     特性，策略，标签是模板编程常用技巧，可以使模板变得更加通用；

·     模板甚至可以获得类型的内部信息(是否有某个typedef)，这是反射中的内省，C++在语言层面对反射支持很少(typeid)，这不利于模板元编程；

·     可以用递归实现伪变长参数模板，C++11 变长参数模板背后的原理也是模板递归；

·     元容器存储元信息(如类型)、类型过滤过滤某些类型，它们是元编程的高级特性。

 

模板编程的缺点：

1. 比较晦涩难懂。在复杂的地方使用让人更不容易读懂，且debug和维护都很麻烦。

2. 经常会导致编译出错的信息不友好: 在代码出错的时候, 即使这个接口非常的简单, 模板内部复杂的实现细节也会在出错信息显示. 导致这个编译出错信息看起来非常难以理解。

3. 模板如果使用不当，会导致运行时代码过度膨胀(源代码膨胀、二进制对象文件膨胀)。改进的方法是增加一些检查代码，让编译器及时报错, 使用特性、策略等让模板更通用，可能的话合并一些模板实例(如将代码提出去做成单独模板)

4. 模板代码难以修改和重构。模板的代码会在很多上下文里面扩展开来, 所以很难确认重构对所有的这些展开的代码有用。

 

建议模板编程用在少量的基础组件，基础数据结构上。并且使用模板编程时尽可能把复杂度最小化，尽量不要让模板对外暴露。在实现里面使用模板, 给用户暴露的接口并不使用模板, 这样能提高接口的可读性。并且应该在这些使用模板的代码上写尽可能详细的注释。





 

附：相关博文分享

SOLID原则精解之开放封闭原则 OCP

http://3ms.huawei.com/km/blogs/details/8392135?l=zh-cn

SOLID原则精解之接口隔离原则 ISP

http://3ms.huawei.com/km/blogs/details/8472817?l=zh-cn

【软件系统设计之专题一】 - 可信构架之道

http://3ms.huawei.com/km/blogs/details/8777275?l=zh-cn

【软件系统设计之专题二】 - 高并发之并行模式

http://3ms.huawei.com/km/blogs/details/8847021?l=zh-cn

【软件系统设计之专题四】 - 调度策略及算法

http://3ms.huawei.com/km/blogs/details/9088879?l=zh-cn

【软件系统设计之专题五】 - 重构设计中的常见问题

http://3ms.huawei.com/km/blogs/details/10218413

C++ 软件开发必备知识整编（1）

http://3ms.huawei.com/km/blogs/details/10169787?l=zh-cn
