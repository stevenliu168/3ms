http://3ms.huawei.com/km/blogs/details/1447023

1.代码要遵守单一职责的模式，数据处理和业务逻辑要尽量分开。

2.对于网络，数据，文件读写的操作一定要和业务逻辑分离开，除非你的逻辑就是以上三种。

3.原始数据尽量封装成业务对象，传到业务逻辑里。也就是业务逻辑尽量不要依赖原始数据。比如说一段json,你的业务逻辑如果一个参数直接是json串的话，那么你在方法内部就难免要处理json数据，对吧。这样的话，你的业务逻辑其实就包括了数据处理和业务处理。

4.如果你发现你的一个private方法需要测试，而且很那从public方法的层面对它进行测试，那么多半这个private方法应该属于一个新的，或者其他的类的public方法

5.对象的生成和使用要尽量分开，方便对象的替换，跟依赖注入比较像。对象的生成和使用都在一个逻辑里，此对象和所在逻辑的对象之间的关系属于聚合关系，正常来讲这个对象或其方法很难被mock，因此，需要替代的资源无法替换，这也是单元测试所带来的难度。一旦在一个模块中创建了另一个模块中的具体对象，依赖就产生了。

上次写升级代码的时候，虽然考虑了数据和业务分离，但是还是有一部分数据处理和业务纠结到一起了。

还有业务处理类还是太厚了，异常处理也比较乱，以后得注意。
