http://3ms.huawei.com/km/blogs/details/5213605

Linux性能问题定位工具上篇：整体的性能统计与监控
日期：2017-11-09 08:34浏览：3695评论：17
前言
前端时间在进行Linux下应用程序性能规格基线处理和关键性能调优等事情，也正好看到了这篇文章（Linux Performance），所以把我在工作中用到的工具和这个进行结合，总结分享一下。

在Linux下面我们经常需要进行宏观上与微观上的性能监控与调优，这里面需要很多是可以借助大量的工具来辅助我们进行性能的监控，统计与分析的，下面这个图是整个Linux下性能工具的概况：
image.png

我将分为上中下三篇文章来分别介绍：

宏观上的性能统计：主要是整个机器的CPU/内存/IO/网络的性能监控与统计，以及基于进程粒度的性能监控与统计。
微观上的性能统计与调优：主要是深入到进程内部，查看性能瓶颈
查看静态配置的工具以及一些开源的工具介绍
下面我们主要来分析一下Linux下常用的性能观察工具

整体性能观察
操作系统的负载情况
系统平均负载被定义为在特定时间间隔内运行队列中的平均进程数。如果一个进程满足以下条件则其就会位于运行队列中：

它没有在等待I/O操作的结果
它没有主动进入等待状态(也就是没有调用'wait')
没有被停止(例如：等待终止)
一般来说，每个CPU内核当前活动进程数不大于3，则系统运行表现良好！
uptime
我们可以通过uptime命令来查看

huawei-ivs:~ # uptime
 15:12pm  up 3 days 23:57,  5 users,  load average: 5.88, 7.49, 6.90
当前时间 下午15:12
系统已运行的时间 3 days, 23:57
当前在线用户 5 user
平均负载：5.88, 7.49, 6.90，最近1分钟、5分钟、15分钟系统的负载
当前机器有12个CPU逻辑核，所以负载还没有那么严重。

cat /proc/loadavg
直接查看系统平均负载命令

huawei-ivs:~ # cat /proc/loadavg
12.16 8.90 7.51 2/2280 6680
除了前3个数字表示平均进程数量外，后面的1个分数，分母表示系统进程总数，分子表示正在运行的进程数；最后一个数字表示最近运行的进程ID。

虚拟内存的实时监控：vmstat命令
vmstat命令用来获得UNIX系统有关进程、虚存、页面交换空间及CPU活动的信息。这些信息反映了系统的负载情况。

huawei-ivs:~ # vmstat 
procs -----------memory---------- ---swap-- -----io---- -system-- -----cpu------
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0  68280 7809364   2260 910052   0    0    70  3898   10    3  5  5 88  2  0
有关进程的信息有：(procs)
r: 在就绪状态等待的进程数。
b: 在等待状态等待的进程数。
有关内存的信息有：(memory)
swpd: 正在使用的swap大小，单位为KB。
free: 空闲的内存空间。
buff: 已使用的buff大小，对块设备的读写进行缓冲。
cache: 已使用的cache大小，文件系统的cache。
有关页面交换空间的信息有：(swap)
si: 交换内存使用，由磁盘调入内存。
so: 交换内存使用，由内存调入磁盘。
有关IO块设备的信息有：(io)
bi: 从块设备读入的数据总量(读磁盘) (KB/s)
bo: 写入到块设备的数据总理(写磁盘) (KB/s)
有关故障的信息有：(system)
in: 在指定时间内的每秒中断次数。
sy: 在指定时间内每秒系统调用次数。
cs: 在指定时间内每秒上下文切换的次数。
有关CPU的信息有：(cpu)
us: 在指定时间间隔内CPU在用户态的利用率。
sy: 在指定时间间隔内CPU在核心态的利用率。
id: 在指定时间间隔内CPU空闲时间比。
wa: 在指定时间间隔内CPU因为等待I/O而空闲的时间比。
vmstat 可以用来确定一个系统的工作是受限于CPU还是受限于内存：如果CPU的sy和us值相加的百分比接近100%，或者运行队列(r)中等待的进程数总是不等于0，且经常大于4，同时id也经常小于40，则该系统受限于CPU；如果bi、bo的值总是不等于0，则该系统受限于内存。

查看当前系统内存使用状况：free命令
huawei-ivs:~ # free -k
          total         used          free     shared    buffers     cached
Mem:       1031320     671776     359544          0      88796     352564
-/+ buffers/cache:      230416     800904
Swap:        204792              0     204792
第一行Mem的解释， 从操作系统的角度来看待输出数据的
total：内存总数；
used：已经使用的内存数；
free：空闲的内存数；
shared：当前已经废弃不用；
buffers Buffer：缓存内存数；
cached Page：缓存内存数。
关系：total = used + free

第二行(-/+ buffers/cache)解释， 从应用程序的角度来看输出数据的
(-buffers/cache) used内存数：第一部分Mem行中的 used – buffers – cached
(+buffers/cache) free内存数: 第一部分Mem行中的 free + buffers + cached
可见-buffers/cache反映的是被程序实实在在吃掉的内存，而+buffers/cache反映的是可以挪用的内存总数。

第三行就是指交换分区了

Mem从操作系统的角度来看待输出数据的，used(671776)表示内核(Kernel)+Applications+buffers+cached。free(359544)表示系统还有多少内存可供使用。

下面一行从应用程序的角度来看输出数据的。其free = 操作系统used + buffers + cached：800904 = 359544 + 88796 + 352564
统计CPU
top命令
top - 15:35:44 up 4 days, 20 min,  5 users,  load average: 10.48, 14.47, 10.35
Tasks: 530 total,   2 running, 528 sleeping,   0 stopped,   0 zombie
Cpu(s):  4.8%us,  3.8%sy,  0.0%ni, 91.1%id,  0.4%wa,  0.0%hi,  0.0%si,  0.0%st
Mem:     14912M total,     9957M used,     4955M free,       16M buffers
Swap:     4101M total,       66M used,     4035M free,     3570M cached

  PID USER      PR  NI  VIRT  RES  SHR S   %CPU %MEM    TIME+  COMMAND
 8199 root      20   0  333m 119m  10m R     18  0.8   0:05.90 proc1
25959 root      20   0  4444 1040  760 S     16  0.0   2:16.66 proc2
 3989 root      20   0 3219m 2.5g 9272 S     14 17.3 221:37.51 proc3
14508 root      20   0 2480m 185m  23m S      9  1.2  34:42.52 proc4
我们来分析一下top的输出，第一行其实就是uptime的输出，表示整个系统的平均负载。
我们主要看一下Cpu那一行：

us：用户态使用的cpu时间比
sy：系统态使用的cpu时间比
ni：用做nice加权的进程分配的用户态cpu时间比
id：空闲的cpu时间比
wa：cpu等待磁盘写入完成时间
hi：硬中断消耗时间
si：软中断消耗时间
st：虚拟机偷取时间
那么上面这些百分比是如何算出来的呢？
image.png

假设有上面这么一个程序，将文件从磁盘的src位置拷贝到磁盘的dst位置。文件会从src先读取进入到内核空间，然后再读取到用户空间，然后拷贝数据到用户空间的buf上，再通过用户空间，内核空间，数据才到磁盘的dst上。

cpu消耗在kernel space的时候就是sy（系统态使用的cpu百分比）。
cpu消耗在user space的时候就是us（用户态使用的cpu百分比）。
如果触发硬中断，cpu在执行程序的时候，突然外设硬件（比如硬盘出现问题了）机器需要立刻通知cpu进行现场保存工作。这个时候会cpu会出现上下文切换。就是cpu会有一部分时间会被硬中断占用了，这个时间就是hi。相类似，si是软中断的cpu占用时间，软中断是由软件的指令方式触发的。
ni就是nice，就是改变过优先级的进程的占用CPU的百分比。
wa指的是CPU等待磁盘写入完成的时间，就是说前提是要进行IO操作，在进行IO操作的时候，CPU等待时间。比如上面那个程序，最后一步，从系统空间到dst硬盘空间的时候，如果程序是阻塞的，那么这个时候cpu就要等待数据写入磁盘才能完成写操作了。所以这个时候cpu等待的时间就是wa。
st是针对对虚拟机来说的，一台物理是可以虚拟化出几台虚拟机的。在其中一台虚拟机上用top查看发现st不为0，就说明本来有这么多个cpu时间是安排给我这个虚拟机的，但是由于某种虚拟技术，把这个cpu时间分配给了其他的虚拟机了。这就叫做偷取。
id表示的是CPU的空闲时间
mpstat
mpstat是Multiprocessor Statistics的缩写，是实时系统监控工具。其报告与CPU的一些统计信息，这些信息存放在/proc/stat文件中。在多CPUs系统里，其不但能查看所有CPU的平均状况信息，而且能够查看特定CPU的信息。mpstat最大的特点是：可以查看多核心cpu中每个计算核心的统计数据；

huawei-ivs:~ # mpstat  -A
huawei-ivs:~ # mpstat -A     
Linux 3.0.101-0.47.90.1.11835.0.PTF-default (huawei-ivs)     11/07/2017     _x86_64_

05:00:31 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle
05:00:31 PM  all    5.01    0.00    3.44    2.30    0.00    1.08    0.00    0.00   88.17
05:00:31 PM    0    6.43    0.01    6.07    5.49    0.00    0.24    0.00    0.00   81.76
05:00:31 PM    1    6.22    0.00    4.49    4.53    0.00    3.19    0.00    0.00   81.57
05:00:31 PM    2    6.04    0.00    3.26    0.64    0.00    3.25    0.00    0.00   86.81
05:00:31 PM    3    5.63    0.00    3.77    0.69    0.00    2.96    0.00    0.00   86.94
05:00:31 PM    4    5.30    0.00    2.48    0.56    0.00    3.12    0.00    0.00   88.53
05:00:31 PM    5    4.81    0.00    2.62    0.72    0.00    0.01    0.00    0.00   91.84
05:00:31 PM    6    6.01    0.00    5.44    6.18    0.00    0.15    0.00    0.00   82.22
05:00:31 PM    7    4.92    0.00    4.26    5.96    0.00    0.05    0.00    0.00   84.81
05:00:31 PM    8    3.79    0.00    2.31    0.76    0.00    0.01    0.00    0.00   93.13
05:00:31 PM    9    3.75    0.00    2.70    0.78    0.00    0.01    0.00    0.00   92.76
05:00:31 PM   10    3.42    0.00    1.76    0.68    0.00    0.01    0.00    0.00   94.13
05:00:31 PM   11    3.76    0.00    2.06    0.66    0.00    0.01    0.00    0.00   93.51

05:00:31 PM  CPU    intr/s
05:00:31 PM  all  55607.04
05:00:31 PM    0    161.10
05:00:31 PM    1   3761.52
05:00:31 PM    2   3774.12
05:00:31 PM    3   3673.98
05:00:31 PM    4   3815.46
05:00:31 PM    5      0.00
05:00:31 PM    6      0.00
05:00:31 PM    7      0.00
05:00:31 PM    8      0.00
05:00:31 PM    9      0.00
05:00:31 PM   10      0.00
05:00:31 PM   11      0.00
%user 在internal时间段里，用户态的CPU时间(%)，不包含nice值为负进程 (usr/total)*100
%nice 在internal时间段里，nice值为负进程的CPU时间(%) (nice/total)*100
%sys 在internal时间段里，内核时间(%) (system/total)*100
%iowait 在internal时间段里，硬盘IO等待时间(%) (iowait/total)*100
%irq 在internal时间段里，硬中断时间(%) (irq/total)*100
%soft 在internal时间段里，软中断时间(%) (softirq/total)*100
%idle 在internal时间段里，CPU除去等待磁盘IO操作外的因为任何原因而空闲的时间闲置时间(%) (idle/total)*100
%intr/s 在internal时间段里，每秒CPU接收的中断的次数intr/total)*100
%guest 显示了运行vCPU时所消耗的cpu时间百分比.
%steal 显示虚拟机管理器在服务另一个虚拟处理器时虚拟CPU处在非自愿等待下花费时间的百分比.
CPU总的工作时间：

total_cur = user + system + nice + idle + iowait + irq + softirq
total_pre = pre_user + pre_system + pre_nice + pre_idle + pre_iowait + pre_irq + pre_softirq
user = user_cur – user_pre
total = total_cur - total_pre
pidstat命令
pidstat主要用于监控全部或指定进程占用系统资源的情况，如CPU，内存、设备IO、任务切换、线程等。pidstat首次运行时显示自系统启动开始的各项统计信息，之后运行pidstat将显示自上次运行该命令以后的统计信息。用户可以通过指定统计的次数和时间来获得所需的统计信息。

huawei-ivs:~ # pidstat -u
Linux 3.0.101-0.47.90.1.11835.0.PTF-default (huawei-ivs)     11/07/2017     _x86_64_

05:22:05 PM       PID    %usr %system  %guest    %CPU   CPU  Command
05:22:05 PM         1    0.00    0.00    0.00    0.00     3  init
05:22:05 PM         2    0.00    0.00    0.00    0.00     7  kthreadd
05:22:05 PM         3    0.00    0.03    0.00    0.03     0  ksoftirqd/0
05:22:05 PM         6    0.00    0.00    0.00    0.00     0  migration/0
这里CPU的信息和前面是一样的。

ps命令
ps命令可以查看某个进程的CPU，内存利用率以及基本内存情况

huawei-ivs:~ # ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0  10560   684 ?        Ss   Nov03   0:04 init [3]  
root         2  0.0  0.0      0     0 ?        S    Nov03   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        S    Nov03   2:04 [ksoftirqd/0]
root         6  0.0  0.0      0     0 ?        S    Nov03   0:02 [migration/0]
root         7  0.0  0.0      0     0 ?        S    Nov03   0:01 [watchdog/0]
root         8  0.0  0.0      0     0 ?        S    Nov03   0:10 [migration/1]
USER：该进程属于那个使用者账号的？
PID ：该进程的进程ID号。
%CPU：该进程使用掉的 CPU 资源百分比；
%MEM：该进程所占用的物理内存百分比；
VSZ ：该进程使用掉的虚拟内存量 (Kbytes)
RSS ：该进程占用的固定的内存量 (Kbytes)
TTY ：该进程是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。
STAT：该程序目前的状态，主要的状态有：
R ：该程序目前正在运作，或者是可被运作；
S ：该程序目前正在睡眠当中 (可说是 idle 状态啦！)，但可被某些讯号(signal) 唤醒。
T ：该程序目前正在侦测或者是停止了；
Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态
• START：该进程被触发启动的时间；
• TIME ：该进程实际使用 CPU 运作的时间。
• COMMAND：该程序的实际指令为什么？
统计业务进程内存利用率
huawei-ivs:~ # pidstat -r
Linux 3.0.101-0.47.90.1.11835.0.PTF-default (huawei-ivs)     11/07/2017     _x86_64_

05:29:02 PM       PID  minflt/s  majflt/s     VSZ    RSS   %MEM  Command
05:29:02 PM         1      0.01      0.00   10560    684   0.00  init
05:29:02 PM       303      0.02      0.00  333832  92124   0.60  proc
05:29:02 PM       429      0.00      0.00   15460    516   0.00  bash
minflt/s: 每秒次缺页错误次数(minor page faults)，次缺页错误次数意即虚拟内存地址映射成物理内存地址产生的page fault次数
majflt/s: 每秒主缺页错误次数(major page faults)，当虚拟内存地址映射成物理内存地址时，相应的page在swap中，这样的page fault为major page fault，一般在内存使用紧张时产生
VSZ: 该进程使用的虚拟内存(以kB为单位)
RSS: 该进程使用的物理内存(以kB为单位)
%MEM: 该进程使用内存的百分比
Command: 拉起进程对应的命令
统计业务进程的IO
huawei-ivs:~ # pidstat -d
Linux 3.0.101-0.47.90.1.11835.0.PTF-default (huawei-ivs)     11/07/2017     _x86_64_

05:32:16 PM       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command
05:32:16 PM         1    344.58  44244.85     86.74  init
05:32:16 PM        14      0.00      0.00      0.00  kworker/2:0
05:32:16 PM        42      0.00      0.00      0.00  kworker/9:0
05:32:16 PM        63      0.00      0.00      0.00  kswapd0
kB_rd/s: 每秒进程从磁盘读取的数据量(以kB为单位)
kB_wr/s: 每秒进程向磁盘写的数据量(以kB为单位)
kB_ccwr/s： 任务写入磁盘被取消的速率（以kB为单位）
Command: 拉起进程对应的命令
统计整体磁盘性能
iostat命令
iostat主要用于监控系统设备的IO负载情况，iostat首次运行时显示自系统启动开始的各项统计信息，之后运行iostat将显示自上次运行该命令以后的统计信息。用户可以通过指定统计的次数和时间来获得所需的统计信息。

huawei-ivs:~ # iostat -xdm -p sda
Linux 3.0.101-0.47.90.1.11835.0.PTF-default (huawei-ivs)     11/07/2017     _x86_64_

Device:         rrqm/s   wrqm/s     r/s     w/s    rMB/s    wMB/s avgrq-sz avgqu-sz   await  svctm  %util
sda               0.72   241.66    8.40   23.45     0.63     1.04   106.87     3.39  106.36   3.56  11.34
sda1              0.00     0.00    0.00    0.00     0.00     0.00   102.10     0.00    2.65   2.51   0.00
sda2              0.02    14.03    0.65    7.07     0.04     0.08    31.71     1.48  191.76   3.21   2.48
sda3              0.41     0.81    3.26    0.84     0.06     0.01    30.97     0.08   18.99   5.80   2.38
sda4              0.00     0.00    0.00    0.00     0.00     0.00     5.00     0.00   41.00  39.00   0.00
sda5              0.10     0.56    0.02    0.01     0.00     0.00   210.72     0.01  193.71  12.25   0.03
sda6              0.04   109.19    1.62    5.99     0.12     0.45   154.74     0.94  123.52   5.56   4.23
sda7              0.05    65.91    0.59    1.70     0.16     0.26   381.61     0.41  177.41   8.65   1.98
sda8              0.09    48.36    2.26    7.60     0.25     0.22    96.52     0.46   47.00   6.75   6.65
sda9              0.00     0.00    0.00    0.00     0.00     0.00     9.23     0.00    6.38   5.98   0.00
sda10             0.00     0.00    0.00    0.00     0.00     0.00     8.77     0.00    6.22   6.20   0.00
sda11             0.00     2.79    0.00    0.25     0.00     0.01    98.20     0.02   66.35   8.13   0.20
rrqm/s：每秒这个设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并Merge）；
wrqm/s：每秒这个设备相关的写入请求有多少被Merge了。
rsec/s：每秒读取的扇区数；
wsec/：每秒写入的扇区数。
rMB/s：The number of read requests that were issued to the device per second；
wMB/s：The number of write requests that were issued to the device per second；
avgrq-sz 平均请求扇区的大小
avgqu-sz 是平均请求队列的长度。毫无疑问，队列长度越短越好。
await： 每一个IO请求的处理的平均时间（单位是微秒毫秒）。这里可以理解为IO的响应时间，一般地系统IO响应时间应该低于5ms，如果大于10ms就比较大了。 这个时间包括了队列时间和服务时间，也就是说，一般情况下，await大于svctm，它们的差值越小，则说明队列时间越短，反之差值越大，队列时间越长，说明系统出了问题。
svctm 表示平均每次设备I/O操作的服务时间（以毫秒为单位）。如果svctm的值与await很接近，表示几乎没有I/O等待，磁盘性能很好，如果await的值远高于svctm的值，则表示I/O队列等待太长， 系统上运行的应用程序将变慢。
%util： 在统计时间内所有处理IO时间，除以总共统计时间。例如，如果统计间隔1秒，该设备有0.8秒在处理IO，而0.2秒闲置，那么该设备的%util = 0.8/1 = 80%，所以该参数暗示了设备的繁忙程度。一般地，如果该参数是100%表示设备已经接近满负荷运行了（当然如果是多磁盘，即使%util是100%，因为磁盘的并发能力，所以磁盘使用未必就到了瓶颈）。
通用的IO性能包括IOPS和IO带宽，具体统计方法如下：

IOPS 每秒读写请求次数之和 IOPS = r/s + w/s (次/秒)
IO带宽 每秒磁盘IO读写的数据量之和 IO带宽 = rMB/s + wMB/s （单位：MB/秒）.
如果磁盘IO成为瓶颈因素，那么还可以依据其它参数的数据来分析，比如await表示每个请求的等待时长，等待时长越大表示IO越繁忙。%util表示这个存储设备在1秒钟里处理IO请求的时间比例，同样这个值越大表示业务越繁忙，一般达到60%就表示磁盘IO高负荷了。
整体网口流量情况
sar命令
sar（System ActivityReporter系统活动情况报告）是目前Linux上最为全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告，包括：文件的读写情况、系统调用的使用情况、磁盘I/O、CPU效率、内存使用状况、进程活动及IPC有关的活动等。
image.png

从上图可以看出sar命令的基本用法：

监控CPU信息
huawei-ivs:~ # sar -u -o test 2 2
Linux 3.0.101-0.47.90.1.11835.0.PTF-default (huawei-ivs)     11/08/2017     _x86_64_

08:41:03 AM     CPU     %user     %nice   %system   %iowait    %steal     %idle
08:41:05 AM     all      4.58      0.00      2.54      0.08      0.00     92.80
08:41:07 AM     all      4.36      0.00      3.15      0.12      0.00     92.37
Average:        all      4.47      0.00      2.85      0.10      0.00     92.58
监控网络相关信息
-n DEV ： 网络接口统计信息。
-n EDEV ： 网络接口错误。
-n IP ： IP数据报统计信息。
-n EIP ： IP错误统计信息。
-n TCP ： TCP统计信息。
-n ETCP ： TCP错误统计信息。
-n SOCK ： 套接字使用。
huawei-ivs:~ # sar -n DEV 2 2
Linux 3.0.101-0.47.90.1.11835.0.PTF-default (huawei-ivs)     11/08/2017     _x86_64_

08:45:06 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s
08:45:08 AM        lo     17.50     17.50      2.46      2.46      0.00      0.00      0.00
08:45:08 AM      eth0      0.50      2.50      0.04      0.34      0.00      0.00      0.00
08:45:08 AM      eth1     30.50      2.00      1.82      0.21      0.00      0.00      0.00
08:45:08 AM      eth2      2.50      2.00      0.47      0.21      0.00      0.00      0.00
08:45:08 AM      eth3      2.00      2.00      0.13      0.30      0.00      0.00      0.00
08:45:08 AM     bond0     35.50      8.50      2.46      1.05      0.00      0.00      0.00

08:45:08 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s
08:45:10 AM        lo     11.56     11.56      4.23      4.23      0.00      0.00      0.00
08:45:10 AM      eth0      1.51     54.77      0.12      3.71      0.00      0.00      0.00
08:45:10 AM      eth1     41.71     55.28      2.45      3.98      0.00      0.00      0.00
08:45:10 AM      eth2      2.01     55.28      0.45      3.71      0.00      0.00      0.00
08:45:10 AM      eth3      1.51     54.77      0.16      3.58      0.00      0.00      0.00
08:45:10 AM     bond0     46.73    220.10      3.18     14.98      0.00      0.00      0.00

Average:        IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s
Average:           lo     14.54     14.54      3.34      3.34      0.00      0.00      0.00
Average:         eth0      1.00     28.57      0.08      2.02      0.00      0.00      0.00
Average:         eth1     36.09     28.57      2.14      2.09      0.00      0.00      0.00
Average:         eth2      2.26     28.57      0.46      1.95      0.00      0.00      0.00
Average:         eth3      1.75     28.32      0.14      1.93      0.00      0.00      0.00
Average:        bond0     41.10    114.04      2.82      8.00      0.00      0.00      0.00
上面就是统计所有网口的流量信息：

IFACE 本地网卡接口的名称
rxpck/s 每秒钟接受的数据包
txpck/s 每秒钟发送的数据库
rxKB/S 每秒钟接受的数据包大小，单位为KB
txKB/S 每秒钟发送的数据包大小，单位为KB
rxcmp/s 每秒钟接受的压缩数据包
txcmp/s 每秒钟发送的压缩包
rxmcst/s 每秒钟接收的多播数据包
如果要统计网络丢包等错误信息，就是哟昂sar -n EDEV信息来统计。

内存和交换空间监控
huawei-ivs:~ # sar -r 2 2
Linux 3.0.101-0.47.90.1.11835.0.PTF-default (huawei-ivs)     11/08/2017     _x86_64_

09:08:47 AM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit
09:08:49 AM   7843844   7426720     48.63      3676    865932   6462088     33.19
09:08:51 AM   7843484   7427080     48.64      3676    866092   6461400     33.18
Average:      7843664   7426900     48.64      3676    866012   6461744     33.19
kbmemfree：这个值和free命令中的free值基本一致,所以它不包括buffer和cache的空间.
kbmemused：这个值和free命令中的used值基本一致,所以它包括buffer和cache的空间.
%memused：这个值是kbmemused和内存总量(不包括swap)的一个百分比.
kbbuffers和kbcached：这两个值就是free命令中的buffer和cache.
kbcommit：保证当前系统所需要的内存,即为了确保不溢出而需要的内存(RAM+swap).
%commit：这个值是kbcommit与内存总量(包括swap)的一个百分比.
统计磁盘使用情况
huawei-ivs:~ # sar -d 1 2 -p    
Linux 3.0.101-0.47.90.1.11835.0.PTF-default (huawei-ivs)     11/08/2017     _x86_64_
09:13:19 AM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
09:13:20 AM       sda      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00

09:13:20 AM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
09:13:21 AM       sda     25.00     32.00   1392.00     56.96      0.75     30.08      4.16     10.40

Average:          DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
Average:          sda     12.38     15.84    689.11     56.96      0.37     30.08      4.16      5.15
总结
本章节主要是介绍了Linux下性能观察整体性能和进程外部性能的几个基本工具，常用的主要是pidstat，mpstat和sar命令，下个章节主要介绍如何更深入地观察进程内部性能的工具。
image.png

补充说明
top命令中%CPU和%us的区别
在统计CPU信息的时候，%CPU显示的是进程占用一个核的百分比，而不是整个cpu（逻辑核）的百分比，有时候可能大于100，那是因为该进程启用了多线程占用了多个核心，所以有时候我们看该值得时候会超过100%，但不会超过总核数*100。

而对于%us表示的是所有用户进程占用整个cpu的平均值，由于每个核心占用的百分比不同，所以按平均值来计算的。

CPU的nice值的解释
假设在一个CPU轮转中，有2个runnable的进程A和B，如果他们的nice值都为0，假设内核会给他们每人分配1k个cpu时间片。但是假设进程A的为0，但是B的值为-10，那么此时CPU可能分别给A和B分配1k和1.5k的时间片。故可以形象的理解为，nice的值影响了内核分配给进程的cpu时间片的多少，时间片越多的进程，其优先级越高，其优先级值（PRI）越低。ni，就是改变过优先级的进程的占用CPU的百分比，如上例中就是0.5k/2.5k=1/5=20%。

PRI：PRI是比较好理解的，即进程的优先级，或者通俗点说就是程序被CPU执行的先后顺序，此值越小进程的优先级别越高。那NI呢？就是我们所要说的nice值了，其表示进程可被执行的优先级的修正数值。如前面所说，PRI值越小越快被执行，那么加入nice值后，将会使得PRI变为：PRI(new)=PRI(old)+nice。由此看出，PR是根据NICE排序的，规则是NICE越小PR越前（小，优先权更大），即其优先级会变高，则其越快被执行。如果NICE相同则进程uid是root的优先权更大。
NICE:在LINUX系统中，Nice值的范围从-20到+19（不同系统的值范围是不一样的），正值表示低优先级，负值表示高优先级，值为零则表示不会调整该进程的优先级。具有最高优先级的程序，其nice值最低，所以在LINUX系统中，值-20使得一项任务变得非常重要；与之相反，如果任务的nice为+19，则表示它是一个高尚的、无私的任务，允许所有其他任务比自己享有宝贵的CPU时间的更大使用份额，这也就是nice的名称的来意。
