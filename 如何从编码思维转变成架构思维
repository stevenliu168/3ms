http://3ms.huawei.com/km/blogs/details/5588807

如何从编码思维转变成架构思维
日期：2018-07-26 08:36浏览：1061评论：4
前言
从我上大学学计算机专业开始，就一直想成为一位架构师（虽然到现在离这个目标还有些距离 o(╥﹏╥)o）， 所以我在学习基本的代码编程和软件实现的时候特别注重软件架构和业务架构方面的思维和技术培养。

下面就来从我的理解出发，讲述如何从编程思维转换到架构思维， 如果要做一个系统架构和软件架构设计该注意哪些地方，该如何培养自己这些能力？

image.png

编码的思维
对于一个普通的开发者，一般的思维活动如下：

我应该选用那个语言特性来实现这个特性，使用while还是用for， 使用宏还是const， 使用StringBuilder还是StringBuffer。
我怎么写这个代码性能最好，代码写在循环里面还是外面，是惰性求值还是懒汉式初始化。
我是不是可以用高级的函数式特性特性来减少代码量。
新增一个方法应该添加在哪个模块里面。
这个变量应该怎么命名。
如何防止某个资源的泄露
。。。
这个时候程序员主要纠结在代码层面，解决当前的，遇到的单点问题为主。没有从整体上来解决问题，通过举一反三，通过提供通用框架解决方案来解决问题，并且防止类似的问题重现。

慢慢地很多开发人员在开发过程中会发现一些代码的问题，包括代码出现散弹式修改，代码出现重复和耦合，对于这些编码中顽疾会慢慢想办法：

通过套用设计模式来实现代码和复用和可扩展性
通过研究SOLID原则指导模块的设计和编码
通过思考如何设计木块或者类，让封装性更强，模块之间的耦合更少，达到高内聚低耦合。
通过提取公共类和方法，来防止重复代码。
通过提供统一内存管理机制来管理内存，防止内存泄露。
这个时候程序员就通过系统性思维来解决问题，通过研究问题的共性，需求更高层面的方案来解决问题。这种系统性的，从整体框架去解决问题，就是我们架构思维中的一个重要项，这个这种系统性的解决方案往往对应架构中的某个属性。
比如：

开发人员如果总是关注某个资源是否泄漏，那么只是解决单点问题。但是如果从整个系统考虑，解决所有资源的泄漏问题，从而提出提高的架构的可靠性属性，并且会随之出现一个内存管理模块。
开发人员如果总是关注某个资源在多线程场景会出现竞争，从而加锁来解决。但是如果从整个系统考虑，考虑其他的并发模型，形成编程框架，避免这种资源的竞争，支持系统的高效，快速的开发，降低编程复杂性，这个就提高的系统的高可开发性。
开发人员如果总是添加重复相似的代码来对接各种协议。但是如果从整个系统考虑，通过实现插件化，动态部署，抽象适配等技术，实现协议快速对接，提高系统的可扩展性与可部署性。
理解什么是架构
架构（Architecture）一词源于建筑领域，其本身就是建筑的意思，也是体系结构的意思。维基百科英文版里对 Architecture 的解释是：规划、设计和建造建筑物的过程及产物。

比较公认的架构定义是在2000年的 ANSI/IEEE 1471 标准中定义的：

架构过程：在系统整个生命周期中构思、定义、表达、记录、交流，验证合适实现，维护和改进架构的过程，也就是设计过程。
架构：一个系统体现在其环境中的元素、关系的基本概念或属性，以及其设计和进化原则。
架构描述：表达一个架构的工作产出物（通常指的是各种架构图和设计文档）。
架构视图：通过系统的某些关注点的视角，表达一个系统的工作产出物（例如部署视图、开发视图等）。
系统：包含了一个或多个进程、硬件、软件、工具与可以满足需求的人的集合。
环境：决定了开发、操作、策略和其他影响系统的设置和条件。
华为公司也是采用上面的定义来定义架构的：
image.png

所以：

架构是领域知识的载体，系统本质的具现
可重用、可传递、可演进的模型
理解系统的起点，产品培训的基础
指导系统维护与增强
架构应权衡并支撑所有利益相关人的需求
各利益相关人彼此理解、协商、达成共识，表达和协商各自需求的共同语言
架构视图不完整，则相应利益相关人需求很难得到充分理解、分析和满足
架构是开发效率的基础，产品竞争力的源头
早期设计决策的体现，为系统实现设定约束，为开发提供指导和限制
架构设计将决定几乎所有的质量属性——良好的架构，是高质量系统的必要条件
团队并行开发、迭代/增量交付、系统维护的基础 ，是组件化/服务化开发和重用的基础
架构的技术栈
image.png

我们从上面可以看到，架构最关键的技术就是模块化技术，无论是OO，微服务，还是组件化，都面临一个问题：

如何拆分子模块/子系统
如何将拆好的子模块/子系统组合起来，提供业务
这是我们做架构设计中一个重要的技术点，我们在设计类，需要考虑类之间的关系，然后通过组合或者继承来实现多个类的协同工作，并且保证类与类之间是高内聚低耦合的。我们在设计系统框架的时候，需要考虑系统与系统之间的交互过程，并且保证子系统之间的高内聚低耦合的，是正交的。

也就是回到根本，无论是软件架构设计，还是系统架构设计，都是将模块/子系统之间做到高内聚低耦合，保证模块/组件/子系统的可复用程度， 最终达到一个“搭积木”的效果。

最终达到架构通过分而治之，将复杂领域简单化。

架构中的属性
image.png

开发与演进类属性：支撑系统能够快速、高效、高质量开发出来，并能够方便修改、重用，持续演进，包括：可构建性，可测试性，可演进性，可重用性，易学习性
生态系统类属性：支撑系统构建开放、打造生态系统的能力，相应的基本属性，包括：开放性，可定制性，易集成性，兼容性
交付类属性：支撑系统快速交付、快速部署的能力，相应的基本属性，包括：供应性，可制造性，可部署性
运行类属性：支撑系统运行维护的各种DFX属性，相应的基本属性，包括：可靠性，安全性，可服务性，性能，可伸缩性/可扩展性，节能减排，易用性
功能属性：支撑系统提供有价值的功能特性的能力
理解架构与抽象的关系
在计算机科学中，抽象化（英语：Abstraction）是将数据与程序，以它的语义来呈现出它的外观，但是隐藏起它的实现细节。抽象化是用来减少程序的复杂度，使得程序员可以专注在处理少数重要的部分。

我们很多人了解抽象是在学习面向对象（OO）的时候接触到的，抽象和封装是一个紧密的关系：通过数据和行为的抽象出来了类，然后通过隐藏内部数据和行为实现细节，只暴露稳定的API，就是封装。

在架构设计中，抽象就显得更重要了，因为架构设计不像我们写代码，都是基于过程，或者对象的抽象， 架构设计是一种更高层次的抽象，需要我们更理解业务，基于业务领域来建模，然后得到一个抽象的业务模型。
比如在做一个视频存储系统的架构设计的时候，根据业务的需求，就应该有两个主要的业务：视频的处理和视频的存储。那么视频存储模块对于视频处理模块应该就是抽象的，视频处理是不用关心存储的技术细节的，同样视频存储也不应该关注视频的处理业务的技术细节。

做架构设计，抽象可以让我们从复杂的实现细节中抽身，而是更聚焦更高层次的设计，搭建整个系统的骨架。

理解架构与业务的关系
我们从前面看到，架构设计其实就是通过模块化/组件化思想完成关注点分离，降低局部复杂度，并且为系统某些质量质量属性服务的过程。 但是我们要理解一点，我们做架构设计的最终目的还是为了完成客户的商业目的，所以架构设计一定为要为业务服务的，并且架构设计难点就是业务的变化。

业务的快速变化对于现在的架构设计带来的很多挑战，一个APP，一个服务可能需要1~2周内上线。那么应该如何保证架构设计可以应对业务的快速变化呢？
那这样又回到了领域驱动设计了：

在战略层面，DDD非常强调针对业务问题的分析和分解，通过识别核心问题域来降低分析的复杂度。
在战术层面，DDD强调通过识别问题域里的不同业务上下文来进行面向业务需求的组件化。最后在实现层面利用成熟的技术模式屏蔽掉技术细节的复杂度。
image.png
面向业务变化而架构就要求首先理解业务的核心问题，即有针对性地进行关注点分离来找到相对内聚的业务活动形成子问题域。
子问题域的内部是稳定的，子问题域之间的我们希望是正交的，抽象的。

理解架构与可演进的关系
架构一定不是完美的，是我们针对当前的业务，容量，部署等等因素决策出来的，最适合当前场景的最经济的一种决策，但是一旦业务发生变化，容量急剧上升，都会对现在的架构提出挑战，这个挑战可能是会导致以前的设计完全被推翻，这个是我们不希望看到的。

那么如何解决这个问题呢？

在系统架构层面：基于领域模型来进行架构设计和演进，基于解耦来分离关注点，让每个独立的业务模块独立演进，这样可以让系统架构比较容易地应对变化。也就是现在常用的DDD和微服务化架构。
在代码设计层面：在代码微观层面，需要考虑通过抽象和封装来实现代码的高可复用性，保证代码的各个模块是高内聚低耦合的，并且通过正交设计，SOLID等原则的指导，做好模块设计，防止代码的散弹式修改和大泥团式的架构。
完美架构是很难的，比如以前通过配置文件来支撑整个大的系统，通过配置项的调整来适应新的业务，这种架构本身就很难以实现，比较会很复杂。但是演进式架构是通过业务需求的变化来驱动我们架构的变化，让我们的架构更好地应对客户的实际需求。
（但是并不是所有的行业架构有追求演进的，比如医疗，航天，金融等具有经济，生命巨大影响的产品可能更追求架构的完整性和无措性，防止因为需求变化导致巨大灾难和损失）

理解架构设计中的决策和取舍
我们在打王者荣耀的时候，有一个对战资料界面，里面有一个雷达图：
image.png

如果我们玩的是像鲁班这样的ADC，那么你的雷达图里面一定是输出，发育和推进比较高，但是你如果玩梦琪这样的肉坦克，可能就是生存比较高。

这就是简单的选择问题，你选择什么英雄，选择什么样的出装，选择什么样的游戏策略，那么就会有什么样的雷达图展示。
那么软件架构设计中也是同样的，你对于架构中的各种属性都需要进行决策和取舍，最终结果体现了你的业务和软件架构对外呈现的SAI指标参数，体现了应对各种DFX场景的适应能力。

在我们写代码的时候，其实就是设计代码的过程，中间会有很多决策过程，变量名怎么命名，分成几个类，分成几个函数。
这个时候的决策主要特点是技术难度较低，容易决；决策失误以后的代价比较小，可能只影响代码的可维护性，修复成本也较低。

但是我们在架构层面的决策和取舍就需要仔细斟酌了，

我的系统是选用C++实现还是Go语言实现
我的系统是选用Kafka还是RabbitMQ作为消息中间件
我的系统是否需要增加Cache层来提高性能
我的系统应该分为几层来实现
做这些决策需要基于以下考虑点：

我更看中架构中哪个属性，是性能，还是可扩展性。 性能 > 可扩展性 > 易部署性
我的团队成员能力最匹配哪个架构模型，技术实现上是否有极高的难度。
当前系统的业务复杂度是否足够复杂，需要我用复杂架构设计，还是可以简单处理。
总之，就是基于比较高的收益比 + 架构的可扩展性来进行考虑，选择最合适的架构模型。

为了有效地进行决策，原型验证是有必要的，kafka或者RabbitMQ那个更好，C++或者Go语言哪个更合适，都可以通过一些有效地的Demo验证来更好地支撑决策，降低决策失败的风险。

架构设计中的常见模式和方法论
架构的模式
我们需要了解一些常见的架构模式，可以基于面向模式的架构设计，来复用前人先进的经验，下面列举了一些常见的架构模式，每一项就不具体展开了。

单体架构模式
分层架构
MVC模式
Plug and Play即插即用模式
C/S&B/S模式
面向服务模式（SOA）
分布式架构
微服务架构
方法论
领域驱动设计DDD
演进式设计（也有叫做浮现式设计）
正交设计
方法论我就不详细展开，有兴趣的可以查阅相关书籍和文档。

培养架构师的一些软技能
image.png

有的时候很多人技术是很牛逼，但是却很难做到架构师或者CTO等职位，这个时候缺乏的就是一些软技能了。
image.png

软技能这一部分是大部分开发人员最缺的地方， 需要逐步提高自己的沟通，交流，约束自己的行文举止，提高自己的领导力和决策力。

总结
设计目的的关键点：解决问题的复杂度，建立团队协作沟通的共识，最后让系统能够更快地响应外界业务的变化，并且使得系统能够持续演进。
设计思维的关键点：抽象，决策与取舍。
设计成功的关键点：从业务出发、面向业务变化。
设计技术的关键点：模块/组件/子系统的分与合, 分而治之。
我们无论是编写代码，还是做系统设计，还是模块设计，都是一个设计的过程，只是我们抽象的层次不一样，我们决策的标准和代码不一样， 我们只有不断地从可复用性的角度去思考问题，通过抽象来解决问题，并且是解决通用性问题（也就是架构的某个属性），而不是局限于单点问题，那么我们的架构设计思维能力会逐步提供，最终让我们可以更加系统性去思考和解决问题。
