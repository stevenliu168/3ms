软件改变世界，我们改变软件

                           --参加固网第6届软件工程大会总结感悟

 

1      总体感受
固网整体的软件氛围不错，办了很多软件活动，并且都办的有声有色，对于“集市文化“很赞：

l  软件开源日

举办了第一届软件开源日，号召大家进行开源社区的参与和操作

l  软件工程大会

一共主办了六届软件工程大会

l  金码奖

一共举办了四届金码奖大会

l  软件赶集周

固网的软件“集市文化”：在软件领域有一本名著《大教堂和集市》，他被推崇为软件开源运动的独立宣言，作者提出两种软件开发模式：

1.         一种是大教堂开发模式：软件在封闭的组织中进行，通过严密的计划、流程和管理来运作。

2.         一种是集市模式：源码开放，开发活动松散，并行和扁平化，开发社区就像一个来去自由的集市，但是充满活力，效率很高。Linux成功的关键就是采用了集市模式。

 

固网使用“集市文化“为软件文化品牌，提倡软件人员发挥自主性，鼓励敢于尝试和实验，鼓励快速反馈，强调实用主义。

 

对于这本书有兴趣的可以看一下中文版：

http://3ms.huawei.com/hi/bbs/1127991.html?for_statistic_from=all_posts

l  内源项目

比如关键的内源项目TSDN, IAS等，参与度火爆，涌现了一批内源骑上。

l  固网捍码队

看护产品代码质量和架构

2      “一次做对”对不对
下面是软件六级专家张伟的分享： “一次做对“对不对：

 

被誉为“全球质量管理大师”、“零缺陷之父”和“伟大的管理思想家”的菲利浦·克劳士比（Philip B. Crosby）在20世纪60年代初提出“零缺陷”思想。零缺陷的思想传至日本，在日本制造业中得到了全面推广，使日本制造业的产品质量得到迅速提高，并且领先于世界水平，继而进一步扩大到工商业所有领域。零缺陷理论核心是：“第一次就把事情做对”。



 

那么在软件开发的时候能否做到“一次做对“呢。我们开发一个软件要一次做对，那么就需要做三件事情：

1.         一次做对需求

需求是很难一次澄清，IT行业的需求连客户都不清自己需要什么，即使是电信行业，很多需求我们也不知道客户什么时候需要。

2.         一次做对设计

设计其实也很难做对，举一个经典的例子就是二分法查找，这么一个看似很简单的算法从提出概念到最终用代码实现就用了很长的时间。

 

要证明一个错误很容易，但是要证明一个东西是正确的却很难。

3.         一次做对实现

及时设计做对了，实现的时候一定能保证正确吗，很多时候由于物理约束的原因，可能会导致失败。

 

比如在java.util.Arrays中的二分法查找中有一个bug：

int mid =(low + high) / 2;

在一般情况下, 这个语句是不会出错的, 但是, 当low+high的值超过了最大的正int值的时候, mid会变成负值,  这个时候, 会抛出ArrayIndexOutOfBoundsException 异常..

修正就很简单：

int mid = low + ((high - low) / 2);

 

我们再来看一下制造业推崇“一次把事情做对为什么会成功“。因为制造业的事情都是重复的，并且返工的代价相当大，所以需要提前缺陷预防。

 

【扩展】1968年中期，一共有400多位研究人员在负责捣鼓阿波罗计划中飞船所需要的软件，那时的人们深信，软件将是赢得登月比赛的关键。编程就意味着在成堆的穿孔卡上边打孔，然后这将会送去一台巨大的计算机中模拟一遍。所有的程序都必须在登月前模拟一遍，任何情况都不能落下。一旦这些“代码”敲定下来，它们就会被送到实验室附近的雷神公司去，一群专业的“美国大妈”裁缝就会把一根根铜导线穿过磁环（导线穿过磁环核心就代表“1”，围绕核心就代表“0”）。把RAM、ROM这些东西忘了吧，那时的“软件”可是相当的坚硬。 这样感觉真的是“编程“。

 

那么软件开发能不能像制作业那样，通过“一次把事情做对“来提供我们的代码效率和质量呢？

答案是在软件开发中很难把事情一次做对：

l  体系不同，不能照搬理论

l  软件行业和制造业有很多不同：工作群体不同，工作的内容不同，软件行业中是要推崇创意的

l  在软件行业中，反馈比缺陷预防更经济

l  代码是难以重复的，那么就很难预防。写代码是一个具有创造性的活动，不可能写出的重复的代码。

 

在《大教堂和集市》中说到：出现问题时，第一次解决时是不了解问题的，第二次才能真正了解。

 

态度决定一切吗？首先态度要明确，自己要有这个思想，但是不能保证零缺陷。

流程可以保证“零缺陷“吗？能够保证不重复出现问题，不出现低级问题吗？不能。

 

那怎么保证代码零缺陷了：从技术上面保证。

比如C语言的指针异常，这个从C语言出生到现在，多少大师和优秀程序员都无法解决的问题，难道我们就能够避免，只能从技术上面来解决。

所以C++推出了智能指针（在C++11标准才正式提出）， Java语言取消指针，Rust限制指针。

还需要坚持代码的优化和重构，追求Program Smart：





 

 

所以，对于软件开发来说，缺陷预防是有一定难度，应该采用反馈为主的策略，因为在软件开发中，反馈以后修复的成本是比较低的，尤其是现在软件工作化方法的成熟，敏捷开发的推行。  不过，越早反馈修复成本越低。

3      如何有效地传递软件能力
 

下面是胡子昂专家（美研所7级专家）带来的分享：如何有效地传递软件能力。

 

在这个信息爆炸的时代，如何把传承知识和经验，减少重复的劳动力，是每一个公司都面临的问题。在以前的时代，知识作为一种差异化的竞争力，是保密的，但是现在知识的管理已经是每一个组织的核心。

 

 

知识的分类：

l  外显式知识（Explicit Knowledge）

可定义、可存取的，可以以文字、科学程序或数字表达，可以沟通的，譬如一般人在学校教科书上所显示的知识便是属于外显式的。外显知识可以藉由电子化、信息化的进步而加速知识的转移，只要其它人取得纪录知识的媒介，便可藉由此学习到的知识均属于外显知识的范围。

l  内隐式知识（Tacit Knowledge）

内含于个人心中的非具体或者无完整条理的主观经验、模拟式、情境特殊性的知识技能，以及思考模式、信仰、认知模式等，无法直接传达给其它人，必须经由观察等方式间接学习。换句话说，个人心智中难以文字化，表面化，深植在个人的人生体验中，知识大部分是属于内隐式且个人化的，如个人所知道的技巧(Know-How)、个人的信仰、理念、概念、心理模式等影响个人行为的想法。内隐式的知识在内部流通最有效的方式是面对面的沟通，如见习制度、顾问指导等。

个人的经验，面地面

 

的交流，邮件，及时通信，头脑风暴这些都可以看做是内隐式知识。

 

知识的转化



1.共同化（Socialization）：

从个人的内隐知识转化为其它人的内隐知识，主要是指流程进行中的经验分享，也就是身体力行以致知。

分享的知识主要属于流程导向的操作技巧，活动的结果是广泛的创造新知识。

 

2.外部化（Externalization）：

将内隐知识转化成组织或者其它人可以共享的外显知识，主要是把知识收集汇整以及实体化，也就是用语言文字等形式表现诀窍与想法。分享的知识主要属于内容导向的整体概念，活动的结果则是集中于吸收新知。

 

3.组合化（Combination）：

把组织内部个人的不同知识加以依因果整合组织成为一个整体的架构，以兹利用，也就是汇编语言与形式。分享的知识主要属于内容导向的整体概念，而活动的结果则为广泛创造新的知识。

 

4.内部化（Internalization）：

指从他人的外显知识中获得自己的内隐知识，学习他人讲授的知识，进而举一反三，也就是实际了解与掌握语言与形式。分享的知识主要属于流程导向的操作技巧活动的结果则是 集中于吸收新知识。

 

知识不是一成不变的，是以螺旋式上升变化的；知识是有上下文的，没有上下人的人是很那理解的。那么知识传递有哪些障碍呢？



 

很多软件项目的失败：在于项目成员之间不懂别人懂的知识，做前面的人已经做过的事情，导致重复前人犯的错误，重复发明轮子。

 

那么硅谷哪些大公司是怎么实践知识的传承的：

首先要克服环境/组织/文化/流程上的障碍

其实要使用一个好的全局大系统来记录所有项目的信息，包括代码，文档，项目中所有的实践，交流。（比如Ticket System）

4      如何用好Git
下面是蒋鑫专家带来的分享，如何用好Git。

 

这个主要是讲解Git怎么使用，介绍了Git的好处，PHP和GoLang是怎么使用Git Workflow来管理代码的。

这个就不错什么讲解了，Git的使用技巧可以从很多渠道找到。

5      如何做一名合格的程序员
最后是内源专家肖华山带来的分享：做一个合格的程序员。

这个话题就比较草根了：

 

l  因为喜欢，所以坚持

要热爱编码，热爱的自己的职业，如果对编码没有热情，尽早转行，因为你在这个行业也不会有啥发展。

l  无他，唯手熟尔

要不停地写代码，只有熟练地写代码，才不容易出错。

l  像吟诗作赋一样写程序

诗词歌赋里面很多要求：工整对仗，简洁流畅，平仄押韵，并且还有诗词规范，遣词造句与创造模式。写代码也是一样，句句斟酌，反复修改，才能写出好的代码。

l  坚持Program SMaRT

l  按部就班，精益求精，持续重构

 

 

固网对于合格程序员的代码Checklist

检查序号

检查项目

1

已经自检5遍以上

2

已及时重构

3

已满足编程规范的要求

4

已完成UT

5

Pclint已经清零

6

CodeCC已经清零

7

Infusion QDI已达标

8

圈复杂度已达标 < 5

9

已Program SMaRT

10

我非常满意了

 

除了代码以外，我们还要关注架构：

烂程序员关心的代码，好程序员关心的是数据结构和他们之间的关系。

                 -------Linux创始人Torvalds在一次演讲“什么才是优秀程序员“说的

采用合适的设计模式，分层抽象，化繁为简，代码承载架构，架构不离代码。

 

指定自己的项目计划，从自己接受任务开始，需要将这个任务进行制定计划，明确自己要做什么，需求完成项目的成就感，如何和PM有什么冲突，要及时反馈。

 

程序员要学会Say No：要懂得拒绝别人，自己搞不定要提出来。

 

最后，怎么做一个合格的程序员：就是要Open：

l  多学习一门编程语言

l  多写博客，多分享

l  多看书

l  学会沟通

l  保持好奇心

l  善于发现问题，解决问题

l  热爱生活，享受编程

6      总结和感悟
参见完固网的软件质量大会以后有如下的感触：

l  集市文化的传播

在这个开源的时代，如果大家还是按照以前的模式开发，每个人守着自己的责任田，做点开发的活，靠着流程工具和后端测试来保证代码质量，那么研发效率一定是极低的。

 

l  内源活动的开展

现在固网的TSDN，IAS内源非常火热，很多程序员都去作为Committer参与到社区式开发中，这样对于提高软件氛围，提高软件能力和软件开发效率都有很强的促进作用。

。

 

l  研发效率的提升

从通信厂商的人均利润来说，思科，爱立信远远甩开华为公司，这说明华为公司的软件开发的效率是相当低，如何进一步提升软件开发人员的研发效率是当务之急，这样就需要当前IT的新的开发模式和理念的支撑，比如devops、服务化架构，社区式开发，全栈工程师。

 

l  关于“一次做对“对不对

这个观点一定是一个富有争议的观点。每个人的看法都不相同，但是有几点一定是没有争议的：

Ø  态度要明确，一定要高质量交付自己的代码，不停地优化和重构自己的代码，注重Program SMaRT。

Ø  流程的看护，项目管理上的需要，什么东西都交给人来做，难免有纰漏，并且人员的能力参差不齐，所以流程上的指标看护在现阶段还是有又用处的

Ø  技术的积累，通过研究新的技术，新的软件工程方法，来为以前无法解决的一些软件问题提供更优方法。

l  知识和技能的管理和传递

对于知识和技能的传递，现在核心网的的知识管理的传递比较弱， 兄弟们的求知欲望也不高，比如NFV核心网也搞了几个版本，还是有很多同学对于虚拟化，对于什么是NFV概念还是不清楚。

 

有些人总觉得写博客浪费时间，觉得写博客多的人一定是工作不饱满。工作包不饱满我就不知道了，但是写博客是很有益处的：

1.     回顾自己学习的东西，进行总结和升华

2.     将自己的东西转换成显式的知识，为后面的兄弟提供好的素材

3.     写博客也可以召集一帮志同道合的同志

4.     通过博客可以和其他人讨论

5.     只有不停的写博客，你才知道自己掌握了哪些东西，哪些东西还需要继续学习

 

关于知识和技能的传递是一个需要上下一心才能搞定的事情，主管需要支持并且进行推广， 程序员要学习总结，分享和学习。

 

l  如何做一个合格的程序员

关于什么才是一个合格的程序员，优秀的成员，卓越的程序员，这些讨论就没有停止过。网上对于这些讨论也非常多，比如追求简洁的代码，追求代码洁癖，追求优秀代码架构，学习业界新技术等等。

对于优秀的程序员我只说三点：

1.         简单比复杂更优价值

优秀程序员会使用整洁，易于理解的方式进行编码，任何不必要的复杂代码均不会出现。

（写代码-->重构-->进一步重构）

2.         开放的心态

不要盲目自信，自负，在IT这个领域，新知识层出不穷，你永远不可能全部掌握，在某些领域，你一定是要低人一等。

那些自负的程序员往往都是教条，狭隘和不切实际的。

3.         切合实际

忽略实际情况，循规蹈矩低遵循软件开发实践不能成为一名优秀的程序员。

 

我们有些程序员总是把下面这些话挂在嘴边：

l  所有的测试必须是单元测试

l  要不惜代价达到100%的代码覆盖率

l  不管业务目标是什么，必须建立在DDD模式之上

l  所有使用数据库的程序必须使用ORM来操作数据

l  代码注释不应该出现在代码中，应该总是使用代码来表达程序的含义而不是注释

l  任何一个你产出的文档，比如设计文档都是会过时的，用处很少

l  你唯一需要的文档就是代码

l  自顶向下的设计时不会成功的，应该使用TDD

l  除了面向对象，你用别的编程范式根本写不出好的软件，因为只有OO能够降低复杂度

l  ….

 

拥有这些极端思维到底是好是坏呢，不完全正确也不完全错误，只是不符合逻辑。

更加切实的考虑和合理的推理才能帮助你成为一个优秀的程序员，增强技能固然重要，但是在做软件开发的时候，应该从实际情况出发，认真考虑实施其所需的范围，成本，环境等各种因素。

 

 

7      我们产品线的软件能力提升措施
从去年到今年，核心网的软件氛围发生了巨大变化， 研发管理部也重点打造工程师文化，从下面的活动可以感受到：

 

l  软件工程师TOP10， TOP100的评选：选出核心网最优秀的软件牛人，让他们来分享和推动核心网软件工程师的文化。

l  软件内源：CGP的内源（尤其是WebOM的内源取得很大的成功）， 核心网研发工具的内源。

l  神三的推广：模块设计，无措编码，开发者测试，来综合提高软件编码效率。

l  飞虎队的运作：通过选拨优秀的软件工程师，打造一支敢打敢冲，攻克产品线重大软件项目和重大疑难问题的队伍，并且通过飞虎队来带动整个产品线的软件氛围和技能。

l  软件知识的传递：提供核心网系统工程能力中心的平台， 让大家来畅谈软件技术。

l  核心网金码奖：核心网和西研所共同主办的金码奖，软件高手竞相竞技，向优秀的代码挑战和学习。

 

还有很多其他的活动这里就不列举了，通过这些活动，已经让产品线的软件活动动起来了，大家分享技术的氛围提高了。

但是困难还是有的，思维的转变是需要一个过程的，这就需要广大的工程师们投身到这一场“软件定义一切”的浪潮中去，积极探索和贡献，为产品线的软件技术添砖加瓦。希望每个工程师保持开放的心态，向全栈工程师冲突，努力提高产品线的研发效率。也希望大家注重知识管理，只有一个好的知识管理，脑海中有一个好的技能地图，我们才能在IT的技术潮流中不会落伍，才能保证我们工程师队伍的竞争力，也希望大家积极投入到内源中去，适应社区式编程这种模式。

 

 

最后， 软件改变世界，我们改变软件，我们准备好了吗？

 

强烈推荐：

我们可以看一下下面的视频，感受一下软件怎么改变世界（2015年的暂时没有）。

http://3ms.huawei.com/mm/video/videoMaintain.do?method=showVideoDetail&f_id=1438209

http://3ms.huawei.com/mm/video/videoMaintain.do?method=showVideoDetail&f_id=1490327
