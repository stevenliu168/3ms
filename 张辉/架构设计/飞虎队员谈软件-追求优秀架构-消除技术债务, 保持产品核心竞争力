追求优秀架构

                          ---消除技术债务，保持产品核心竞争力

 

1      架构的解释和发展
1.1      什么是架构
架构主要表述了契合一个环境的系统的基本元素及元素之间关系构成的结构集，在环境中体现出来的基本属性，以及设计与演进的原则。

      

架构包括三个部分：

（1）组成系统的基本元素、元素之间关系构成的结构集

（2）基本属性

（3）设计与演进原则 



1.1.1        软件架构—运行时的抽象


 

1.1.2        架构架构支撑和反映系统基本属性
架构支撑和反映系统五个方面的能力

1、支撑系统能够开发出来， 并能够持续演进发展

2、支撑系统构建生态系统、 融入生态系统的能力。 包括第三方开发和集成

3、支撑系统可以交付、部署

4、支撑系统运行维护的各种属性， 包括安全可靠运行、低成本运维、 高弹性伸缩等属性

5、支撑系统提供有价值的功能特性的能力。



 

1.1.3        什么是框架，模式和平台
l  框架

框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。比如Eclipse， JavaEE里面的SSH框架等。

l  模式
Alexander给出的经典定义是：每个模式都描述了一个在我们的环境中不断出现的问题，然后描述了该问题的解决方案的核心。通过这种方式，你可以无数次地使用那些已有的解决方案，无需在重复相同的工作。

l  平台
平台的概念类似框架，但又结合的架构的考虑，它是更高层面上的“框架”，准确说是一种应用。它是针对企业用户，为解决企业业务需要而形成的产品。

1.2      架构的分类
TOGAF

       开放组体系结构框架（TOGAF）是一个行业标准的体系架构框架，它能被任何希望开发一个信 息系统体系架构在组织内部使用的组织自由使用。

Ø  业务架构

定义了商业策略，管理，组织和关键业务流程。

Ø  应用架构

这种结构为待配置的个人应用系统提供一个蓝图，从他们的交互，他们的关系到该组织核心的业务流程。

Ø  数据架构

这个描述一个组织逻辑的和物理的数据资产和数据管理资源的结构。

Ø  技术架构

它描述了支持核心部署和关键任务应用的软件基础设施。这种软件有时也叫做中间件。

 

1.3      系统架构和软件架构
l  系统架构 系统架构包括软件、硬件、网络等多方面的组织结 构。架构是分析设计的高层阶段，不会涉及到技术 实现的细节，是蓝图，是规化，是决策。

http://www.egov.thtf.com.cn/uploadimg/images/2014041510483121852337513.png

l  软件架构是指软件整体的组织结构，是在较高层次上的分析设计，体现了软件系统总体的规化、 决策、控制等



1.4      架构让开发更敏捷


 

 

“需要将业务分为应对变化的部分，和积累沉淀的部分，以不同的迭代粒度推进”

1.5      时代催生变更


 

1.6      扩展—精益思想与软件开发
精益的概念

       在终端用户的视角上观察生产流程，视任何未产生增值的活动为浪费，并通过持续地消除浪费实现快速交付，高质量与低成本。

       是对以丰田生产系统为代表的新生产方式的抽象与总结。



 

 

精益软件开发七项原则：

①     消除浪费；

②     内建质量；

③     创建知识；

④     推迟决策；

⑤     快速交付；

⑥     对人尊重；

⑦     整体优化。

2      常见的软件架构
计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。
    Any problem in computer science can be solved with another layer of indirection.

 

2.1      分层架构
特点：

层能够被单独构造；
层具有区别于其他层的显著特点；
层与层之间能够互相连接、互相支撑、互相作用，相互协作构成一个整体。
层的内部，可以被替换成其他可工作的部分，但对整体的影响不大。
 

发展：



以Web程序为例

1.         阶段一：

初期使用的ASP、JSP以及PHP，都是将所有的页面逻辑、业务逻辑以及数据库访问逻辑放在一起，这是我们通常提到的一层架构。

2.         阶段二：

随着JAVA，.NET等高级语言的快速发展，这些语言为开发者提供了越来越方便的的数据访问机制，如Java语言的JDBC、IO流，或者.NET的ADO.NET等。这时候，数据访问部分的代码逐渐有了清晰的结构，但表示逻辑和业务逻辑依然交织在一起，我们称这个阶段为二层架构阶段。

3.         阶段三：

随着面向对象分析、面向对象设计、面向对象原则、设计模式、企业架构模式等理念以及方法论的不断发展，从为用户提供功能、以及有效组织软件结构的角度考虑，WEB 应用中不同职责的部分逐渐被定义在了不同的层次，每一层负责的部分更趋向于具体化，细致化，于是软件的三层架构逐渐出现了。三层架构通常包括表示层、业务逻辑层以及数据访问层。

2.2      C/S架构和B/S架构
2.2.1        C/S架构
C/S 架构是一种典型的两层架构，是Client/Server， 即客户端服务器端架构。

l  两层架构：

服务器只负责各种数据的处理和维护，为各个客户机应用程序管理数据；客户机包含文档处理软件、决 策支持工具、数据查询等应用逻辑程序，通过网络使用SQL语言发送、请求和分析从服务器接收的数据。 这是一种“胖客户机（Fat Client）”、“瘦服务器（Thin Server）”的网络结构模式。

l  三层架构：

应用逻辑程序己从客户机上分离出来，不但作为一个应用服务器，而且又成为一个浏览的Web服务器。这 是一种“瘦客户机（Thin Client）”网络结构模式，客户端只存在界面显示程序，只需在服务器端随机增加 应用服务，即可满足系统的需要，可以用较少的资源建立起具有很强伸缩性的系统。

l  多层架构：

多层结构的应用程序把业务逻辑独立出来，组成一层或多层。形成客户层界面、中间业务处理层（可由多层组成）和后端数据服务层。

 

2.2.2        B/S架构
B/S架构的全称为Browser/Server，即浏览器/服务器结构。 B/S模式和C/S类似，只是前端界面是Web浏览器。B/S只有三层和多层架构。

2.3      MVC架构
MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。

l  Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。
通常模型对象负责在数据库中存取数据。

l  View（视图）是应用程序中处理数据显示的部分。
通常视图是依据模型数据创建的。

l  Controller（控制器）是应用程序中处理用户交互的部分。
通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。

http://d.hiphotos.baidu.com/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=7948cf4dbf096b63951456026d5aec21/b03533fa828ba61edbddc04d4034970a304e59a4.jpg

2.4      分布式架构
分布式系统顾名思义就是利用多台计算机协同解决单台计算机所不能解决的计算、存储等问题。单机系统与分布式系统的最 大的区别在于问题的规模，即计算、存储的数据量的区别。

例如下面的mooseFS分布式存储架构：

[转载]分布式系统架构的基本原则和实践

 

分布式架构主要涉及的理论：

l  CAP理论

1.         Consistency (一致性)：CAP理论中的副本一致性特指强一致性

2.         Availability(可用性)：指系统在出现异常时已经可以提供服务

3.         Partition tolerance (分区容忍)：指系统可以对网络分区这种异常情况进行容错处理

http://dl2.iteye.com/upload/attachment/0095/4519/fdf546f4-8e14-398a-8b4f-3ef570addd4c.jpg

定理：任何分布式系统只可同时满足二点，没法三者兼顾。
忠告：架构师不要将精力浪费在如何设计能满足三者的完美分布式系统，而是应该进行取舍。

 

l  Base理论

1.         ACID模型

关系数据库的ACID模型拥有 高一致性 + 可靠性 丧失可用性：
Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。
Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。
Isolation隔离层. 事务将假定只有它自己在操作数据库，彼此不知晓。
Durability. 一旦事务完成，就不能返回。

2.         BASE模型

BASE模型反ACID模型，完全不同ACID模型，牺牲高一致性，获得可用性或可靠性：
Basically Available基本可用。支持分区失败(e.g. sharding碎片划分数据库)
Soft state软状态 状态可以有一段时间不同步，异步。
Eventually consistent最终一致，最终数据是一致的就可以了，而不是时时高一致。

BASE思想的主要实现有
1.按功能划分数据库
2.sharding碎片 

BASE思想主要强调基本的可用性，如果你需要High 可用性，也就是纯粹的高性能，那么就要以一致性或容错性为牺牲，BASE思想的方案在性能上还是有潜力可挖的。

l  数据分布方式

1.         Hash方式

2.         按照数据范围分布

3.         一致性Hash

4.         按照数据量分布



l  副本协议

1.         中心化副本协议（ primary-secondary协议 ）

2.         去中心化副本协议（Paxos协议）

 

2.5      SOA—面向服务架构
2.5.1        什么是SOA


l  一个组件模型

l  将应用程序的不同功能单元（服务）通过这些服务之间定义良好的接口和契约联系起来。

l  接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。

l  构建在各种这样的系统中的服务可以以一种统一和通用的方式进行交互。

 



SOA Foundation 参考模型

2.5.2        SOA实例


SOA架构：

l  提供Service Bus，负责组件间通信、服务发布、格式转换

l  各个功能按组件方式进行独立的开发、编译、发布和升级，互不影响。

l  使得按特性开发和发布成为可能，各个功能组件可以进行独立的架构优化和演进

l  适应将来的开源策略（即只开源基本组件，商业版中发布增值组件）

l  可根据场景不同，可选择不同的功能组件。

2.6      微服务架构
2.6.1        什么是微服务架构
微服务架构是一种架构模式，它提倡将单一应用程序划分 成一组小的服务，服务之间互相协调、互相配合，为用户 提供最终价值。每个服务运行在其独立的进程中，服务与 服务间采用轻量级的通信机制互相沟通（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具体业务进行构建， 并且能够被独立的部署到生产环境、类生产环境等。另外， 应当尽量避免统一的、集中式的服务管理机制，对具体的 一个服务而言，应根据业务上下文，选择合适的语言、工具 对其进行构建。

 

微服务的诞生并非偶然: 领域驱动设计指导我们如何分析并模型化复杂的业务；敏捷方法论帮助我们消除浪费，快速反馈；持续交付促使我们构建更快、更可靠、更频繁的软件部署和交付能力；虚拟化和基础设施自动化( Infrastructure As Code)则帮助我们简化环境的创建、安装；DevOps文化的流行以及特性团队的出现，使得小团队更加全功能化。这些都是推动微服务诞生的重要因素。

2.6.2        微服务架构核心
l  小, 且专注于做⼀件事情

l  独立的进程中

l  轻量级的通信机制

l  松耦合、独立部署

 

架构示例图：

http://www.tucaobj.com/r/upload/2015-04-22/1429657495915.png

 

2.7      SOA VS 微服务架构
SOA实现

微服务架构实现

企业级，自顶向下开展实施

团队级，自底向上开展实施

服务由多个子系统组成，粒度大

一个系统被拆分成多个服务，粒度细

企业服务总线，集中式的服务架构

无集中式总线，松散的服务架构

集成方式复杂（ESB/WS/SOAP）

集成方式简单（HTTP/REST/JSON）

单块架构系统，相互依赖，部署复杂

服务都能独立部署

http://cdn3.infoqstatic.com/statics_s2_20150819-0313/resource/articles/analysis-the-architecture-of-microservice-part-02/zh/resources/soa-and-microservice-640-480.png

2.8      单块架构VS微服务架构
http://cdn1.infoqstatic.com/statics_s2_20150819-0313/resource/articles/enterprise-core-systems-transformation-practice/zh/resources/1004011.png

 

2.8.1        单块架构的优势和挑战
http://cdn1.infoqstatic.com/statics_s1_20150819-0313/resource/articles/analysis-the-architecture-of-microservice-part-01/zh/resources/0513002.jpg

2.8.2        微服务架构的优势和挑战
优势

l  异构性

l  独立测试与部署

l  按需伸缩

l  错误隔离性

l  团队全功能化

 

不足

l  分布式系统复杂性

l  数据库之间的一致性

l  测试复杂性

 

2.9      RESTful架构介绍
2.9.1        什么是RESTful架构
REST全称是Representational State Transfer，中文意思 是表述性状态转移。满足REST原则的架构就是RESTful架构。

http://www.e-works.net.cn/fileupload/images/129041994321562500.jpg

 

关键概念：

l  资源与URI

任何事物，只要有被引用到的必要，它就是一个资源，在RESTful架构中，用URI来表示资源的地址和名称。

l  统一资源接口

RESTful架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。

l  资源的表述

文本资源可以采用html、xml、json等格式，图片可以使用PNG或JPG展现出来。

l  资源的链接

超媒体的概念：把一个个把资源链接起来。

l  状态的转移

客户端负责维护应用状态，而服务端维护资源状态。 客户端与服务端的交互必须是无状态的，并在每一次请求中包含处理该请求所需的一切信息

2.9.2        REST设计准则
l  网络上的所有事物都被抽象为资源（resource）；

l  每个资源对应一个唯一的资源标识（resource identifier）；

l  通过通用的连接器接口（generic connector interface）对资源进行操作；

l  对资源的各种操作不会改变资源标识；

l  所有的操作都是无状态的（stateless）

 

2.10   其他的架构模式
还有很多其他的架构模式，这里就不描述，有兴趣的可以自己研究和学习：

l  黑板系统(Blackboard system)

l  事件驱动框架

l  Peer-to-peer

l  Pipeline

 

3      NFV下产品架构的核心竞争力
3.1      NFV的价值
http://3ms.huawei.com/hi/showimage-1424198433-62833-3ffad7913778e8e015a0b00abc5a3e45.jpg

NFV技术最初引入的驱动力是通过使用通用硬 件来降低网络CAPEX，但经过过去2年产业对 NFV价值的一些列的研究和验证，业界逐渐认 识到，NFV的更重要的价值在于：业务弹性的 扩缩容、业务的快速推广和提升资源和运维效率。

3.2      NFV下软件架构的核心竞争力


 

3.3      实例：高可用可伸缩架构的设计
http://cdn.infoqstatic.com/statics_s1_20150519-0054u2/resource/articles/high-availability-scalable-architecture-practical-experience/zh/resources/0419080.png

l  入口层通常指Nginx和Apache等层面的东西，负责应用（不管是Web应用还是移动应用）的服务入口，也可以指服务器程序的负载均衡设备。

l  业务层通常是由PHP、Java、Python、Go等写的逻辑代码构成的，需要依赖于后台数据库及一些缓存层面的东西。如何实现业务层的高可用呢？最核心的就是，业务层不要有状态,将状态分散到缓存层和数据库。

l  缓存层主要是用来提高数据数据访问性能而增加了，比如memcached，缓存层推荐使用分布式来增加可靠性。

l  数据库层可以考虑主从模式(Master-Slave)，还有主主模式(Master-Master)提高可靠性，也可以考虑分布式数据库来提高可靠性。

 

4      开发人员如何做好软件设计
4.1      架构不合理，引入技术债务
http://www.uml.org.cn/itnews/images/201509110801.jpg

技术债务最早是由Ward Cunningham提出的，当时是为了向非技术背景的项目干系人解释为什么要去做我们现在称之为“重构”的事情。Steve McConnell对技术债务的解释是：技术债务是短期的一种权宜，但从长期看相同的工作会比当前会费的成本要高很多。Jean-Louis Letouzey对技术债务的解释是：对不适合做法的补救成本的总和。



 

技术鸿沟和架构债务，越晚修复成本越高

4.2      从基本的做起，写好一个函数，设计好一个类


系统架构师的职责本身就是要设计和看护整个系统 架构的演进情况。那么作为一个软件开发人员如何 做出一个好的优秀架构的产品呢？

不要觉得架构设计离开发人员很远，一个大的系统是由若干个子系统组合起来的，每个子系统又是由若干个模块组成。所以开发人员要从方法（函数）开始，参考一些优秀的设计原则，一步一步将整个系统堆砌起来。 注重模块设计。

4.3      重构—优化代码和架构
重构：是指在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构，提高其可理解性，降低其修改成本。

分类：架构（框架）级重构、模块级重构、函数级重构。

 

http://cdn.infoqstatic.com/statics_s1_20150505-0115-1/resource/articles/architect-12-rules/zh/resources/jiagouzhi.png

 

http://www.oschina.net/uploads/img/201306/17125437_wryi.jpeg

5      程序员向架构师晋升之路


