重构已死？谈重构的核心思想

                                                              --与Thoughtworks公司重构专家熊杰交流

1     重构提出的历史背景
马丁·福勒的著作《重构》是一个经典的重构技术参考书。虽然重构已经非正式的使用了很多年了，William F. Opdyke在1993年的博士论文却是第一篇著名的关于的重构的文章，即使所有的理论与机制长久以来就以程序转换系统存在。所有这些资源提供了一种常用重构方法的型录索引──所有重构方法需要描述，包括怎样辨识你需要（或者不需要）应用该方法，以及如何应用的问题。

 

Opdyke有一本著作是《Refactoring Object-Oriented Frameworks》，1992年提出了面向对象的框架重构

 

后来Martin Fowler 和 Kent Beck给重构下了一个定义：

一种修改，使软件的内部结构更容易理解，在不改变软件的可见行为方式前提下使软件更容易变更…它是一种有节制的整理代码、使bug产生几率最小化的方法。

 

2     重构的假设和为什么重构
所有需要重构都是基于四个假设的：

l  代码库的规模很大

l  生命周期很长

l  工作团队很大

l  代码不够稳定

 

而重构根据上面四个假设，来通过重构手法达到下面的目标：

l  改进软件设计

l  使软件更容易理解

l  帮助找到bug

l  提高编程速度（这个主要是提高新特性的编程速度）

3     今天的世界是什么样的，今天的技术还需要重构吗
今天的软件是什么样子的？

以BAT为代表的互联网企业，在今天的时代面临的主要问题依旧是产品设计。传统敏捷开发的铁三角（重构，单元测试，持续集成）现在有了发展。

对于重构来说，由于简单设计和框架式开发，已经新的工具的使用，已经很少有人正式提起重构了。持续集成也发展到了持续部署和持续交付。

现在的互联网软件有几个典型的特点：

l  短周期，快速迭代，比如微信和淘宝上面很多服务都是生命周期很短的。

l  分散化，去中心化

l  使用开源社区的框架

 

现在的开发，基本都是使用某种高能力的工具，快速开发。代码量和复杂度都比较小，而且工具的支持也比较好。所以现在代码的可维护性的重要性。

 

在Sam Newman的building Microservices中有一个章节Optimizing for replaceability主要描述了下述的观点：

在微服务的架构中，每一个微服务都很小，所以把一个微服务替换成一个更好的微服务是很容易的管理和实现的。如果是微服务实现，你重写或者删除一个微服务的代价是很低的。

 

 

对于传统领域，比如传统的IT软件，通信软件，金融软件等，这些系统转型很慢，对于传统的重构手法还是有必要的。

对于正在转型的IT软件，一般分为内部系统和外部系统，内部系统是固定的，外部系统是面向消费者的，这种软件在一定程度上面还是要使用重构手法的。

对于新兴互联网企业，编码的技术性越来越弱（除了底层的平台策略层），大家都是进行社会式编程，都是理解社会上的业务。并且大量使用开源软件和框架，本身的代码都很少了，所以传统重构的手法越来越不重要。尤其在很多互联网公司内部都有很多内部创业（参考稻盛和夫的阿米巴模式），在这种模式下，很多东西都是快速实验的，重构的意义到底有多大。

 

 

最后一点，在重构技术上，很多技术都是按照面向对象范式来操作的，但是现在大量新型语言，比如Go，Scala等面向组合，面向函数式的语言，及时是Java也在逐步增加函数式编程的能力，所以传统的重构手法是否还有用。

 

4     重构的核心思想和对于软件架构，组织架构的意义
我们再看看《重构》这本书里面提到的几个核心思想：

1.    不改变软件行为，提出坏味道和对应的重构手法。

2.    六个概况性的坏味道

l  重复

l  庞大

l  分散

l  概念缺失

l  职责不清

l  过度抽象

3.    背后的SOLID设计原则

这个大家都很熟了

4.    三种基本的重构动作

创建， 删除， 修改

5.    四种高阶重构动作

搬移， 提炼， 集权， 分权

6.    重构对于测试的挑战

l  敏感性：当意图测试的目标未达成时测试会失败

l  特异性：当意图测试的目标达成时测试不会失败

l  反馈周期：测试能为“构建—度量—学习”周期提供及时的反馈。

 

在现在互联网行行业，再研究最底层的重构手法意义是不大的，但是并不能说重构就已经没有用了，我们从重构的核心思想可以学到很多东西，也很好的指引我们在新领域中进行架构设计和代码设计。

 

架构的演进—很多架构师想重构一个架构，都是直接从技术层面进行分析，然后一刀切的搞定，并没有按照不影响软件行为（或者少量影响软件行为上运行的）。没有考虑过怎么从老架构平滑切换到新架构。

架构的设计和演进—很多架构师上来就使用最流行的架构模式（比如微服务），但是没有考虑到组织架构，（关于正反康威法则与软件开发，后续的博文会介绍 

http://3ms.huawei.com/hi/blog/40602_2000005.html?h=h ）。

 

最后，对于有代码情怀和代码洁癖的人来说，重构永远是他们最重用的工作手法，但是我希望的是，在互联网发展的今天，代码级的重构已经不那么重要了，理解软件业务，理解软件架构（架构都差不多被开源框架封装完了，我们要做的是选择合适的开源架构），才是最重要的。

 

 

最后说明一点，题目中的重构已死仅仅是一个哗众取宠的说法，不管语言怎么变化，能让程序员读取的程序才是好程序，而重构是达成这个目标最好的手段。只是随着IDE，开源框架越来越强大，可能程序员能重构代码和工作量会越来越小。我们程序员后续的重心应该是关注软件架构的演进，软件业务的理解上面，不得不承认，软件工程师的技术壁垒越来越低，那么后续的核心竞争力将在业务理解，架构理解，协作性等方面。

对于传统领域，重构依旧是有用的，对于遗留代码的处理，有专门的研究。主要对于新型的微服务架构和快速实验性的项目，传统的重构作用就比较小了。如果一个微服务稳定以后，重构的相当简单的，及时你要删除替换或者重写这个微服务也是成本较低的。
