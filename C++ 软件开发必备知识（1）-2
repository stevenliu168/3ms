11.     default和deleted

1)     default
作用于类的特殊成员函数，为其自动生成默认的函数定义体，提高代码的执行效率。

当类中含有构造函数时，类不会为其生成默认构造函数.

#include<iostream>

using namespace std;

class A {

public:

    A(int a) {

        this->a = a;

    }

    int get() {

        return a;

    }

private:

    int a;

};

int main(int argc, char* argv[]) {

    //A A1;     //错误：类A不存在默认构造函数

    A A2(10);    //正确：调用带参的构造函数

    cout << A2.get() << endl;  //10

    getchar();

    return 0;

}

如使用默认构造函数，则必须显式地定义：A(){}  ,显式地定义默认构造函数存在问题：手动编写的特殊成员函数的代码执行效率比编译器自动生成的特殊函数低！

C++11标准引入default函数，只需在类的特殊成员函数声明后加上“=default;”，就可将该函数声明为 defaulted 函数，编译器将为显式声明的 defaulted 函数自动生成函数体。

A() = default;   //自动生成函数体

 

注：

l  default函数仅适用于类的特殊成员函数，且该特殊成员函数没有默认参数。

l  default函数既可以在类内声明类外定义，也可以在类内直接定义。

class A {

public:

    A() = default;   //自动生成函数体，类内定义

    //A(double d) = default;  //错误：类型对于默认构造函数无效

    A(int a) {

        this->a = a;

    }

    A(const A& it);

    //int get() = default;  //错误：=default只能出现在默认构造函数、析构函数、复制构造函数、赋值运算符中

private:

    int a;

};

A::A(const A& it) = default;  //类内声明，类外定义

 

2)     deleted
对于 C++ 的类，如果程序员没有为其定义特殊成员函数，那么在需要用到某个特殊成员函数的时候，编译器会隐式的自动生成一个默认的特殊成员函数，上面我们提到默认构造函数，还有复制构造函数，拷贝赋值操作符。

 

class A {

public:

    A() = default;   //自动生成函数体，类内定义

    A(int a) {

        this->a = a;

    }

private:

    int a;

};

int main(int argc, char* argv[]) {

    A A1(10);

    A A2 = A1;  //调用编译器隐式生成的默认复制构造函数

    A A3(20);

    A2 = A3;    //调用编译器隐式生成的赋值运算符

    getchar();

    return 0;

}

 

编译器能隐式地生成复制构造函数和赋值运算符可以为程序员省了一些代码量，但在某些情况下，不允许发生类对象之间的复制和赋值，可又无法阻止编译器隐式自动生成默认的拷贝构造函数以及拷贝赋值操作符，那这就成为一个问题，只需在函数声明后加上“=delete;”，就可将该函数禁用。

A(const A& it) = delete;

A& operator=(const A& it) = delete;  // 删除拷贝赋值函数

 

注：

必须在函数第一次声明的时候将其声明为 deleted 函数，否则编译器会报错。

deleted 函数特性可以作用于类的特殊成员函数、类的非特殊成员函数、普通函数。

 

12.     嵌入类,限制与约束

嵌套类等同于内部类的概念，定义嵌套类的目的是为了隐藏信息，提高代码的抽象能力，相当于在内部为外部类提供了一种新的类型。

两种类型：内联（inner）类和静态内嵌（static nested）类

l  内嵌类可访问定义在外围类中的静态实例变量。外围类不可以访问嵌套类的私有成员

l  不能从内嵌类中访问外部类的非静态成员.

l  可以在外部通过作用域限定符调用.

 

局部类
l  类可以定义在某个函数的内部，这样的类被称为局部类，局部类定义的类型只在定义它的作用域内可见。

l  局部类不能使用函数作用域中的变量。

l  局部类已经封装在函数作用域中，通过信息隐藏进一步封装就显得没什么必要了。

l  可以在局部类的内部再嵌套一个类，此时，嵌套类的定义可以出现在局部类之外且与局部类相同的作用域中。

 

13.     数据初始化 

1)      初始化表达式

下列初始化表达式等价 {} vs ()

T i{2};

T i = {2};

T i(2);

()与{}各有利弊，建议使用 {}，少用（）

 

double x = 1.0;

double y = 1.0;

int sum (x + y);  // compile ok

int sum {x + y};  // compile warning

warning: narrowing conversion of ‘(x + y)’ from ‘double’ to ‘int’ inside { } [-Wnarrowing]

     int sum {x + y};

{} ：与std::initializer_list使用时需注意overload规则，{}符号优先匹配initializer_list

std::vector<int> vec{1, 2};

Base b1(vec);

Base b2{vec};

Base b3({1,2});

Base b5{}; // ({})会匹配std::initializer_list构造函数

 

std::vector<int> vec{1, 2};   // 2个元素，值分别为1和2

std::vector<int> vec(1, 2);   // 1个元素，值为2

std::vector构造函数：

vector( std::initializer_list<T> init, const Allocator& alloc = Allocator() );

vector( size_type count, const T& value, const Allocator& alloc = Allocator());

 

2)     初始化列表
构造函数除了有名字，参数列表和函数体之外，还可以有初始化列表，初始化列表以冒号开头，后跟一系列以逗号分隔的初始化字段。

l  当类中含有const、reference 成员变量，基类的构造函数都需初始化表, 只能用intialization list 而不能用assignment。常量只能初始化而不能赋值,在定义的时候初始化引用且不能重新赋值，所以要写在初始化列表里面.

l  基于性能问题.对于内置类型（int,float,double…），使用初始化列表和在构造函数体内初始化，差别不大。但对于类类型来说，最好使用初始化列表.

l  没有默认构造函数的类类型.因为使用初始化列表可以不必调用默认的构造函数来初始化，而是直接调用拷贝构造函数来初始化。

 

a)        优先使用构造函数初始化列表来初始化成员

相比在构造函数体中对成员赋值，初始化列表的代码更简洁，执行性能更好，且可对const成员和引用成员初始化。

class Message {

public:

Message() : msgLength(0) {   // Good，优先使用初始化列表   

msgBuffer = NULL;  // Bad，不推荐在构造函数中赋值   

}

private:

unsigned int msgID{0};  // Good，C++11中使用

unsigned int msgLength;

unsigned char* msgBuffer;

}

 

b)        类的成员变量必须显式初始化

如果类有成员变量，没有定义构造函数，又没有定义默认构造函数，编译器将自动生成一个构造函数但并不会对成员变量进行初始化，对象状态处于一种不确定性。类的成员变量必须显式初始化，有必要定义默认构造函数。

class Message {

public:

Message():msgID(0),msgLength(0),msgBuffer(NULL) {  

    …….

}

… …

 

示例2：

#include <iostream>

using namespace std;

class Test1{

    public:

        Test1(int a):a(a)  {

        }

    private:

        int a;

};

 

class Test2 {

    public:

        Test2(Test1 &t1)  {

            test1 = t1;

        }

    private:   

        Test1 test1;

};

int main() {

    Test1 t1(1);

    Test2 t2(t1);

    return 0;

}

Test2的构造函数中test1 = t1这一行实际分两步执行

1)      调用Test1的默认构造函数来初始化test1

2)      调用Test1的赋值运算符给test1赋值

由于Test1没有默认构造函数，第一步无法执行，故而编译错误。

正确的代码如下，使用初始化列表代替赋值操作。

class Test2 {

    public:

        Test2(Test1 &t1):test1(t1) {

        }

    private:   

        Test1 test1;

};

 

3)     结构体初始化
char a[1024] = {0};  // 数组全零初始化

struct Test {

    int a;

    int b[10];

    struct Inner {

        int a;

        int b[10];

    };

    Inner in;

};

Test t = {0};        // 嵌套结构体全零初始化

 

4)     Lazy evaluation
使用时再初始化，只需要使用数据的一部分时，或只是有条件使用数据时。

3DPoint p = GetPoint(key);

// 只需获取t.key即可，int z = GetPointZ(key);

if (p.z) {

    foo(p.z);

}

5)     struct内部 Plain Old Data变量
memcpy_s、memset_s初始化，无必要性。

 

14.     引用，指针

引用就是某个目标变量的“别名”(alias)，对应用的操作与对变量直接操作效果相同。声明一个引用的时，要对其进行初始化。引用声明完毕后，相当于目标变量名有两个名称，即该目标原名称和引用名，不能再把该引用名作为其他变量名的别名。声明一个引用，不是新定义了一个变量，它只表示该引用名是目标变量名的一个别名，它本身不是一种数据类型，因此引用本身不占存储单元，系统也不给引用分配存储单元。不能建立数组的引用。

 

引用比指针更安全，因为一定非空且不再指向其他目标；不需检查非法的NULL指针。

 

1)      作为函数参数
1）传递引用给函数与传递指针的效果是一样的。这时，被调函数的形参就成为原来主调函数中的实参变量或对象的一个别名来使用，所以在被调函数中对形参变量的操作就是对其相应的目标对象（在主调函数中）的操作。

2）使用引用传递函数的参数，在内存中并没有产生实参的副本，它是直接对实参操作；而使用一般变量传递函数的参数，当发生函数调用时，需要给形参分配存储单元，形参变量是实参变量的副本；如果传递的是对象，还将调用拷贝构造函数。因此，当参数传递的数据较大时，用引用比用一般变量传递参数的效率和所占空间都好。

3）使用指针作为函数的参数虽然也能达到与使用引用的效果，但是，在被调函数中同样要给形参分配存储单元，且需要重复使用"*指针变量名"的形式进行运算，这很容易产生错误且程序的阅读性较差；另一方面，在主调函数的调用点处，必须用变量的地址作为实参。而引用更容易使用，更清晰。

 

2)      “常引用”
如果既要利用引用提高程序的效率，又要保护传递给函数的数据不在函数中被改变，就应使用常引用。

常引用声明方式：const 类型标识符 &引用名=目标变量名；

示例：

string foo( );

void bar(string & s);

那么下面的表达式将是非法的：

bar(foo( ));

bar("hello world");

foo()和"hello world"串都会产生一个临时对象，在C++中，临时对象都是const类型。上面表达式试图将一个const类型的对象转换为非const类型，这是非法的。引用型参数应该在能被定义为const的情况下，尽量定义为const。

 

3)     作为函数返回值类型
格式：类型标识符 &函数名（形参列表及类型说明）{ //函数体 }

在内存中不产生被返回值的副本；因为这点，返回一个局部变量的引用是不可取的。因随着该局部变量生存期的结束，相应引用也会失效，产生runtime error!

注意：

1）不能返回局部变量的引用。这条可以参照Effective C++[1]的Item31。原因是局部变量会在函数返回后被销毁，被返回的引用就成了"无所指"的引用，程序会进入未知状态。

2）不能返回函数内部new分配的内存的引用。这条可以参照Effective C++[1]Item31。虽不存在局部变量的被动销毁问题，可对于这种情况(返回函数内部new分配内存的引用)，又面临其它尴尬局面。如，被函数返回的引用只是作为一个临时变量出现，而没有被赋予一个实际的变量，那么这个引用所指向的空间(由new分配)就无法释放，造成memoryleak。

3）可以返回类成员的引用，但最好是const。这条原则可以参照Effective C++[1]的Item30。原因是当对象的属性是与某种业务规则相关联时，其赋值常与某些其它属性或者对象的状态有关，因此有必要将赋值操作封装在一个业务规则当中。如果其它对象可以获得该属性的非常量引用(或指针)，那么对该属性的单纯赋值就会破坏业务规则的完整性。

4）流操作符重载返回值申明为“引用”的作用：

流操作符<<和>>，这两个操作符常常希望被连续使用，如：cout << "hello" << endl;因此这两个操作符的返回值应该是一个仍然支持这两个操作符的流引用。可选的其它方案包括：返回一个流对象和返回一个流对象指针。但对于返回一个流对象，程序必须重新（拷贝）构造一个新的流对象，也就是说，连续的两个<<操作符实际上是针对不同对象的！这无法让人接受。对于返回一个流指针则不能连续使用<<操作符。因此，返回一个流对象引用是惟一选择。这个唯一选择很关键，它说明了引用的重要性以及无可替代性。 

赋值操作符=。这个操作符象流操作符一样，是可以连续使用的，如：x=j=10;或者(x=10)=100;赋值操作符的返回值必须是一个左值，以便可以被继续赋值。引用成了这个操作符的惟一返回值选择。

这四个操作符的对象都是右值，因此，它必须构造一个对象作为返回值。

 

＃include<iostream.h>

int &put(int n);

int vals[10];

int error=-1;

void main()

{

put(0)=10; //以put(0)函数值作为左值，等价于vals[0]=10; 

put(9)=20; //以put(9)函数值作为左值，等价于vals[9]=20; 

cout<<vals[0]; 

cout<<vals[9];

} 

int &put(int n){

if (n>=0 && n<=9 ) return vals[n]; 

else { 

cout<<"subscript error"; return error; 

}

}

5）在另外的一些操作符中，千万不能返回引用：+-*/ 四则运算符。它们不能返回引用，Effective C++[1]的Item23详细的讨论了这个问题。这四个操作符没有side effect，因此，它们必须构造一个对象作为返回值，可选的方案包括：返回一个对象、返回一个局部变量的引用，返回一个new分配的对象的引用、返回一个静态对象引用。根据前面提到的引用作为返回值的三个规则，第2、3两个方案都被否决了。静态对象的引用又因为((a+b) ==(c+d))会永远为true而导致错误。所以可选的只剩下返回一个对象了。

 

4)     与指针区别
1）指针是一个新的变量，存储了另一个变量的地址，可以通过访问这个地址来修改另一个变量；引用只是一个别名，还是变量本身，对引用的任何操作就是对变量本身进行操作，以达到修改变量的目的。

2）引用只有一级，而指针可以有多级

3）指针传参的时候，还是值传递，指针本身的值不可以修改，需要通过解引用才能对指向的对象进行操作。引用传参的时候，传进来的就是变量本身，因此变量可以被修改

 

15.     指针，nullptr

1)      常量const修饰
const char* p   // p所指向的内容为const类型不可修改

char const *p;  // 同上

char* const p   // p不能修改, p所指向的内容可以修改

const char* const p  //一个常指针指向一个常量

 

示例1：

char* s=”AAA”;

printf(“%s”,s);

s[0]=’B';

printf(“%s”,s);

“AAA”是字符串常量。s是指针，指向这个字符串常量，所以声明s的时候就有问题。

cosnt char* s=”AAA”; 然后又因为是常量，所以对是s[0]的赋值操作是不合法的。

 

2)     数组指针操作
int a[5]={1,2,3,4,5};

int *ptr=(int *)(&a+1);

printf(“%d,%d”,*(a+1),*(ptr-1));

说明：

a,&a地址一样，但意思不一样，a是数组首地址，也就是a[0]的地址，*(a+1）就是a[1]。&a是对象（数组）首地址，,&a+1是下一个对象的地址，即a[5]，则ptr实际是&(a[5]),也就是a+5。

&a是数组指针，类型为 int (*)[5]; 而指针加1要根据指针类型加上一定的值，不同类型的指针+1之后增加的大小不同，a是长度为5的int数组指针，所以要加 5*sizeof(int)

但ptr与(&a+1)类型是不一样的，所以ptr-1只会减去sizeof(int*)

 

3)      复杂声明
void * ( * (*fp1)(int))[10];

fp1是一个指针，指向一个函数，这个函数的参数为int型，函数的返回值是一个指针，这个指针指向一个数组，这个数组有10个元素，每个元素是一个void*型指针。

 

float (*(* fp2)(int,int,int))(int);

fp2是一个指针，指向一个函数，这个函数的参数为3个int型，函数的返回值是一个指针，这个指针指向一个函数，这个函数的参数为int型，函数的返回值是float型。

 

int (* ( * fp3)())[10]();

fp3是一个指针，指向一个函数，这个函数的参数为空，函数的返回值是一个指针，这个指针指向一个数组，这个数组有10个元素，每个元素是一个指针，指向一个函数，这个函数的参数为空，函数的返回值是int型。

 

4)      使用nullptr, 非NULL或0
nullptr的优势不仅在字面上代表了空指针，使代码清晰，而且不再是一个整数类型。nullptr是std::nullptr_t类型，而std::nullptr_t可隐式的转换为所有的原始指针类型，使得 nullptr 可表现成指向任意类型的空指针。

void F(int);

void F(int*);

F(nullptr);   // 调用 F(int*)

auto result = Find(id);

if (result == nullptr) {  // Find() 返回的是指针

 // do something

}

 

注：0字面上是int类型(0L是long)，所以NULL和0都不是指针类型。当重载指针和整数类型的函数时，传递NULL或0都调用到整数类型重载的函数。

直接使用0或0L，代码不清晰且无法做到类型安全；使用NULL无法做到类型安全。这些都是潜在的风险。

 

5)      野指针说明
不是NULL指针，是未初始化或者未清零的指针，它指向的内存地址不是程序员所期望的，可能指向了受限的内存。

成因：

1）指针变量没有被初始化

2）指针指向的内存被释放了，但是指针没有置NULL 

3）指针超过了变量的作用范围，比如b[10]，指针b+11

… …

 
16.     unique_ptr,shared_ptr

 

1)     unique_ptr
基础指针的一个所有者,可以移到新所有者，但不会复制或共享。替换已弃用的auto_ptr

 

使用std::make_unique 而非new 创建unique_ptr，说明：

1. make_unique 提供了更简洁的创建方式

2. 保证了复杂表达式的异常安全

 

使用std::make_unique 而非new创建unique_ptr，说明：

1. make_unique 提供了更简洁的创建方式

2. 保证了复杂表达式的异常安全

//两次出现 MyClass，重复导致不一致风险

std::unique_ptr ptr(new MyClass(0, 1));  

//只出现一次 MyClass，不存在不一致的可能

auto ptr = std::make_unique<MyClass>(0, 1);

 

重复出现类型可能导致非常严重的问题，且很难发现：

// 编译正确，但new和delete不配套

std::unique_ptr ptr(new uint8_t[10]);

std::unique_ptr ptr(new uint8_t);

// 非异常安全: 编译器可能按如下顺序计算参数:

// 1. 分配 Foo 的内存,

// 2. 构造 Foo,

// 3. 调用 Bar,

// 4. 构造 unique_ptr.

// 如果 Bar 抛出异常, Foo 不会被销毁，产生内存泄露。

F(unique_ptr(new Foo()), Bar());

// 异常安全: 调用函数不会被打断.

F(make_unique(), Bar());

 

例外: std::make_unique 不支持自定义 deleter 。 在需要自定义 deleter 的场景，建议在自己的命名空间实现定 制版本的 make_unique 。 使用 new 创建自定义 deleter 的 unique_ptr 是最后的选择

 

2)     shared_ptr 
采用引用计数的智能指针。 如想要将一个原始指针分配给多个所有者(如，从容器返回了指针副本又想保留原始指针时)，请使用该指针。 直至所有sharedptr 所有者超出了范围或放弃所有权，才会删除原始指针。

 

使用std::make_shared 而不是new 创建shared_ptr

使用 std::make_shared 除了类似 std::make_unique 一致性等原因外，还有性能的因素。 std::shared_ptr 管理两个实体：

l  控制块(存储引用计数， deleter等)

l  管理对象

std::make_shared 创建 std::shared_ptr ，会一次性在堆上分配足够容纳控制块和管理对象的内存。而使用 std::shared_ptr(new MyClass) 创建 std::shared_ptr ，除了 new MyClass 会触发一次堆分配外， std::shard_ptr 的构造函数还会触发第二次堆分配，产生额外的开销。

 

另外，类似 std::make_unique ， std::make_shared 不支持定制 deleter

 

3)     weakptr 
结合 sharedptr 使用的特例智能指针。 weakptr 提供对一个或多个 sharedptr 实例拥有的对象的访问，但不参与引用计数。 如果你想要观察某个对象但不需要其保持活动状态，请使用该实例。

 

4)     unique_ptr 优先
而不是shared_ptr, 说明：

1. shared_ptr 引用计数的原子操作存在可测量的开销，大量使用 shared_ptr 影响性能。

2. 共享所有权在某些情况（如循环依赖）可能导致对象永远得不到释放。

3. 相比于谨慎设计所有权，共享所有权是一种诱人的替代方案，但它可能使系统变得混乱

 

例外 : 在性能敏感、兼容性等场景可以使用原始指针

 

5)     禁止使用auto_ptr
在stl库中的std::auto_ptr具有一个隐式的所有权转移行为。转移所有权的行为通常不是期望的结果。对于必须转移所有权的场景，应使用显示转移的方式。开发人员对使用auto_ptr需保持谨慎，否则出现对空指针的访问。

auto_ptr<T> A1(new T);

auto_ptr<T> A2 = A1；// p1变为NULL

 

使用auto_ptr常见的有两种场景

一是作为智能指针传递到产生auto_ptr的函数外部(使用std::shared_ptr代替)。

二是使用auto_ptr作为RAII管理类，在超出auto_ptr 的生命周期时自动释放资源，可使用std::unique_ptr来显式的所有权转移。

 

注：

C++11标准之前，在一定需要对所有权进行转移的场景下，可使用std::auto_ptr，但建议对std::auto_ptr进行封装，并禁用封装类的拷贝构造函数和赋值运算符，以使该封装类无法用于标准容器。
