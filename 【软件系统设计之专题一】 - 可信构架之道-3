六. 架构设计衡量与愿景
好的软件架构设计是产品质量的保证，特别是对于客户常常提出的非功能性需求的满足，不好的架构是对资源的浪费(人力、物力等)。成功的软件架构设计必须遵循一定的原则、模式，失败的软件架构设计总是由于一些不确定的因素导致。

 

如果一个软件开发程度在70%以上的情况下，加入一个新功能还需涉及到大量的文件、代码的修改，那这个软件架构一定很烂，而好的架构此时应该已经完成大部分底层组件的开发且相互独立，加入的大部分新功能基本上是原有组件的功能组合(不涉及内部的修改)，以及加入新功能特有的独立组件。

 

如果每加入一个功能就有大量的修改提交，那么这个架构的质量，你懂的！

1.  架构设计的衡量
架构为业务服务，没有最优的架构，只有最合适的架构。架构始终以高效、稳定、安全等为目标来衡量其合理性。

 

业务需求的角度

·       能解决当下业务需求和问题；

·       高效完成业务需求，能以优雅且可复用的方式解决当下所有业务问题；

·       前瞻性设计，在未来一段时间都能以高效方式满足业务，从而不会每次当业务进行演变时，导致架构翻天覆地的变化。

 

非业务需求角度

·       高可用：尽可能提高软件可用性，通过黑白盒测试、单元、自动化、故障注入测试、提高测试覆盖率等来一步一步推进；

·       文档化：整个生命周期内都需做好文档化，变动来源包括但不限于BUG，需求等；

·       可扩展：软件的设计秉承低耦合的理念去做，在合理的地方抽象。方便功能更改、新增和运用技术的迭代，并且支持在适时对架构做出重构；

·       高复用：为了避免重复劳动，降低成本，希望能够复用之前的代码、设计。这点对于架构环境的依赖是较大的；

·       安全：组织运作过程中产生的数据都是具有商业价值的，保证数据的安全也是刻不容缓的一部分，以免出现XX门之类丑闻。加密、HTTPS等为普遍手段。

 

软件架构应该是拥抱变化，性能稳定，易于维护。

·       可伸缩性: 服务是可扩展的，并且扩展的成本是比较合理的。当服务的负载增长时，系统能被扩展来满足需求，且不降低服务质量；

·       高可用性: 尽管部分硬件和软件会发生故障，整个系统的服务必须是7 *24小时可用，可通过软件和硬件的冗余来实现；

·       可管理性: 整个系统可能在物理上很大，但应该容易管理，需要开发对应的管理工具；

·       价格有效: 架构设计需要考虑ROI因素，整个系统的实现是经济的、易支付的。如果一个架构很好，但成本高得惊人，那不一定是合适的架构。

 

对系统架构优劣的评价参考

1)   系统性能

2)   可靠性(容错/健壮性)

3)   可用性

4)   安全性

5)   可修改性(可维护、可扩展性，结构重组，可移植性)

6)   功能性

7)   可交互性

 

2.  逆向的康威定律
对于大型和复杂的应用程序，微服务架构往往是最佳选择。然而，除了拥有正确的架构之外，成功的软件开发还需要在组织、开发和交付流程方面做一些工作。下图展示了架构、流程和组织之间的关系：

 

为了能在使用微服务架构时能有效地交付软件，需要考虑康威定律。组织架构和系统架构之间有一种隐含的映射关系,设计系统的组织其产生的设计等价于组织间的沟通结构。因此反向应用康威定律并设计你的企业组织，使其结构与微服务的架构一一对应。这样可确保开发团队与服务一样松耦合。

 

若干小团队的效率显然要高于一个单一大团队。微服务架构使得团队可以实现某种程度的“自治”。每个团队都可以开发、部署和运维扩展他们负责的服务，而不必与其他团队协调。更进一步，当出现了某个服务故障或没有满足SLA等要求时，对应的责任人也非常清楚。而且开发组织的可扩展性更高，可以通过添加团队来扩展组织。如果单个团队变得太大，则将其拆分并关联到各自负责的服务。由于团队松散耦合，可以避免大型团队的沟通开销。因此，也可以在不影响工作效率的情况下添加人员。

 

3.  架构设计的愿景
系统架构能描述软件的整体且包括软件的各个方面，但每一个设计细节总是需要单独考虑，这时候就会出现设计细节之间、以及设计细节和架构之间的不一致。架构设计的各个部分之间的设计冲突是很容易发生的，发生的概率及频率和团队的规模成正比、和沟通的频度及效果成反比。如不同模块间的设计冲突导致了软件无法正常运行时，我们就需要坐下来好好的审视，究竟发生了什么。

 

建立一个架构愿景，提供软件全局视图，包括所有重要部分，定义各个部分的责任和之间的关系以及设计需要满足的原则。而这个愿景的设计源自需求，那些针对系统基本面的需求。比如说，系统特点是一个交互式还是一个分布式系统，这些需求将会影响到架构愿景的设计。同时，架构愿景也要满足其它各种特点，譬如简单、可扩展性、抽象性。简单来说，把架构愿景当作一个mini的架构设计，由于是在单次迭代中讨论架构愿景，因此从整体上考虑，架构愿景是也是在不断的变化的。因为架构愿景代表了架构的设计，架构愿景的演进代表了架构设计的演进。

 

架构的愿景是相对于一个范围来说的，在一个特定软件功能范围之内谈架构愿景才有实际的意义，例如针对软件的全局或某个子模块。在这个特定的范围中，订立了架构愿景之后，这个范围内的所有设计原则将不能违背架构愿景。这是非常重要的，是架构愿景的最大的用处。有了这样的保证，就可以保证设计的一致性和有效性。任何一项设计的加入，都能够融入到原先的架构中，使得软件更加的完善，而不是更加的危险。

 

从整个开发周期来看，全局架构愿景是随着迭代周期的进行不断发展、修改、完善的。子模块级、或是子问题级的架构愿景本质上和全局的愿景制定差不多，不能够和全局愿景所违背

在操作上，全局愿景是设计团队共同制定出来的，而子模块级的架构愿景就可以分给设计子团队来负责，而其审核则还是要设计团队的共同参与。以确保各个子模块间不至于相互冲突或出现空白地带，且每个子设计团队可从别人那里吸取设计经验。一般来说，设计团队取得了一致的意见就可确定全局架构愿景工作的基本完成。

 

子模块(子问题)间的耦合问题。一般来说，各个子模块间的耦合程度相对较小，而子问题间的耦合程度就比较大，如权限设计、财务等功能会被每个模块使用。那么就需要为子模块制定出合同接口，意指接口是正式的，不能随意修改，会被其它设计团队使用，如修改将会对其它的团队产生无法预计的影响。合同接口的制定、修改都需要设计团队的通过。此外，系统中的一些全局性的子问题最好提到全局愿景中考虑。

 

七. 构架系统的感与悟
 

1. 架构设计的常见误区
·     架构专门由架构师来做，业务及开发人员无需关注；

·    过早做出关键性决策；

·     架构设计企图一步到位，世上没有最好的架构，只有最合适的架构,不要企图一步到位；

·     为虚无的未来埋单：某种程度上来说不要过多考虑未来的扩展，说不定功能做完后效果不好就无用了。如业务模式和应用场景边界都已比较清晰，那应该适当的考虑未来的扩展性设计；

·     遗漏关键性约束与非功能需求；

·     高开高走落不到实处；

·     埋头干活儿缺乏前瞻性；

·     为了技术而技术：技术是为业务而存在，除此毫无意义。在技术选型和架构设计中，脱离实际而一味追求新技术，可能会导致架构之路越走越难。成本、时间、人员等各方面都要综合考虑；

·     架构设计无需考虑系统可测性。

 

2. 架构大方向必须正确
架构设计是软件成败的关键环节之一，决定了软件的整体质量进而决定了客户的满意度。同时也决定了软件的可扩展性、可维护性、稳定性以及性能等方方面面。架构大方向是概念架构设计，设计了正确的概念架构，表明软件架构设计已经成功了一半。一个产品与其它同类产品在概念架构设计上的不同决定了软件架构后续的发展导向。概念架构设计不关注具体的接口定义和实现细节，主要工作在于总体架构模式、技术选型等方面，是软件架构设计轮廓性规划和总体指导策略。

 

架构的方向性错误将导致后续设计、开发迭代的不稳定及复杂性，稳定性、扩展性等的缺失，基础的重构也将导致资源的过多、不必要的消耗，这也是项目团队所不愿意面对的。

 

3. 关于系统的重构参考原则
重构是基于已发现问题和潜在问题进行修正，也可说是一种还债行为，用更好的方式、方法来纠正以前代码和设计中存在的问题，同时也是最大化减少产品发生问题的可能，让系统减负运行。如代码优化，剔除重复、违背代码规范、模块耦合问题等。可将整个系统分成很多个子模块，以对各个子模块各个击破，最终完成对整个系统的重构，分而治之。

 

确保重构行为仅针对那些有重构需要的设计，需求的变更或对原设计进行改进以得到优秀简洁的设计实现。对于一段凌乱的代码，如不需要修改它就不需要重构。只有当你需要理解其工作原理时，重构才变得有价值，如果重写比重构更加容易，那就无需重构。对于架构来说，可近乎等价的认为只是在外部接口不变的情况下对架构进行改进。而在实际的开发中，除非非常有经验，否则在软件开发全过程中保持所有的软件接口不变是一件非常困难的事情。

 

重构是一种优秀的代码改进方式，追求不重复的代码虽然难做到，但是其过程却可以有效的提高开发团队的代码质量，每次对代码进行的迭代改进，促进了系统简单的实现。在团队中提倡使用、甚至半强制性使用重构，有助于分享优秀的软件设计思路，提高软件的整体架构。重构还会涉及分析、设计模式、优秀实践的应用。同时，重构还需要其它优秀实践的配合，譬如代码复审和测试优先等等。

 

4. 系统重构的目标要清晰
重构的诉求、目标要明确，解决什么问题，为什么会出现这些问题，如何解决。解决的方式彻底吗? 要站在更高的角度看待问题，架构高度、能力决定思维、方式、方法。 如果解决一个问题会带来更多问题的设计和开发有必要做吗？ 局部的优化可能招致全局受损，在瓶颈之外的任何优化提升都只是幻象。如果资源、人力的消耗在无用功上，表象上是大家多么努力，腐化架构、平台的工作，那是对公司的不负责、对个人人生的不负责。

 

5. 架构团队评审制度的必要性
团队设计的理论依据是群体决策，与个人决策相比，群体决策的最大好处就是其结论要更加的完整。群体决策需要额外付出沟通成本、决策效率低、责任不明确等。但群体决策如果能够组织得当，是能够在架构设计中发挥很大的优势的。

 

系统的设计需要召开团队评审会议进行评审，避免某个问题的设计改造腐化了系统并导致后续的开发、交付、稳定性存在更多隐患。复审是避免设计出现错误的重要手段，可在架构设计过程中引入复审的活动。复审应该着重于粗粒度模块/组件的分类和它们之间的关系。正如后续的重构和稳定性模式所描绘的那样，保持粗粒度模块/组件的稳定性有助于重构行为，有助于架构模型的改进。

 

6. 系统的重构是对原架构的检视
重构是对构架的合理性、前瞻性、业务敏捷适应性等的综合考量。对平台架构，特别是分布式系统架构，要站在整体、全局的视角高度来规划、重构。当发现系统关键基础模块、子系统出现问题(扩展性、稳定性、发布的简易性、资源消耗等等)，要审视是否原有架构的设计是否合理，清楚在语言(C/C++/Go/Java/…)之上承载的架构的特征、需要规避的问题。架构问题要在架构层面去解决，宜早不宜晚。

 

7. 软件架构设计原则不容模糊
系统内各个代码模块的质量很重要，同样，分布式系统内各个子系统的职责边界、整体运行、协作效率，稳定性、扩展性、可靠性、容错性等也亦非常重要。软件设计原则及模式为最佳实践，要深入理解和掌握、遵守，但并非要盲从，原则的违背必然会有成本的付出，设计人员要意识这一点，并适时变通补偿。具体要结合实际工作中业务、时间、资源及团队情况来权衡。 另外，软件的设计原则是针对面向对象设计和编程提出，但并非只适合系统内部对象、结构，对于大规模系统架构仍然有其一定的适用性、可借鉴性。

 

8. 重构系统以减法思维优先
在软件系统设计、开发、重构等工程活动中，能做减法的绝对不要做加法。当系统存在问题、需求变化等，多挖掘系统本身的可能性，重构不等于添加模块，增加属于惯性思维，添加任何代码模块或其它都将导致新的问题出现和面对。要让系统的架构简单、清晰、可扩展、稳定、高内聚低耦合，资源利用率最大化，事件扰动最小化，....

要对代码做减法，要尽可能减少功能，如有疑问则将其删除/注掉。许多功能可能从未使用，只需为其留一个扩展接口即可。可结合系统需求，有效合理使用一些设计思想、模式可使得程序结构更加合理，代码更加清晰、消除冗余，减少代码的坏味道等等。

 

9. 减少平台架构内的动态性
动态的东西难于捕捉，系统运行时亦是动态。但对于初始能明确的使用方式，接口形态，基础数据、配置参数，交互方式等，要避免产生更多变化。譬如，系统在初始就可以声明约定明确某个信息的唯一性，但一定要在唯一基础之上产生唯一的 ID, 因为ID是动态生成的，后续对 ID来产生强依赖必将导致系统可扩展性存疑，带来模块之间的强耦合性。

 

10. 规避系统架构的过度设计
架构设计时常会在某些方面过度设计，为了一些根本不会发生的变化而进行一系列复杂的设计，这样的设计就叫过度设计，往往会带来资源的浪费并且会增加开发的工作量或难度。系统需要考虑扩展性，可维护性等，但切忌过度设计。需要站在顶层设计高度来判断哪些设计是过度而规避之。

一个系统/平台的稳定常规来说都会经历一个震荡期，可能跨越数个迭代周期，但最后一定趋向平稳。如后续版本发布、商用投产仍未达到设计的平稳化，仍需不断进行重构才能适应需求，项目的失败注定只是时间问题。大的结构性方向错误必将导致后续的设计、开发迭代的复杂性，以及稳定、扩展性等的缺失，叠加更多的设计不合理可能。

 

11. 系统关联中间件的引入
项目引入中间件，不论该中间件是来自外部或内部自研，要对其功能有非常清晰的认识。在合理范围内使用，最小依赖原则，关键基础功能引入，对于高级特征的引入使用要权衡和综合评估。如果引入的中间件成为系统的关键支撑项，要最优化场景使用，同时要避免和警惕陷入使用误区（如某中间件提供核心功能为A，却被弱化A 而强化使用功能B职责）。中间件自身的依赖件是否与系统自身所集成部分重复，以复用为优先原则。

 

12. 重构的短期交付与演化方向
短期架构的重构如影响、腐化了整体架构，影响了扩展、稳定性等，要早发现早停止。架构的演变迭代要保持架构的大方向不变。架构的演变需要朝着职责单一、高内聚低耦合，以简单至上等原则去设计、演化和落地。

 

13. 架构的简单并非实现简单
说到这里，如果大家有一个误解，认为一个简单的架构也一定是容易设计的，那就错了。简单的架构并不等于实现起来也简单。简单的架构需要设计者花费大量的心血，也要求设计者对技术有很深的造诣。

 

14. 架构师职责并非止于蓝图交付
建筑设计师把设计好的蓝图交给施工人员，施工人员就会按照图纸建造出一模一样的大厦。可是，企图在软件开发中使用这种模式，这是非常要命的。架构师完全不去深入到第一线怎么知道“地”在哪？怎么才能将设计落的稳当。

 

架构设计师最易犯的一个问题就是设计和代码的脱离，即使在设计阶段考虑得非常完美的架构，在编码阶段也会出现这样或那样的问题，从而导致架构实现变得复杂。或者说，出现了坏味道，重构的技巧也同样有助于识别坏味道。让设计师参与核心代码的编写或进行代码审核，以确保编码者真正了解了架构设计的意图。

 

15. ....
架构设计的核心还是方法论，简单的设计并不等同于较少的付出。往往需要对现实世界的抽象，看似简单，但实现起来却需大量的业务和系统知识、很强的设计能力。因此，做到简单是程序员不断追寻的目标之一。

 

模式是一种指导，有助于做出一个优良的设计方案，达到事半功倍的效果。模式也是面向对象设计的基石，但模式常扮演着过度设计的角色。在设计之初少关注模式的适用，把精力放在如何满足需求上，而在设计迭代演进中重构到模式以扩展或演变为软件设计的基础，提升灵活性，避免导致过度或不充分的设计。



… … 

八. 最  后
 

软件设计是门艺术，是门划分边界的艺术。

软件设计不只属于程序设计，更像是一种艺术创作的思维 …



优秀的架构设计需要架构的目的和方向，

需要架构设计师的统筹全局、深入需求，需要抽象、演化式架构设计思维，

需要架构设计师的不懈努力和对细节的把握，以及充分的、前瞻性的预见性，

需要数据模型的准确、完整、规范、一致以及标准化，

需要清晰的边界划分，需要模块的职责单一，需要信息专家模式，
需要系统的高内聚、低耦合，通讯链路关系的最简化，



需要致力于能量消耗低限度，将消耗单位能量产生的熵提高到最大限度，

需要面向系统化组织的设计，需要团队的设计、协作… 



 ...... 



软件系统的品质，更多取决于架构的优劣；

决于思维设计的高度与深度：​抽象分治，高聚低耦，简单至上，模式加持，演化迭代, ...








可信构架，架构至简！
