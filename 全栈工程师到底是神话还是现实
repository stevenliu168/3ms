全栈工程师到底是神话还是现实？
 

1      什么是全栈工程师
 

下面是一个对于全栈工程师的定义

A Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology.

Good developers who are familiar with the entire stack know how to make life easier for those around them. This is why I’m so against silos in the work place. Sure, politics and communication challenges get in the way in large organizations. I think the point Facebook is going for with their hiring policy is, if smart people use their heads and their hearts, a better product gets built in less time.

 

也就说全栈工程师应该对于软件技术的各个层都很精通，比如下面这个“栈”，那么有多少人能够真正掌握每个栈层的组件呢？

http://cdn3.infoqstatic.com/statics_s2_20151222-0055/resource/news/2015/09/Stack-Ops/zh/resources/1.png

虽然如此，但是可能真的存在这种人，具备上面的全栈能力，也许有点差距，但是已经很厉害了。比如很多资深的程序员做了多年的开发，从Ops，DB，后端，前端等都做过，这些人可以说是全栈开发工程师，但是很难精通每个层面。

 

我们来看Chris Messina写到什么是全栈工程师：

 

https://pic4.zhimg.com/308085d7cbf0dfed3d87bd686d564143_b.jpg

 

就像“全栈工程师（full-stack engineer）”和“全栈创业（full-stack startup）”一样，全栈员工（full-stack employee）拥有超强的综合技能，有着无法估量的价值。他们可以在快速演进、变革的技术浪潮中如鱼得水。他们可以在事实稀缺、观点横飞的过剩信息中凭直觉做决定。全栈员工能够熟练运用设计语言。他们以和人讨论工程问题，能搞清楚算法、编程，也能理解前端的等级和后端的等级根本不是一回事。虽然他们可能并不亲自编程，但他们知道GitHub、StackOverflow都是做什么的。如果必要，他们会暴力破解一段“复制粘贴”的脚本，在CSV文件中进行基础分析。他们是最新锐的社交应用的用户，深谙自我推广之道。全栈员工对新的想法、最棒的实现路径、提升生产力和与愉悦度的事情有着“贪得无厌”的胃口。

 

 

2      我们真的能成为全栈工程师吗
我觉得真的要精通栈的各个组件，那么这样的全栈工程师基本是不存在的，真正的全栈工程师应该是如下的：
a genuine interest in all software technology. （对所有的软件技术抱有一种真挚的兴趣）。

 

只有保持了对技术的兴趣，只有这种追求技术的态度，才能在成为FSD的路上。

闻道有先后，术业有专攻，每个人精通的东西是不一样，有人专注于前端，有人专注于后端。我们只有在学习和工作中不停地扩展自己的领域，跨过技术的门槛，才能学习到更多的东西，掌握更多的东西。

 

 

 

只要你拥有下面品质和技能，你就是一个FSDer：

1.       对所有的软件技术抱有一种真挚的兴趣。 这是一种态度，这个态度就决定了你在技术道路上宽度和广度有多大。

2.       跨平台，多框架，多语言之间的迁移能力。 如果你不会主流的面向过程，面向对象和面向函数编程，那么你开发的时候是有局限性的，你可能因为语言本身的缺点导致系统在部署，扩展和性能上出现不可补救的问题。

 

在一个业务层面变化很小，但是部署的平台变化可能很快， 今年部署在Ruby on Rails上，以后就要部署在JVM上。该开始是使用.NET编写，后面就要使用Java。刚开始是网页版，后面就要做成手机APP版。如果我们不具备这些语言和架构的快速切换能力，难道换一个部署就是换一批程序员吗？

3.       需求分析，需求设计，开发，测试。这些开发流程都要熟悉， 尤其对于软件开发来说，需要学会需求分析，需求设计（包括架构设计和模块设计），测试（关键是LLT）。

4.       注意基础知识的积累，一个人的精力是有限的，他是不可能掌握所有的知识体系的（不排除天才级的任务），这个时候更需要学习一些基础知识，看到一个本质的东西，很多新的技术都是新瓶装旧酒，底层的理念都是相同的，只有这样才能快速的了解和掌握新的技术。讲自己掌握的知识进行系统化和体系化。

5.       不要盲目追求新的技术，新技术不一定具有实用价值，我们需要学习的那种具有一定生态圈，具有一定生命力的技术。不要盲目追求技术的广度，对于自己掌握的东西要扎根知底。当你精通一些技术知识以后，是有必要去学习新的东西，开扩展自己的思维，扩充的眼界，但是不能做到“伪全栈”，啥都是了解，没有精通的。

6.       沟通合作的能力。随着社区式编程，Devops和微服务的兴起，编码人员之间的沟通交流尤为重要。

 

 

3      公司和组织应该怎样看待全栈工程师
现在华为公司内部也都在提全栈工程师，每个部门都希望自己的员工成为全栈工程师，成为全能手，一个人能搞定一个项目。这个其实是错误的，这种很容易让人工敷于表面技术，不深入研究技术，盲目追求广度。

 

我觉得公司和企业追求FSD是没有问题的，但是应该注意下面两点

1.       有一个全栈工程师的标准

有一个比较客观的的全栈工程师的标准，这样才能起到一个指引的作用，否则会让员工盲目追求全栈工程师，导致技术浮夸，根基不稳。

2.       根据具体的项目和具体的时期对全栈工程师有不同的要求

比如现在有一个大型的后台服务器系统要开发,  你找一个精通前端UI，后端C/C++/Java，底层数据库和Linux和硬件的全栈工程师有点大材小用，应该根据当前的业务技术栈和后续的技术发展来决定员工需要具备什么样的技术栈。

3.       通过全功能团队来提升团队作战能力，弥补开发人员之间的技能差异，提升整体团队的技能和作战能力。
