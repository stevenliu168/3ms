单元测试中测试替身（Test Double）模式策略讲解与使用（Fake, Stub, Dummy, Mock,Spy）
日期：2016-01-28 09:12浏览：1194评论：2
单元测试中测试替身（Test Double）模式策略讲解与使用（Fake, Stub, Dummy, Mock,Spy）

 

在单元测试中有很多用于测试目的的对象（包括fake, stub, dummy, mock, spy和double），这些对象可以提高单元测试的效率，但是这些对象之间又有区别，并且为什么需要这么多种类的对象，这些对象应该怎么选择？

 

1      为什么在测试阶段需要这些对象
1.1      性能
实际的对象包含缓慢的算法和巨大的计算量，可能影响测试性能。测试应该是非常快速，不阻塞程序的正常运行，从而早发现问题。最坏的情况是一个在开发人员必须部署和运行整个应用程序才能测试一个用例。

1.2      状态
有些测试场景在测试中是很难发生的，比如race conditions，网络故障等。

1.3      非确定性
有时候需要测试和一些和真实环境交互的组件，比如传感器的。

1.4      实际对象不存在
可能某个团队还没有完成开发，你需要某个对象还无法实例化。

 

2      Double Objects
Test double is the generic term that groups all the categories of objects that are used to fulfill one or several of the previous requirements. 

简单来说，Test Double可以翻译成测试替身，在单元测试时，使用Test Double减少对被测对象的依赖，使得测试更加单一，同时，让测试案例执行的时间更短，运行更加稳定，同时能对SUT（软件单元测试）内部的输入输出进行验证，让测试更加彻底深入。

 

Test Double这个概念是Gerard Meszaros提出来的，Test Double包括下面五种Object类型。

·         Test stub (used for providing the tested code with "indirect input")

·         Mock object (used for verifying "indirect output" of the tested code, by first defining the expectations before the tested code is executed)

·         Test spy (used for verifying "indirect output" of the tested code, by asserting the expectations afterwards, without having defined the expectations before the tested code is executed)

·         Fake object (used as a simpler implementation, e.g. using an in-memory database in the tests instead of doing real database access)

·         Dummy object (used when a parameter is needed for the tested method but without actually needing to use the parameter)



 

3      Dummy Object
Dummy Objects泛指在测试中必须传入的对象，而传入的这些对象实际上并不会产出任何作用，仅仅是为了能够调用被测对象而必须传入的一个东西。

使用Dummy Object的例子：

public void testInvoice_addLineItem_DO()

{

      ﬁnal int QUANTITY = 1;

      Product product = new Product("Dummy Product Name",

                                    getUniqueNumber());

      Invoice inv = new Invoice( new DummyCustomer() );

      LineItem expItem = new LineItem(inv, product, QUANTITY);

      // Exercise

      inv.addItemQuantity(product, QUANTITY);

      // Verify

      List lineItems = inv.getLineItems();

      assertEquals("number of items", lineItems.size(), 1);

      LineItem actual = (LineItem)lineItems.get(0);

      assertLineItemsEqual("", expItem, actual);

}

 

4      Test Stub
测试桩是用来接受SUT内部的间接输入(indirect inputs)，并返回特定的值给SUT。可以理解Test Stub是在SUT内部打的一个桩，可以按照我们的要求返回特定的内容给SUT，Test Stub的交互完全在SUT内部，因此，它不会返回内容给测试案例，也不会对SUT内部的输入进行验证。

Test setup that uses a test stub

实例代码如下：

public class AnotherComponentStub implements AnotherComponent {

 

    public Integer inc(Integer param) {

        return null;

    }

 

}

 

public class CUTTest {

 

    public void testIncWhenAnotherComponentReturnsNull() {

        //Without any modification of the CUT implement, this would raise an exception

        Assert.assertEquals("inc(3) != 4", 4, new CUTImpl(new AnotherComponentStub()).inc(3, 1));

    }

 

}

5      Test Spy
Test Spy像一个间谍，安插在了SUT内部，专门负责将SUT内部的间接输出(indirect outputs)传到外部。它的特点是将内部的间接输出返回给测试案例，由测试案例进行验证，Test Spy只负责获取内部情报，并把情报发出去，不负责验证情报的正确性。

 

Test setup that uses a test spy

 

实例代码如下：

public void testRemoveFlightLogging_recordingTestStub()
            throws Exception {
      // Fixture setup
      FlightDto expectedFlightDto = createAnUnregFlight();
      FlightManagementFacade facade =
            new FlightManagementFacadeImpl();
      //    Test Double setup
      AuditLogSpy logSpy = new AuditLogSpy();
      facade.setAuditLog(logSpy);
      // Exercise
      facade.removeFlight(expectedFlightDto.getFlightNumber());
      // Verify state
      assertFalse("ﬂight still exists after being removed",
                  facade.ﬂightExists( expectedFlightDto.
                                            getFlightNumber()));
      // Verify indirect outputs using retrieval interface of spy
      assertEquals("number of calls", 1,
                   logSpy.getNumberOfCalls());
      assertEquals("action code",
                   Helper.REMOVE_FLIGHT_ACTION_CODE,
                   logSpy.getActionCode());
      assertEquals("date", helper.getTodaysDateWithoutTime(),
                   logSpy.getDate());
      assertEquals("user", Helper.TEST_USER_NAME,
                   logSpy.getUser());
      assertEquals("detail",
                   expectedFlightDto.getFlightNumber(),
                   logSpy.getDetail());
}

 

6      Mock Object
Mock Object和Test Spy有类似的地方，它也是安插在SUT内部，获取到SUT内部的间接输出(indirect outputs)，不同的是，Mock Object还负责对情报(indirect outputs)进行验证，总部(外部的测试案例)信任Mock Object的验证结果。

Test setup that uses a mock

Mock的测试框架有很多，比如：NMock，JMock， Mockito等等。如果使用Mock Object，建议使用现成的Mock框架，因为框架为我们做了很多琐碎的事情，我们只需要对Mock对象进行一些描述。比如，通常Mock框架都会使用基于行为(Behavior)的描述性调用方法，即，在调用SUT前，只需要描述Mock对象预期会接收什么参数，会执行什么操作，返回什么内容等，这样的案例更加具有可读性。比如下面使用Mockito的案例：

 

public class CUTTest {

 

  @Mock

  AnotherComponent ac;

 

  @InjectMocks

  CUT cut = new CUTImpl();

 

    public void testIncWhenAnotherComponentReturnsNull() {

      Mockito.when(ac.inc(Integer.MAX_INTEGER)).thenReturn(Integer.MAX_INTEGER + 1);

      Mockito.when(ac.inc(3)).thenReturn(3);

      Mockito.when(ac.inc(123)).thenReturn(124);

     

        Assert.assertEquals("inc(Integer.MIN_INTEGER) != Integer.MIN_INTEGER + 1",

                Integer.MIN_INTEGER + 1, cut.inc(Integer.MIN_INTEGER, 1));

        Assert.assertEquals("inc(3) != 4", 4, cut.inc(3, 1));

        Assert.assertEquals("inc(123) != 124", 124, cut.inc(123, 1));

 

        //Verifies that the method inc of AnotherComponent was called with parameter Integer.MAX_INTEGER

        Mockito.verify(ac).inc(Matchers.eq(Integer.MAX_INTEGER));

        //Verifies that the inc method has been called three times.

        Mockito.verify(ac, Mockito.times(3)).inc(anyInt());

    }

}

7      Fake Object
Fake Object和Test Stub有点容易混淆，有的直接说Stub就是更简单的Fake，

不同的是，Fake Object并不关注SUT内部的间接输入(indirect inputs)或间接输出(indirect outputs)，它仅仅是用来替代一个实际的对象，并且拥有几乎和实际对象一样的功能，保证SUT能够正常工作。实际对象过分依赖外部环境，Fake Object可以减少这样的依赖。需要使用Fake Object通常符合以下情形：

1.     实际对象还未实现出来，先用一个简单的Fake Object代替它。

2.     实际对象执行需要太长的时间

3.     实际对象在实际环境下可能会有不稳定的情况。比如，网络发送数据包，不能保证每次都能成功发送。

4.     实际对象在实际系统环境下不可用，或者很难让它变得可用。比如，使用一个依赖实际数据库的数据库访问层对象，必须安装数据库，并且进行大量的配置，才能生效。

一个使用Fake Object的例子是，将一个依赖实际数据库的数据库访问层对象替换成一个基于内存，使用Hash Table对数据进行管理的数据访问层对象，它具有和实际数据库访问层一样的接口实现。

Test setup that uses a fake

实例代码如下：

 

public class AnotherComponentFake implements AnotherComponent {

 

    public Integer inc(Integer param) {

        return param + 1;

    }

 

}

 

public class CUTTest {

 

    public void testIncWhenAnotherComponentIsFake() {

        CUT cut = new CUTImpl(new AnotherComponentFake());

        Assert.assertEquals("inc(3) != 4", 4, cut.inc(3, 1));

        Assert.assertEquals("inc(123) != 124", 124, cut.inc(123, 1));

    }

}

 

8      扩展
http://martinfowler.com/articles/mocksArentStubs.html

Martin Fowler在2007写了这篇博文，重点说明了mock和stub的区别, 也定义了其他几种Test Double。

§  Dummy objects are passed around but never actually used. Usually they are just used to fill parameter lists.

§  Fake objects actually have working implementations, but usually take some shortcut which makes them not suitable for production (an in memory databaseis a good example).

§  Stubs provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test. Stubs may also record information about calls, such as an email gateway stub that remembers the messages it 'sent', or maybe only how many messages it 'sent'.

§  Mocks are what we are talking about here: objects pre-programmed with expectations which form a specification of the calls they are expected to receive.

 

在这里stubs的解释也就是现在维基百科上面定义，简单的说，stub就是在提供中提供罐装答案的对象，不响应外界外边任何对于测试的编码。反正这个定义不是太清晰，我觉得最直观的定义就是：

Stub – an object that always returns the same canned response. May also hold some dummy state。
