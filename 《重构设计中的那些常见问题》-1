http://3ms.huawei.com/km/blogs/details/10218413

《重构设计中的那些常见问题》
日期：2021-04-26 03:46浏览：2016评论：2
Version:0.10, last modified: 2021/04/26

Author: scott.zhang

 

1.    重构介绍

2.    过度的设计

3.    滥用设计模式

4.    设计的不足

5.    代码的坏味道

6.    开发者测试

7.    重构规则谈

最 后

 

 

当开发人员只为短期目的而编写代码时，经常没有完全理解架构的整体设计，于是代码逐渐失去了自己的结构。代码结构的流失有累积效应，越难看出代码所代表的设计企图，就越难以保护其设计，于是设计就腐败得越快。

 

糟糕的系统必定充斥着不少问题，各种坏味道。譬如，冗余的代码，不必要的变量，太多的参数，长的方法，长的类，太多的条件或不必要的循环等等。同时也隐含着设计的过度或设计不足，以及设计模式的滥用。

 

重构被视为是如同“软件开发中的空气和水”一样的技术，现实中比比皆见对重构的错误理解和应用。不知道重构使用的正确场合，总是等到代码已经腐化到积重难返的时候才想起重构；面对一堆的代码坏味道，没有选择标准、无从下手；修改代码的过程总是大刀阔斧地将代码置于危险的境地 …  

 

本文从重构的视角来揭示设计中的那些常见问题，诠释那些你不可不知的重构规则。用以发现、识别、消除系统中的坏味道，提升软件质量 …

 

1.   软件重构介绍

重构是对软件内部结构的一种改善，目的是在不改变软件的可见行为的情况下，使其更易理解(尽可能简单的表达逻辑)，修改成本更低，新的改动不会危及现有行为。是用微小的步伐修改程序，过程中也能够很容易的发现程序中的错误。

 

重构的动机：

易于添加新功能；改善现有设计；对代码理解更透彻；提高工作的趣味性；

重构的要点：

l  提高代码的可读性：好的程序员能够编写易于理解的代码；

l  保持代码整洁：要持续地去重构，除重复，简化和澄清代码；决不容忍代码的破窗；

l  循序渐进：在重构过程中，要坚持小步前进；每步小的重构，都要通过测试用例；

 

简单设计四原则
简单设计四原则是对’什么是好的软件设计’最好的定义,可用来衡量重构的目标或评判重构的收益。

1).通过全部测试; 2)没有重复; 3)程序表达意图，易于理解. 4)没有冗余

 

四条的重要程度依次降低,第一条定义了好的软件首先应该通过所有测试，即正确满足所有功能需求.而重构的目标中最基本的就是”不改变软件的可观察行为”，也就是说:

1) 重构后的软件不能破坏原来所有测试

2) 重构应该消除重复，降低软件修改成本;

3) 重构应该让程序显示表达意图，提高软件可理解性;

4) 重构应该消除冗余，降低软件不必要的复杂度.



 

任何违反四原则的代码都应是重构的目标,譬如:

l  代码很容易出现Bug，导致测试失败

l  代码存在知识重复使得不易修改

l  代码写的晦涩非常难以理解

l  代码存在过度设计，存在冗余导致复杂

… …

 

2.   过度的设计

软件设计的目的是满足需求，这个需求是多维度的综合: 业务要求，性能，可靠性，安全等。过度设计，就是在某个或者多个维度上超出实际需求的裕度，是指代码的灵活性和复杂性超过所需，臆测将来的需求，进行过多的面向未来的设计，这听上去很合理，但这需要你未卜先知。过度设计也往往发生得隐蔽和普遍，一般被认为‘过度设计’ 的系统都是设计的不好。

 

设计的一切应以需求为准。过度设计也并非实现了太多的功能，而是为了实现太多觉得会出现，结果没有出现的需求，从而导致系统架构过于庞大复杂。因此，通常一个程序是否被过度设计，看界面是无法分辨，常在设计审查阶段被评估出。另外，一旦想做的超出设计人员水平，或实现出来太过复杂，从而导致问题多，实现偏离、效率低下。

 

2.1  过度设计的问题

l  过度设计下的代码会影响生产率，当其他人接手一个过度设计的方案时，必须花上一些时间了解设计中的许多微妙之处，然后才能自如地扩展或者维护它

l  过度设计总在不知不觉中出现，许多架构师和程序员在进行过度设计时甚至自己都不曾意识到。而当公司发现团队的生产率下降时，又很少有人知道是过度设计在作怪

l  程序员之所以会过度设计，也许是因为不想受不良设计的羁绊。不良的设计可能会深深地融入代码之中，对其进行改进不啻于严峻的挑战。

l  … …

 

2.2过度设计的甄别

一般人其实在完成一个系统之前较难认识到自己是否存在过度设计，这需要丰富的系统设计经验、抽象能力等。如果存在下述情况，需警惕过度设计：

l  违反了简单设计原则

l  设计决策以是否面向扩展为首要衡量标准

l  解决问题的第一思路是设计模式

l  相信软件质量会随着使用的框架、库的增加而提升

l  追求每一个类、层的可替换性

l  所有的类和类之间的关系都通过接口

l  如果没有类图等外在因素的辅助，很难看懂你的代码

l  大量零散接口的引入并强调是面向接口编程

l  不必要的文件配置类

l  … …

对外的接口暴露太多、使用了太多的动态加载、反射，应用了太多的设计模式, 过度的封装、一堆继承、接口和无用的方法,…

 

过度设计的示例，譬如

1)一个床就是一个长方形的木板组合，满足人睡觉的需求，非得设计一个床下面可以养鱼，就是过度设计了。

2)在建一座平房的时候，当连砖都没准备好的时候，就在想平房将来要怎么扩建成百层高的摩天大楼，而忘了首先要去找砖。

3) 一个网站预计百来人访问，给个能支撑1000人的设计就足够，结果设计出一个百万访问量的架构来。

 

又如，要做一个功能模块，但考虑到系统里还有几个未完成的模块和要做的东西类似，所以决定为此额外做一些抽象和封装，以便将来复用。然而，到后来开发那些相似的模块时才发现，可能是由于抽象不足或抽象错误，不得不重新修改之前的封装才能完成复用，导致最终成本实际上还不如不做；或者发现复用的部分所降低的成本实际上还不如包装花费的成本。

 

以上这些都是最常见的过度设计的例子。程序员在掌握了一些基本的设计能力之后，最常见也是最难克服的设计问题往往就是过度设计。

 

2.3  如何避免设计的过度

过度设计容易出现在规模较大的项目，如不尽可能预先设计，易造成返工及资源浪费。设计的适度，依赖于架构师的经验和需求的稳定性，不会有一套明确按部就班的方法去避免过度设计,但一些指导原则可以有助于让设计趋向合适：

 

l  弄清楚需求，不要臆想，在其基础上适当放宽，别花费太多精力在未来一年内基本不会提出的需求上；

l  记住设计是为了满足需求，不要为了设计而设计，简单实用永远是最好的

l  去掉某个中间层会发生什么？

l  如果一个实现有多种实现方式，尽量选择容易实现的方式；

 

l  对参与过并经实践证实”考虑不周“和”过度设计“的案例多做总结

l  多请教有经验的程序员或架构师

l  不论多简单的项目，先做设计，再开工(避免走向过度设计的反面)

l  理解各种经典的设计模式。可以在充分理解后判断在某种情况下使用某种模式是过度设计,但不建议在感觉难以理解的前提下认为所有使用这种模式的企图都是过度设计

l  在无任何经验可借鉴下，不确定是否必要，且工作量大或不易理解的灵活性设计一律砍掉，工作量小且不需引入新概念的灵活性设计尽量保留。

l  不要容忍已经出现的重复代码，发现重复代码随时通过重构技巧改为单点

l  在编写新代码过程中尽可能把旧代码中的“臭味”部分重构掉

l  尽可能保证较高（85%）的单元测试覆盖率，保证重构的效率。但对于一些小型项目或本来就没有单元测试的遗留项目，有时“高单元测试覆盖率”本身就被认为是”过度设计“。

 

注，在设计过程中使用80%的时间处理20%的不常用的功能，而80%的主要功能，由于在设计阶段考虑不周，导致问题百出。以此思路考虑问题，再简单的项目也会失败。

 

3.   滥用设计模式

设计模式是一套被反复使用，经过分类编目的代码设计经验的总结，是软件设计的某些特定场合的某些问题的解决思路。是前人经过大量的实践，总结出来的无论从效率、扩展性、复用性、可靠性等方面都显现出优势的解决思路。

 

所有的理论在应用到实践中的时候，都必须对具体问题做具体分析。没有经验的设计师对设计模式盲目崇拜和过分追求，不是全力以赴地为所面临的问题找出最好的设计，而是将气力放在如何尽可能多和频繁地使用模式。他们认为只要越多使用了这些模式，就可保证一个设计方案是好的设计，由此导致很多无意义的设计，设计和系统的需要严重脱节。

 

在GoF提出的23种设计模式上，从辩证的角度来看，一个设计模式在特定的场合下是积极且优势显著，但在偏离最佳适合场景时，它本身就转变为一个反模式，从而导致不良影响。易使设计人员在工作中犯过度设计的错误。

 

3.1模式滥用的识别

行动、过程和结构中一些重复出现，乍一看有益但最终得不偿失的模式；

在实践中证明且可重复的有清晰记录的重构方案；

有的模式会导致更多的“包装”类被制造出来，一旦处理和其他组件的沟通，这可能会导致复杂度和开发时间的增加，并降低运行时的性能。

 

模式存在场景适应性，以下为错误思维：

l  在条件语句和策略模式进行取舍时，总是优先选择策略模式。

l  在一个类聚合其它类，或者需要给某个类添加行为时，总是使用组合或装饰模式；

l  凡是出现整个模块只有一个对象的类时，总是选择Singleton模式；

l  只是想开异步线程的功能，非要使用观察者模式;

… …  …

 

譬如单例模式

l  带来隐式依赖引起的结构不清晰；

l  多个实例的限制，被定义成单例的类并不是非得单例不可。有的只是为了在引用时方便，把单例当全局变量一样，拿来即用，从而免去设置实例间引用关系的代码；

l  单例类的扩展限制，没法通过继承的方式扩展。想给单例类扩展点接口，只有直接修改那个类，无法用它来生成一个更丰富的子类；

l  程序结束时的内存泄漏，有的单例代码未有实例释放控制这一段，这使内存泄漏成了必然结果。

以上主要是针对大多数单例模式的实现而言，单例模式是一种限制性模式，如果并不需要限制，则不需要使用该模式。

 

3.2合理使用设计模式

设计模式其实是中性的，无所谓好坏。有些模式应用的少一些，有一些模式在某些场景下还是反模式，比如Singleton。 有的其实非常简单，比如模板方法模式；有些比较复杂，比如访问者模式。简单的模式比复杂的模式用的更多。 

 

有人说小项目中没必要设计模式。多小的项目算小项目呢，其实只要经过良好的设计，一个项目也可以不包含任何设计模式，也可能包含多个设计模式。

 

在使用设计模式之前，一定要搞清楚问题是什么，选用的设计模式解决什么样的特定设计问题。将模式理论与具体系统需求情况相结合，不要为了用模式而模式，对于模式的不了解，不了解模式所要解决的问题，不了解模式的特点及适用范围，不了解它们之间的区别，造成了设计方案的失误。模式是用了一大堆，却没有得到应有的效果，代码的维护还是牵一发而动全身，也许还不如不使用模式的效果。

 

【软件系统设计之专题六】- 重构@设计之模式综述

 

4.   设计的不足

设计不足与过度设计相对，虽然是两个相对的概念，但设计不足和过度设计绝大多数时候都是一起出现的，都是最常见的设计问题。设计不足不仅常见于新手，老手也常犯。甚至还有一类老程序员在经历过多次过度设计的打击之后，转向另一个极端，否定抽象封装的作用，走上“反设计”的道路。

 

设计不足意味着系统复用性、扩展性和灵活性差，系统僵化，不能灵活的应对将来的需求变化，或者将来修改和维护的代价和成本会很高，简言之，设计没到位被视为设计错误。完成同样一件事，设计欠佳的程序往往需要更多代码。因此，改进设计的一个重要方向就是消除重复代码，通过投入精力改善内部设计，增加了软件的耐久性，从而可以更长时间地保持开发的快速。



生产率曲线用于显示软件交付的挑战之一

 

4.1设计不足的因素

设计不足比设计过度要常见，原因有多方面，譬如：

l  没有设计观念，写代码时写到哪想到哪

l  代码随意堆砌，可见性、生存期使用混乱

l  时间不足

l  经验有限，设计能力有限，在何为好的软件设计方面知识不足

l  设计方案无法应对合理的需求变更，维护成本提高

l  被要求在既有系统中快速地添加新功能

l  被迫同时进行太多项目

l  … …

 

4.2减少或避免设计不足

以满足需求为出发点，不追求完美的永恒的架构，只追求演进式设计过程，通过迭代不断的调整和优化。提高理论认识，多与他人讨论设计方案以减少设计不足。

 

先设计后编码，可惜知易行难。先以设计过度为目标，当能意识到已经过度的时候再来纠正，从中提高对‘适度的设计’的理解。如果不具备设计过度的能力，往往也不太清楚什么是‘适度的设计’，从过度设计往下降会更容易，但从设计不足往上升却很难。所以还是要大胆的去设计，然后才能对设计进行评价。

 

过度设计和设计不足的平衡问题没有很好的解决办法，只有依靠经验的积累和不断的总结思考。如何把握这个度是最能考验程序员的经验和价值的问题之一。
