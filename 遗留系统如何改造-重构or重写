http://3ms.huawei.com/km/blogs/details/2223829

遗留系统如何改造：重构Or重写？

 

最近，云核心网某个产品由于架构比较老化，希望通过架构优化的方式来进行整改，但是我们在重写还是在重构上面出现了一些分歧， 我简单的分析一下重构和重写该如何抉择，如果有什么问题，请大家指正。

1      重构，一个被滥用的术语
重构(Refactoring)这个词最初由Martin Fowler 和 Kent Beck给下的定义，它是一种修改，使软件的内部结构更容易理解，在不改变软件的可见行为方式前提下使软件更容易变更。

 

 

重写（Rewrite），也有成为重建（Rebuild）, 一般伴随着重新设计，也可能伴随着重构，除非你完全抛弃以前的东西。

 

过度使用的“重构”这个词汇， 会让决策者害怕重构，其实重构是很简单，比如消除重复代码，消除冗余代码，修正代码规范，提取方法和类等等，这些都是重构，在几分钟可能就可以完成的工作。

但是现在只要是重新做一件事情，都叫重构，比如新增加一个特性分支， 增加日志，架构调整都叫重构，这样只会让大家误解重构，越来越害怕重构。

 

2      代码/架构优化的缘由
特性越加越多，系统复杂性越来越高。

代码中有很多权宜之计，也就是我们所说的特殊处理。

开发人员在轮换，员工流动比较大。

 

我们无论是采用重构还是重写都是为了改善我们代码和架构，是代码阅读起来更加清晰，软件架构保持高内聚低耦合。

3      遗留系统优化是采用重构还是重写
3.1      重构和重写都会导致当前系统出现混乱
重构是一个增量的活动，对于系统的局部进行优化，对于系统的影响也是局部的，相对来说比较好控制一点；反观重写，对于当前系统是一个颠覆性的修改，要想稳定下来，耗费的时间一定会更长。

从这个维度来讲：重写更具有风险，代价也是更大的：

重写需要同时维护老的代码分支，还有投入一部分人力进行新的系统的编写，这个对于团队和项目计划制定者都是一个挑战。人力如何调整，项目周期如何调整这都需要决策者做出抉择。

重写的风险比重构要高，可能很长的时间内系统都会出现很多奇怪的问题：兼容性问题。

 

Joel on Software ：It's important to remember that when you start from scratch there is absolutely no reason to believe that you are going to do a better job than you did the first time.

你不能确定你重写出来的东西比以前好，说不定只是解决一个问题却引入了另外一个问题。

 

3.2      重写比重构更容易解决历史技术债务
如果你坚持重构，那么重构一定是最好的选择，因为风险更小，但是前提是一直在坚持。就像我们说要做UT，如果从一开始就坚持写UT用例，并且结合TDD来改善设计，那么要实施是很容易的，但是如果我们开始压根就没有计划做UT，等到系统已经完成才开始考虑，那么就会非常困难的。 并且重构也是一个技术活，如果一个团队没有掌握好重构相关技术，那么可能会达不到效果，出现一些挫败感，弄得后面提起重构也没什么激情了。

 

重写的好处的就是重新开始，你可以确保你再一开始的设计就是正确的（假设是这样的，说不定重写只是跳入一个新的坑囧）

 

3.3      重写和重构有一个共同的根本：精通业务模型
重构是一定要了解代码的业务的，才可以实施重构。

重写一般都涉及到业务模型的重建，对于业务模型要非常了解，才有可能重写这个系统。

 

只是重构要求的业务模型是局部的，重写要求的业务模型是全局的。

3.4      重写的团队如何保证新老系统的融合
重写的一个风险就是需要投入一个新的团队来开发新的系统，老的系统继续维护与上网支撑。这里就会出现两个问题：

l  两个团队的员工心理如何平衡，老员工心理一定是不爽的，凭啥你们那几个人做的东西就可以完全替换我做的东西，这个矛盾一定是存在的。这个问题也许无解，更重要的是上层领导的支持。

l  新的系统将如何保证追赶老系统新开发的特性，新系统如何尽快为老系统提供服务，为客户产生价值。这个不解决，你的重写计划要么被夭折， 要么一直要死不活地做下去，永远无法合入主干版本。

 

3.5      重写往往要求更优秀的开发人员和团队
重写需要业务人员和开发人员鼎力配合，业务人员要从全局的角度是重新审视系统的业务模型， 开发人员也需要去了解整个业务领域模型，并且要通过编程语言把这个领域模型进行实现，同时要去理解老代码。

 

4      总结：如何抉择重构还是重写？
从收益比来分析：

 

重构是优化系统最好的方式，关键在于持续重构，收益比是最高的，通过遵照演进式设计，在合适的时候通过合理的重新设计，保持代码和架构的先进性。

 

如果由于历史原因，没有持续重构优化，没有依照演进式设计来进行系统演化，出现了下面极大程度的腐化：

l  架构还比较清晰，但是代码的设计出现问题，模块划分职责不清，这个时候建议重构；

l  架构或者技术方向不满足新需求，比如单块架构向云化架构后者服务化架构转型，过程化设计向面向对象/面向数据转型；这个时候一定是需要重新设计的，重写和重构混合运行。

 

还有另一个维度来分析：

l  如果系统的所有的业务逻辑都很清晰，但是写的代码却无法理解，或者实现技术需要更新，那么可以考虑重写。因为这个时候业务建模和业务场景是可以hold住的，不会出现重写以后出现功能丢失或者兼容性问题。

l  如果系统的业务逻辑已经没有多少人能够说清楚，代码的意图已经不明确了，这个时候建议重构。这个时候重写的风险就比较高了，业务场景都很难系统分析出来，重写很容易破坏老功能和出现兼容性问题。
