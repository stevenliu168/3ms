http://3ms.huawei.com/km/blogs/details/8500991

SOLID原则精解之依赖倒置原则DIP
日期：2020-06-30 08:58浏览：6019评论：12
依赖倒置原则（Dependency inversion principle，DIP）
高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。
抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。
在我们的程序中，一般都是具有比较清晰的层次定义的，每个层次都会使用下一层提供的服务，比如这样的：
image.png
这样看起来很OK，每一层可能都是高内聚的，层之间也定义了清晰的API接口。但是一旦Utility Layer发生变化，可能会一项Mechanism Layer，甚至传递到Policy Layer。当高级模块依赖于低级模块时，对低级模块的更改可能会对高级模块产生直接影响，而这可能需要依次更改。此外，依赖于低级模块的高级模块变得难以重用，而事实恰恰相反（我们希望高级模块能够在不同的上下文中重用）。

如果我们按照这样的方式来设计层次结构，是不是就解决了高层模块对于低层模块的依赖？这就是依赖倒置原则的精髓所在：高层不依赖低层，低层反而依赖在高层中声明的抽象服务接口，高层和低层都是依赖于抽象。
image.png

下面我们就来详细解释一下依赖倒置原则：

什么是倒置
我们先来看一下是什么是倒置？
image.png

上图中左边，ClassA依赖ClassB，比如ClassA里面直接创建了ClassB类实例，并且调用了其方法， 这个时候我们说module A依赖module B。箭头是从左到右。并且ClassA能够调用ClassB的接口定义是module B定义的。
上图中右边，ClassA依赖的本模块的Interface，ClassB实现了Interface，也就是ClassB是依赖Interface，这个时候我们说module B依赖module A。箭头是从右到左。并且并且ClassA能够调用ClassB的接口定义是module A定义的。

所以，依赖倒置原则中倒置的含义就是依赖关系和接口所有权的发生了倒置：

从module A依赖module B变成了module B依赖module A。
接口所有权从module B转变成了module A。
依赖倒置原则的解释
我们来看一个例子，需要实现Button对象来感知用户是否有按下操作，然后去打开和关闭灯。
通过简单建模以后就可以得到下面的实现:
image.png

public class Button {
    private Lamp lamp;
    public void poll() {
        if (...) {
            lamp.turnOn();
        }
    }
}
这个方案看起来是没有问题的，但是当我新增一种希望Button来控制的对象的时候（比如Motor）那么是很困难的。也就是说Button已经和Lamp发生强耦合，Button只能控制Lamp。 Lamp是可以被复用的，但是上层的Button是无法复用的, 新增一种设备以后Button是无法控制的，在实际场景中，上层的复用价值往往比底层更高。

如果按照依赖倒置的原则，我们首先要找到抽象，这个抽象就是高层的策略，也就是调用者的业务诉求：不随着具体实现细节的改变而改变的真理。，在这个例子中，Button只希望通过将检测开/关指令并且将指令传给目标对象，目标对象是谁，如何处理指令都无关紧要。所以我们通过这个思路改善了我们的设计：
image.png

通过这样的实现以后，Button不在依赖于具体的Lamp，只要设备是满足SwitchableDevice的契约的，那么Button就可以控制，这样Button这个高层策略就和具体的实现分离了。

面向接口编程
我们从前面了解到，我们通过开闭原则来分离了变化方向，但是分离以后怎么保证分离的模块和调用者是正交的，除了接口隔离原则减少依赖，就是靠依赖倒置原则来保证调用者是稳定，因为抽象是稳定的，实现是不稳定的。只要客户端是面向接口编程，那么接口的扩展变化，客户端是不用感知的。

避免不同级别层次结构的类之间发生意外耦合的最佳方法是使用抽象。不同级别中的每个类都应使用由下一个底层类实现的抽象接口。那么什么是稳定的抽象：
API的应该关注What，而不是How，站在需求的角度去定义API，而不是实现的方式去定义API。
image.png
所以，只要我们抽象出来的API是稳定，那么实现和Client就是正交的，相互不用感知变化。这其实也是解释了依赖倒置原则，Client和实现都是依赖抽象接口的。 所以面向接口编程就是依赖倒置原则的“本质”。

控制反转和依赖注入
前面我们通过依赖倒置以后，希望上层模块是面向接口编程，但是这里还有一个问题，就是抽象的具体实现应该怎么初始化，怎么传递给上层模块，如果还是由上层模块来进行对象构造，那么还是违背了依赖倒置原则。
image.png

比如上面的代码，我们通过依赖倒置，让PackageA不依赖于PackageB中的ClassB的定义，但是我在构造实例对象时又重新依赖了ClassB，那么相当于依赖倒置失败了。 那么该如何解决问题呢？
控制反转(Inversion of Control) : 与传统的流程控制相比，IoC就是调用者不去调用其他代码，而是其他代码反过来调用。 最常见的就是Spring的IoC容器，调用者不用主动去new对象，而是IoC容器来创建对象并且注入进来。

Inversion of control (IoC) is a programming principle. IoC inverts the flow of control as compared to traditional control flow. In IoC, custom-written portions of a computer program receive the flow of control from a generic framework. A software architecture with this design inverts control as compared to traditional procedural programming: in traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom, or task-specific, code.

Inversion of control is sometimes facetiously referred to as the "Hollywood Principle: Don't call us, we'll call you".

在面向对象中常见实现Ioc的技术有：

服务器定位模式（Service Locator Pattern）：比如JNDI
依赖注入（Dependency injection）
constructor injection：通过类的构造函数来注入
setter injection：通过setter方法来注入
Parameter injection：直接通过参数注入
Interface injection：依赖提供了带有依赖注入的接口，调用者实现这个接口就行。
Java的注解实现
依赖查询：通过配置文件，工厂方法等来获取类的实例
下面的代码是没有进行依赖注入的：

// An example without dependency injection
public class Client {
    // Internal reference to the service used by this client
    private ExampleService service;

    // Constructor
    public Client() {
        // Specify a specific implementation in the constructor instead of using dependency injection
        service = new ExampleService();
    }

    // Method within this client that uses the services
    public String greet() {
        return "Hello " + service.getName();
    }
}
我们可以构造函数进行依赖注入：

class Client {
  // Field needs to be accessed directly by callers for DI
  private Service service;

}
// Constructor
public Client(Service service) {
    // Save the reference to the passed-in service inside this client
    this.service = service;
}
也可以通过setter来进行依赖注入

// Setter method
public void setService(Service service) {
    // Save the reference to the passed-in service inside this client.
    this.service = service;
}
代码样例
我们具体来看几个例子：
有一个简单的需求，就是我需要把一段数据保存起来，可能保存在文件系统中，可能保存在数据库中，那么使用依赖倒置原则和依赖注入的实现代码如下：

C语言代码样例--函数指针
typedef int (*SaveDataFun)(char *buffer, size_t length);

int SaveDataWithFileSystem(char *buffer, size_t length) {
    // ...
    return 0;
}

int SaveDataWithDB(char *buffer, size_t length) {
    // ...
    return 0;
}
void SaveContext(SaveDataFun saveFun) {
    char* buffer = NULL;
    size_t length = 0;

    // prepare data

    int result = saveFun(buffer, length);

    // ...
}
对于上面的代码来说，SaveDataFun就是写数据的抽象，SaveDataWithFileSystem和SaveDataWithDB是两个具体的实现，遵从了SaveDataFun契约式。 最后在SaveContext的调用者上下文中是面向接口编程的，只看到了抽象接口，不关注具体的实现，并且实现是通过函数参数的形式依赖注入进来的。这样后续在添加下面的新的写文件方式，SaveContext是不用修改的。

int SaveDataWithNetwork(char *buffer, size_t length) {
    // ...
    return 0;
}
C++的实现，类与多态
class DataSaver {
public:
    virtual int Save(char *buffer, size_t length) = 0;
};

class FileSystemSaver : public DataSaver {
public:
    int Save(char *buffer, size_t length) override {
        // ...
        return 0;
    }
};

class DatabaseSaver : public DataSaver {
    int Save(char *buffer, size_t length) override {
        // ...
        return 0;
    }
};
void SaveContext(DataSaver& dataSaver) {
    char* buffer = NULL;
    size_t length = 0;

    // prepare data

    int result = dataSaver.Save(buffer, length);

    // ...
}
在上面的实现，我们使用了面向对象的特性，通过类和派生类来完成，在SaveContext只看到了基类DataSaver， 不关心具体的子类，这样DataSaver添加的新的派生类

Go语言的实现，interface
type DataSaver interface {
    Save(data []byte) error
}

type FileSystemSaver struct {

}

func (f FileSystemSaver) Save(data []byte) error {
    // ...
    return nil
}

type DatabaseSaver struct {

}

func (d DatabaseSaver) Save(data []byte) error {
    // ...
    return nil
}
func SaveContext(saver DataSaver) {
    var data []byte
    // prepare data

    err := saver.Save(data)

    // ...
}
我们一起看一下这几种实现：在不同的语言中，我们通过函数指针，类或者接口来进行抽象（在C++也可以使用模板来实现静态多态性），Client只针对抽象进行编程，具体的实现通过参数进行依赖注入，这样Client和具体的数据存储实现是正交的，耦合是稳定的，除非是抽象发生变化，否则两边独立变化是不影响另外一边的，这也达到了我们软件的目的：Client和实现之间的低耦合的，抽象是高内聚的，并且实现扩展是不用修改Client的。
image.png

软件架构设计中的应用
分层架构中的应用
image.png

上图是一个典型的分层架构，分层架构的一个重要原则是：每层只能与位于其下方的层发生耦合。分层架构也分为2种：
这个分层架构有一个问题，就是高层组件（比如用户界面层、应用层和领域层）依赖了低层组件（基础设施），这样基础设施的变化一定会影响上层所有的组件的变化，那么针对这种情况，我们可以通过依赖倒置来解决问题：
image.png

低层服务（比如基础设施层）应该依赖于高层组件（比如用户界面层、应用层和领域层）所提供的接口（即抽象），并且通过依赖注入将基础设施的实现注入到不同的层之间，这样基础设施层和高层就彻底解耦了，这个在六边形架构和Clean Architecture（整洁架构）中也会经常使用。

如果我们严格每一层进行依赖倒置的话，就变成下面的模型：
image.png

Clean architecture
image.png

Uncle Bob的Clean Arhitecture有一个依赖规则：源码中的依赖关系必须只指向同心圆的内层，即由低层机制指向高层机制。在实际的场景中，是会出现源码中的依赖方向系从内向指向用例层的，这个时候就需要使用依赖倒置原则和DIP来进行依赖反转了。

可测试性设计
当我们的系统中有外部依赖时，比如依赖数据库/硬件时， 是很难做LLT测试的，这个时候通过依赖倒置和DIP可以提高系统的可测试性，方便进行打桩测试。
image.png

总结
在传统的过程化设计中，上层代码的策略是依赖底层实现细节的，如果细节的变化就会影响上层策略的变化，这是一种糟糕的设计，不易于系统的复用和扩展。 我们通过依赖倒置原则和依赖注入很好的解决这样的问题，让上层和低层之间面向接口编程，尽可能让两者之间的耦合是稳定，这样上层和低层就可以独立变化和扩展，达到正交的效果。

image.png

参考资料
https://martinfowler.com/articles/dipInTheWild.html
https://martinfowler.com/articles/injection.html
