C++泛型与多态（2）：模板特化
作者：袁英杰

链接：http://www.jianshu.com/p/fdd7cfeb63e6

 

 


模板的特化（Specialisation）分为：

·         全特化（Full Specialisation 或 Explicit Specialisation）

·         部分特化（Partial Specialisation）

其中，部分特化一般被翻译为偏特化，但我认为部分特化是个和全特化对照的名字，更容易理解。

全特化与部分特华之间的区别非常简单：如果特化后的版本,

·         不再有模板参数，就是全特化；

·         仍然有模板参数，就是部分特化。

比如:

template <typename T> 
struct Foo;                      // 基础模板
template <>
struct Foo<double>;              // 全特化
template <typename T> 
struct Foo<T*>;                  // 部分特化
template <typename T1, typename T2> 
struct Foo<void (T1, T2)>;    // 部分特化
template <typename T, typename R>
struct Bar;                 // 基础模板
template <>
struct Bar<double, int>;    // 全特化
template <typename T> 
struct Bar<T, int>;         // 部分特化
1      函数模板的特化
部分特化是类模板的专利。函数模板对此特性并不支持，它只支持全特化。

这是因为C++支持函数重载，连模板函数也可以重载，通过它就基本可以达到部分特化的效果。比如:

template <typename T1, typename T2>  
void f(T1, T2);  // 基础模板f
template <typename T> 
void f(T1, int); // 重载：另一个基础模板f，而不是部分特化 
template <typename T> 
void g(T1);      // 基础模板 g
template <typename T> 
void g(T1*)      // 重载：另一个基础模板g，而不是部分特化
1.1      避免特化函数模板
事实上，对于函数模板来说，即便是全特化，也最好不要使用。取而代之，你应该使用函数重载。

template <typename T>
T min(T, T);       // 基础模板 min 
int min(int, int); // 使用函数重载(这是一个普通函数) 
template <> 
int min<int>(int, int); // 函数模板特化: DON'T DO THIS!
正如你看到的，模板特化的语法形式更加复杂，但这不是不使用函数模板特化的主要原因。

主要原因在于，和函数重载比较起来，特化后的模板函数属于二等公民。

简单的说，当编译器对一个函数调用选择其合适的实现时，优先级从高到低依次为：

1.    普通函数

2.    基础模板

3.    特化模板

1.2        一等公民
普通函数和基础模板都属于函数重载，C++将它们都看作一等公民。

当对一个函数调用选择实现时，C++会从它们中间选择一个最匹配的版本。比如:

template <typename T>
void f(T, double); // (a) 
void f(int, int);  // (b)
f(5, 2.0);         // 选择 (a) 
f(5, 10);          // 选择 (b)
当普通函数和基础模板的选择出现二义性时，普通函数会被优先选择。因为C++总是选择最特殊的版本（most specialized）：

template <typename T>
T min(T, T);       // (a) 
int min(int, int); // (b)
min(5, 10);        // 语义上两者都匹配,选择(b)
另外，普通函数相对于模板函数要更有弹性：普通函数支持类型的自动转化；但模板函数则更刻板，不能发现类型之间的自动转换关系。

template <typename T> 
T min(T, T); 
min(5, (short)10); // 编译出错
int min(int, int);
min(5, (short)10); // 编译成功
在这种情况下，当一个调用需要在两者之间作出选择时，普通函数会是获胜者。

template <typename T>
T min(T, T);        // (a) 
int min(int, int); // (b)
min(5, (short)10); // 选择 (b)
总结起来，作为一等公民，所有的重载函数——无论是普通函数还是基础模板函数——都被作为第一等级的候选对象；C++编译器会在它们之间找到那个最为匹配的版本。

如果出现二义性，则优先选择普通函数。

1.3        二等公民
如果最匹配的版本是基础模板函数，编译器才会去查看它名下的特化版本。如果它们之中存在一个比基础模板函数更匹配的版本，才会选择这个特化版本。这正是为何将模板特化函数称为二等公民的原因。

https://godsme.github.io/img/FunctionTemplate.png

函数选择优先级

￼

而下面这个例子则反映了模板特化函数的二等公民地位：

template <typename T>  
void f(T);     // (a): 基础模板
template<> 
void f(int*);  // (b): (a)的特化版本
template <typename T> 
void f(T*);    // (c): 基础模板，重载
int a = 10; 
f(&a);  // 选择 (c): 尽管 (b) 更匹配，但它是二等公民
一旦将其改为普通重载函数，就可以选择最匹配的函数:

template <typename T> 
void f(T);    // (a): 基础模板
void f(int*); // (b): 普通函数，重载
template <typename T> 
void f(T*);   // (c): 基础模板，重载
int a = 10; 
f(&a);        // 选择 (b)
2      小结
本文主要介绍了函数模版特化的性质。在下篇文章里，会介绍模版特化的另一个类别：类模版特化。
