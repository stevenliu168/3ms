来给微服务降降温：应用微服务你准备好了吗？

 

现在整个IT社区，都是在讨论微服务，火的不行，各个领域都在搞微服务， 华为各个产品线也是积极推行微服务（就连几十年的电信产品都在探索微服务）。从这个时候很多架构师，很多主管都将微服务作为宝典：认为什么东西都可以用微服务架构来搞定，我们的架构就应该追求微服务化这种架构。但是又有多少人真正了解微服务的本质，微服务背后的tradeoff到底是什么呢？

 

微服务并不是一个设计原则，而是一个优秀实践。

微服务并不是新鲜的词汇，从他的本质上来讲，就是SOA在新型互联网模式的一种合理实现。

 

1      微服务到底是解决什么问题的？
l  康威定律：解决人的问题

从业界普遍的来看，7~8人的团队是最好管理的，团队之间沟通成本是很低的，团队越大越难管理，生产效率比较低下。

l  提高系统的高内聚低耦合

高内聚低耦合并不是微服务专有的，在软件设计中，高内聚低耦合都是我们追求的，但是怎么做到高内聚低耦合，缺失特别困难的，从面向对象领域来讲，SOLID原则就是再追求高内聚低耦合，从袁英杰的正交四原则来说，也是为了提高系统的正交四原则。

 

但是如果通过类或者组件来实现高内聚低耦合不是也可以吗，比如微软的COM组件，Java的OSGi，或者直接就是class或者模块来实现高内聚低耦合也是可以的，微服务相比这些主要是进程的隔离性更好。首先如果代码量相当巨大，业务相当复杂的时候，类和类，组件与组件之间这个高内聚低耦合是很容易破坏的，但是进程之间的耦合性是比较难破坏的。

 

只有这样，才能最快的响应市场需求的变化。

l  提高多技术栈的能力：

传统的单块架构，如果选用了某一种软件架构，或者某一种编程语言，那么这个系统基本都是按照这个模型来实施的，但是很多时候不同的场景用不同的技术来解决可能更为快速，所以微服务可能让的服务之间平台无关，语言无关。

 

但是这个还是有缺点的：不同的技术一定涉及到不同的工具链体系，如果因为微服务引入了大量的不同体系的工具链，那么对于开发和运维都是相当头疼的。所以微服务的技术选型不能过于追求最热最新的技术，而是追求那些生态圈更更稳定，更有发展前景的技术或者语言。

l  弹性伸缩：解决业务的伸缩能力

弹性伸缩与微服务架构是没有直接关系的，以前最传统的添加硬盘，添加内存也可以看成是弹性伸缩，还有虚拟机的动态部署也是弹性伸缩。但是传统的单块架构在弹性伸缩上面有一个缺点：就是不能进行局部的弹性伸缩。比如CPU密集型和IO密集型如果放在一个服务里面，那么弹性伸缩的时候就有两个变化方向，到底是伸缩CPU，还是要伸缩IO，或者两个都伸缩。 传统单块架构是无法单独伸缩CPU还是IO的，但是微服务可以，你可以根据业务需要把CPU密集型的业务做成服务，IO密集型的做成另外一个服务，这样就可以弹性伸缩你要扩展的服务了。

 

我们可以看一下下面这个经典的Scale cube：

http://upload-images.jianshu.io/upload_images/44770-031a3d323c9edbc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240

 

这张图从三个维度概括了一个系统的扩展过程：

1.         x轴，水平复制，即在负载均衡（LB）服务器后增加多个服务器；

2.         z轴扩展，是对数据库的扩展，即分库分表；

3.         y轴扩展，是功能分解，将不同业务功能的模块分成不同的服务。

 

微服务更注重的Y轴的扩展，按照业务模块，结合DDD来进行服务划分。

2      服务到底应该怎么划分
将系统划分为不同的服务有很多方法：

1.       如果使用领域驱动设计DDD，那么边界很清晰的聚合根可以作为一个服务。

2.       如果不使用DDD，那么可以把与周边依赖很简单的划分成一个服务。

 

我们可以总结出两个原则：

1.         符合单一职责原则，为了高内聚低耦合来划分服务。

2.         不要过于追求微服务中的微，通信成本，异步复杂性，网络开销，数据一致性这些都将是微服务的挑战，微服务划分的时候要和这些成本之间进行平衡。

 

最后要强调一点：系统分解的目标并不仅是搞出一堆很小的服务，这不是目标；真正的目标是解决单块应用在业务急剧增长时遇到的问题。

 

3      总结一下微服务架构的优点与缺点
3.1      优点
l  每个服务足够内聚，足够小，代码容易理解、开发效率提高

l  服务之间可以独立部署，微服务架构让持续部署成为可能；

l  每个服务可以各自进行x扩展和z扩展，而且，每个服务可以根据自己的需要部署到合适的硬件服务器上；

l  提高容错性，一个服务的崩溃并不会让整个系统瘫痪；

l  系统不会被锁定在某一个技术栈上面。

 

3.2      缺点：没有免费的午餐
既然微服务这么好，那么所有的软件架构都是用微服务不是更好？《人月神话》中说到：没有银弹， 为了得到微服务的那些好处，我们是付出了其他的东西的：而微服务架构只是一个tradeoff的结果：

 

l  开发人员要处理分布式系统的复杂性；开发人员要设计服务之间的通信机制。并且涉及多个服务直接的自动化测试也具备相当的挑战性

l  服务管理的复杂性，多个不同的服务实例，一个服务的不同实例，这些服务之间怎么管理，服务的发现和自理都是特别复杂的。

l  运维上的复杂性，需要全局的监控体系，监控每一个服务的状态，服务之间联动状态，

l  重构的难度增加，如果上来就使用微服务，但是却对高内聚低耦合却不甚理解，那么这种微服务架构是灾难性的， 微服务之间的将会交互特别复杂。并且一旦发现问题，微服务的重构将会特别困难，服务的合并是比较麻烦的，并且万一还是不同的技术栈将是灾难级的。

l  性能损耗，微服务之间消息通信是巨大的，如果微服务相当多，那么整个网络里面估计都是微服务之间的消息传递和数据传输，我们是否接受可以接收这么大的网络开销。

 

在软件开发的过程中，重要的不是采用了什么工具或者技术，而是不论用何种工具或者技术，都要达到项目本身的客户需求。任何方法论之前，先要探求问题的来源，否则，对各种方法论的依赖或滥用，有害无益。

4      微服务的关键难点：
l  客户端和服务器之间的通信问题

l  内部服务的通信问题：

1.         基于HTTP的同步机制：REST， RPC，

2.         基于消息队列的异步消息处理机制（Kafka， RabbiMQ）。

l  分布式数据管理：数据一致性问题

l  配套的Devops工具体系和运维是否准备OK

l  微服务的自动化测试是否准备OK

 

这些都是你在微服务实施前或者实施中遇到的需要解决的问题，如果这些你还没有准备好，你将如何进行微服务开发呢？

5      总结：
l  服务化是趋势，但是微服务一定不是唯一选择，组件化还是在某些场景更适用。

l  对于通信公司来说， 最重要的是通信的性能，新型的SDN纯粹通过Java和微服务应该很难满足性能诉求，最后应该还是要通过特定的硬件来提升性能。而对于云核心网和无线这种高性能要求的网元，过于追求微服务一定会带来性能，运维上面的极大挑战。

l  微服务为什么会炒得这么火，我也不知道，也许是商业炒作，也许是社区的炒作，但是微服务是好东西，但是确实有代价的。

l  微服务仅仅是一个工具而已，是用来解决实际问题的，如果我们连自己的问题都没有弄清楚，就去强推工具，是否合适呢？

l  最后，微服务不是灵丹妙药，我们不应该追求微服务本身，而是我们应该从问题本身出发，我们遇到了什么问题，而这些问题是否可以用微服务来解决，使用微服务后的收益比我们是否可以接收。
