模块设计和开发中应该注意的事项

 

增量开发和模块开发在华为开发过程中是最主要的场景，下面结合代码讲解一下如何在模块设计和开发中防止代码结构腐化，避免兼容性问题。

 

1      模块整体架构：


这个模块主要实现封装Diameter组件，VCOM组件和SCTP组件，完成底层数据的接收，并且发送给上层应用。

 

2      在开发过程中遵循了一些好的编程习惯：
2.1      分解类的功能，不要把大量的功能集中到某个类里面，否则会让这个类过于臃肿，难于维护。
目前我们大部分的开发都是增量开发，如果在开发的时候不注意控制类和方法的内聚，就会出现许多上帝类，也更容易隐藏一些Bug。

在面向对象中也讲究类的单一原则，模块设计里面也讲究函数的单一原则，这些原则都可以避免我们的模块在开发过程出现结构腐化，越来越难于维护的困境。

从下面这些类的声明，可以看出这些类的功能都很单一，并且比较简单：

classCDiamMsgStatistics

{

public:

    CDiamMsgStatistics();

    ~CDiamMsgStatistics();

 

    BOOL Init() const;

 

    void Fini() const;

   

    static DIAM_VOID PTDiamMsgFuncStatCallBack

        (

        IN DIAM_UINT8 ulStatType,      /* EN_DIAM_STAT_TYPE */

        IN DIAM_UINT8 ucMeasureEntity, /*EN_DIAM_MS_MEASUREMENT_ENTITY */

        IN DIAM_UINT8 ucOperateType,   /* EN_DIAM_STAT_OPERATE_TYPE */

        IN DIAM_UINT8 *pParams

        );

 

private:

    static BOOL AnalyseCMMsg

        (

        IN DiamCMStat* pDiamCMStat

        );

 

classCDiamLowerFlowController

{

public:

    ~CDiamLowerFlowController();

 

    static CDiamLowerFlowController*GetInstance();

    static void Destory();

 

    BOOL HandleUpperFlowCtrlCmd(IN constSPeerFlowCtrlPara* pFlowCtrlPara);

    BOOL CheckIsControlledWithConnIdx(IN constDIAM_UINT32 ulConnIdx);

 

    void DeleteConnIdxByTblMsg(constDIAM_UINT32 ulConnIdx);

 

    static DIAM_UINT32 DiamFuncFlowControlCallBack

        (

        IN DIAM_UINT32 ulConnId,

        IN DIAM_UINT8 *pMsg,      /* Raw message */

        OUT DIAM_UINT16 *pResultCodeName/*Result-Code-Name used in answer msg*/

        );

 

2.2      对于类的接口声明要严谨
我们实现的类具有什么功能，对于调用者的要求是什么，通过查看类的声明(一般就是头文件)应该可以直观的看出来。而不应该让调用者去猜。

只有提供的对外接口才声明成public，其他的内部方法都声明成private(protected)

如果函数与对象本身没有关联，推荐使用static修饰

需要禁止的行为要显示禁止，如果拷贝构造和复制拷贝

 

在实现接口的时候，我比较相信explicit is better thanimplicit（这个仁者见仁智者见智），把你实现的东西显示的展现在别人面前，让别人使用的时候不容易出现错误，才是一个合格的程序员。

 

比如这个类的声明：

class CDiamMsgStatistics

{

public:

   CDiamMsgStatistics();

   ~CDiamMsgStatistics();

 

   BOOL Init() const;

 

   void Fini() const;

   

   static DIAM_VOID PTDiamMsgFuncStatCallBack

       (

       IN DIAM_UINT8 ulStatType,      /*EN_DIAM_STAT_TYPE */

       IN DIAM_UINT8 ucMeasureEntity, /* EN_DIAM_MS_MEASUREMENT_ENTITY */

       IN DIAM_UINT8 ucOperateType,   /*EN_DIAM_STAT_OPERATE_TYPE */

       IN DIAM_UINT8 *pParams

       );

 

private:

   static BOOL AnalyseCMMsg

       (

       IN DiamCMStat* pDiamCMStat

       );

 

public:

   static const DIAM_UINT32 DIAM_CMD_CER_CEA = 257;

   static const DIAM_UINT32 DIAM_CMD_DWR_DWA = 280;

   static const DIAM_UINT32 DIAM_CMD_ACR_ACA = 271;

   static const DIAM_UINT32 DIAM_CMD_DPR_DPA = 282;

 

private:

   CDiamMsgStatistics(const CDiamMsgStatistics&);

   CDiamMsgStatistics& operator= (const CDiamMsgStatistics&);

};

 

2.3      遵循陌生人原则，减少类与类之间的耦合
也就是迪米特法则：一个软件实体应当尽可能少的与其他实体发生相互作用。

如果类A和类B有耦合，类B和类C有耦合，那么类A要向类C发消息的时候就不要建立直接的耦合，而是通过类B中转。这样就可以减少类之间不必要的耦合。

但是不要过于追求陌生人原则，否则代码中会出现大量中转消息的方法，形成很长的消息链。

 

比如代码中CDiameterStackImpl和CDiamStackModule有耦合关系，CDiamStackModule和CVComFacade有耦合关系，CVComFacade和CSCTPLayerFacade有耦合关系，那么CDiameterStackImpl在进行初始化，反初始化，动态消息的时候都可以通过消息链的方式传递给其他类，避免不必要的耦合。

 

2.4      避免全局变量，使用单件模式
对于生命周期长的类对象，并且又是全局对象，可以使用单件模式来替换。单件模式可以减少耦合度，提高对象生命周期的管理。

比如最典型的日志管理类：

CVComLogger* CVComLogger::GetInstance()

{

   if (NULL == m_pSelf)

    {

       ACE_Guard<ACE_Thread_Mutex> guard(m_oInstanceMutex);

       if (NULL == m_pSelf)

       {

           m_pSelf = MCP_NEW CVComLogger();

       }

    }

   return m_pSelf;

}

 

2.5      使用Façade模式，将复杂的底层封装起来，对外提供简洁的接口
如果底层的子系统比较复杂，比如SCTP组件，VCOM组件，可以将这些复杂的接口隐藏起来。对外提供简单一致的接口，使调用者使用起来很简单。

class CVComFacade

{

public:

   CVComFacade(void);

   ~CVComFacade(void);

 

public:

   BOOL Init(IN const SVPPSCTPProtoParaCfg* pstParaCfg);

 

   VCOM_VOID Fini();

   

   //启动VCOM定时任务，发送和接受数据

   VCOM_UINT32 StartTickTask();

   

   //停止VCOM定时任务，发送和接受数据

   VCOM_UINT32 StopTickTask();

 

   //设置VCom调试级别

   VCOM_UINT32 SetVComDgbCtrl

       (

       IN const SVCOMTraceDbgInfo& oTraceDbgInfo

       ) const;

 

   //SCTP链路动态生效

   VCOM_UINT32 AddSCTPLink

       (

       IN const SDiamSCTPLinkInfo& oDiamSCTPLinkInfo

       );

 

   VCOM_UINT32 RemoveSCTPLink

       (

           IN const SDiamSCTPLinkInfo& oDiamSCTPLinkInfo

       );

 

2.6      提高代码的自注释能力
不要添加多余的注释，提高代码的自注释能力，主要提一点就是函数的签名，推荐使用微软定义形参时IN,  OUT,  IO(INOUT)的使用，显示标注形参是入参，出参还是两者兼备。

 

static VCOM_UINT32DiamLiConnectEventIndCallBack

       (

       IN VCOM_UINT32        ulAppConnectId,

       IN VCOM_UINT32         ulLinkId,

       IN VCOM_UINT32        ulLinkEstTime,

       IN TVComEndPointAddr *psLocalAddr,

       IN TVComEndPointAddr *psRemoteAddr,

       IN VCOM_UINT32        ulTlProtocolType,

       IN VCOM_UINT8          ucEvent,

       IN VCOM_UINT8          ucReason,

       IO VCOM_VOID          *pvPara

       );

 

3      相关总结
在模块设计和模块开发的过程中，我相信大家还有很多好的经验，欢迎大家讨论拍砖。针对模块设计和开发，总的来说要注意下面的地方：

1.      对于模块之间，明确消息接口。降低模块之间的耦合度，每个模块对外应该只有1~2个接口类，增强模块的封装性，减少模块对外的复杂度。

2.      对于使用公司或者第三方库，最好使用Adapter进行封转。

3.      对于模块内部，坚持小方法，小类的思想，增加每个类的内聚性和功能的单一性，这样才能保证这个模块的可维护性和可扩展性。

4.      对于模块的新增需求，要防止架构腐化。如果是一个新的独立功能，推荐使用增加新的类去解决问题，而不是在现有类中增加方法。如果对于现有类的纵向或者横向带来不好的影响，需要考虑重新组织类的关系。

5.      如果模块是一个共享对象(动态链接库)，那么在导出类或者接口的时候要考虑ABI的兼容性。

6.      适量运用一些设计模式来提高代码的扩展性。
