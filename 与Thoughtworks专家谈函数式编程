与Thoughtworks专家谈函数式编程

                                                                                --与Thoughtworks专家袁英杰，杨云交流

 

 

1      声明式编程范式
在说函数式编程之前，一定要提到声明式编程。一句话解释声明式编程就是：业务逻辑描述和业务逻辑实现是分离的，而我们更关注业务逻辑描述（What），而不去关注业务实现（How）。

而对于传统的命令式编程，业务逻辑描述和业务实现是混在一起的。

http://images.cnitblog.com/blog/104032/201409/011403440004889.png

 

从范式的角度来说，领域特定语言，函数式编程都是属于声明式编程范式。

大家一定都写过SQL语言：

SELECT id, amount FROM orders WHERE create_date > '2016-09-11' ORDER BY create_date DESC

这个就是很典型的声明式描述，提出what to do, 而不用关心how to do。

 

FP语言比OO等语言更具有声明式语义，这个是一个相对概念，只能说FP语言在数学领域更具有表达力，逻辑式语言在逻辑表达上更具有表达力，而OO和过程式语言在复杂的商业逻辑系统里面表达力更好。

2      函数式编程
2.1      什么是函数式编程
In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computationas the evaluation of mathematical functions and avoids changing-state and mutable data. 

上面这个定义来自维基百科：简单来说：“函数式编程是一种编程范式，它将计算机运算看作是数学中函数的计算，并且避免了状态以及变量的概念”

 

那么回到根本，函数式的本质既不是声明式，因为那是结果，函数式编程的本质就是“数学上的函数”— 纯函数（Pure Function）。

 

2.2      数学上面函数的定义
In mathematics, a function is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. 

函数在数学中为两集合间的一种对应关系：输入值集合中的每项元素皆能对应唯一一项输出值集合中的元素。



 

所以对于数学中函数具有以下特点：

l  每个函数必须有输入（自变量）

l  每个函数必须有输出（因变量）

l  无论何时何地，制定自变量调用函数时，因变量一定是一致的。（Referential  transparency）

 

对于上面这种函数，我们称为“纯函数（Pure Function）”。可以看出纯函数的特点就是没有副作用，那么没有副作用的函数一定是无状态的，不变的。

 

2.3      命令式中函数或者方法
这里先说明一下，我们说的方法（method）是指OO里面的某个类的接口，但是面向过程里面的都叫做函数。

 

我如果有一个编程函数（伪代码）：

bool getConfig(const string& fileName, string& output)

{

    if fopen(fileName) failed then

        return false;

 

    fread(output);

    remove(fileName);

 

    return true;

}

 

这是一个很常见的函数，函数中读取文件，最后删除文件。但是调用这个函数你要考虑的东西太多，返回值有N中可能，环境因素的影响（文件是否存在），并且在删除某个文件（副作用）。所以调用这样的函数需要人去做更多的思考，并且在并发环境下也需要关注。最后这个函数很难做单元测试，因为你可能要对环境因素进行mock/fake。

 

即使是C++/Java，我们也可以写出数学上的函数式，比如我要实现f(x)=x^2 + 2*x +1，那么可以写成：

double f(const double x)

{

       return pow(x, 2) + x * 2 + 1;

}

 

这个函数就是无副作用的纯函数。

http://images.cnitblog.com/blog/104032/201409/011411093603229.png

 

所以：编程函数是包含纯函数的。

2.4      变量值不可变&递归
由于变量值是不可变的，对于值的操作并不是修改原来的值，而是修改新产生的值，原来的值保持不便。例如一个Point类，其moveBy方法不是改变已有Point实例的x和y坐标值，而是返回一个新的Point实例。

class Point(x: Int, y: Int){

           override def toString() = "Point (" + x + ", " + y + ")"

           def moveBy(deltaX: Int, deltaY: Int) = {

                      new Point(x + deltaX, y + deltaY)

           }

}

 

正因为变量值不可变，纯函数编程语言里面是没有循环的（For循环使用可变的状态作为计数器，而While循环或Do-While循环需要可变的状态作为跳出循环的条件），只能使用递归来解决迭代问题。

 

通常来说，算法都有递推（iterative）和递归（recursive）两种定义，以阶乘为例，阶乘的递推定义为：

https://pic3.zhimg.com/6c98abed82720659b9a5ae87112d052e_b.jpg

 

而阶乘的递归定义

https://pic1.zhimg.com/28e7d8a86b496d9511c0cf186181cc7c_b.jpg

 

 

递推定义的计算时需要使用一个累积器保存每个迭代的中间计算结果，示例代码如下：

int fact(int n){

  int acc = 1;

 

  for(int k = 1; k <= n; k++){

    acc = acc * k;

  }

 

  return acc;

}

 

对于递归的实现：




def fact(n: Int):Int = {



  if(n == 0) return 1



  n * fact(n-1)

}




2.5      函数式编程的基础：lambda演算
理论上说，函数式语言不是通过冯诺伊曼体系结构的机器上运行的，而是通过λ演算来运行的，就是通过变量替换的方式进行，变量替换为其值或表达式，函数也替换为其表达式，并根据运算符进行计算。λ演算是图灵完全（Turing completeness）的，但是大多数情况，函数式程序还是被编译成（冯诺依曼机的）机器语言的指令执行的。

 

Lambda calculus (also written as λ-calculus) is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution. 

 

这个lambda演算数学性很强，鉴于本人数学小白，这里就不赘述，数学大神可以描述一下 :) 。

3      函数式编程的特性
从前面已经看出，函数式编程的本质就是数学上的纯函数，通过这些纯函数的组合使用，让使用者尽量关注业务逻辑的描述，很少关注业务逻辑的实现。

那么为了达到这个目标，函数式编程都会具有以下的特性来支撑：（这里不会重点描述这些特性是什么，而是描述这些特性有什么用，为了支撑FP什么特性）。

 

3.1      函数是一等公民(First-class)
在面向对象里面， 对象是一等公民，函数只是二等公民（其实这个说法不是太科学，在OO里面是没有几等公民这个概念的，都是FP上的概念，我只是根据重要性分了等级）

在函数式编程中，函数是第一等公民，函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。

 

正因为函数是一等公民，才让下面的函数组合，高阶函数更方便实现。

3.2      函数组合/高阶函数（Higher-order function）
高阶函数就是参数为函数或返回值为函数的函数。有了高阶函数，就可以将复用的粒度降低到函数级别，相对于面向对象语言，复用的粒度更低。

高阶函数提供了一种函数级别上的依赖注入（或反转控制）机制。



 

FP最常用的高阶函数式map, filter, reduce。

3.3      闭包（Closure）


 

闭包的本质就是代码块+上下文，也就是有状态的函数。正是因为有了闭包，让FP可以更方便地传值。



 

其实这里的闭包更准确地说是叫自由变量，与真正数学意义上闭包还是有差别的。

 

3.4      函数柯里化（Currying）
currying is the technique of translating the evaluation of a function that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions, each with a single argument. Currying is related to, but not the same as partial application.

柯里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数且返回结果的新函数的技术。

 

 

// creates a pair of two values

pair    := λx.λy.λf. fxy

// selects the first element of the pair    

first   := λp. p(λx.λy. x)

// selects the second element of the pair                    

second  := λp. p(λx.λy. y)

// currys f

curry   := λf.λx.λy . f (pair x y)

// uncurrys f

uncurry := λf.λp . f (first p) (second p)

 

我们在网上经常看到的柯里化其实是partial application function，就是把某个多个参数的函数的前面参数进行调用，返回了一个新的函数，后面可以用这个部分应用的函数。

可以说，只有函数的只有实现了柯里化，才能实现partial application function。

比如在Scala里面：



3.5      惰性求值（Lazy evaluation）
惰性求值（也称作call-by-need），是在将表达式赋值给变量（或称作绑定）时并不计算表达式的值，而在变量第一次被使用时才进行计算。这样就可以通过避免不必要的求值提升性能。在Scala里，通过lazy val来指定一个变量是惰性求值的，如下面的示例所示：

 



 

3.6      其他特性
函数式编程语言一般还提供强大的模式匹配（Pattern Match）功能。在函数式编程语言中可以定义代数数据类型（Algebraic data type），通过组合已有的数据类型形成新的数据类型，如在Scala中提供case class，代数数据类型的值可以通过模式匹配进行分析。

 

 

 

 

在函数式编程中，不可能所有的函数都是纯函数，一定有不纯的函数。处理可变状态和处理IO，要么引入可变变量，要么通过Monad来进行封装（如State Monad和IO Monad）。

4      函数式编程的优缺点
4.1      优点
Ø  很方便地支持单元测试

Ø  代码调试很简单

Ø  很方便支持并发编程，不用关心死锁和临界区（无状态，无副作用，引用透明）

Ø  支持代码热部署

Ø  语言容易理解，函数式编程是数学上的语言，模拟人的思维，比起命令式的语言更容易理解。

Ø  多核CPU的兴起，2005年以来，计算机计算能力的增长已经不依赖CPU主频的增长，而是依赖CPU核数的增多，所以在多核场景下并发编程设计是有困难的，但是函数式编程就可以解决共享的可变状态（还是因为无副作用和引用透明）。

https://pic4.zhimg.com/fb0788d6706da274882a2f501631bc47_b.jpg

4.2      缺点
适用领域比较小：科学计算，人工智能，对于复杂的商业软件中很难处理复杂性。

 

 

所以现在的成功的编程语言都是融合性的语言，比如C++11/Java8/C#/Scala都是面向对象/泛型编程/函数式编程的融合，这也是后面编程语言的趋势。

5      怎么看待函数式编程和面向对象编程
首先：面向对象和面向函数编程并不是对立面，仅仅是思维方式不一样，但是本质还是相同的。

l  面向对象将数据和行为封装成一个一个对象，然后通过对象之间的消息交互来完成业务逻辑。

l  函数式编程通过纯函数的组合，形成一个数据流，以此完成业务逻辑。

 

归根接地，OO和FP都是讲究模块化与复用，只是一个是对象，一个是函数。 OO和FP都追求组合，只是一个是对象组合（继承或者聚合），一个是函数组合。

 

所以，在做大型业务系统软件时，由于业务软件的商业复杂性，纯FP语言是很难管理的，这个应该是结合OO和FP， 整体采用OO建模，进行模块划分和领域建模，局部使用FP来进行业务流处理。

 

另外， 即使我们是在进行OO编程，我们也要追求不变性（Java中的String），保证函数/API设计的合理性，让调用者不用担心这个API后面的小动作。

 

 

以上都是交流的整理，由于本人对于FP的理解问题，如果有什么错误，请大家指出。
