常量到底要写到等号左边还是右边？--代码可靠性与可读性的抉择
日期：2016-02-24 08:47浏览：1105评论：9
 

在以前的C/C++总有一条规则，在==判断的时候常量要写在左边，这样即使程序员不小心写成=的时候，编译器会出现编译错误。这个规则也被很多程序员作为自己编码的原则。

在Java中也有类似的规则，如果调用equals方法的时候，建议常量写在左边，这样可以避免空指针异常。查看项目组的代码，总结一般有如下形式的代码：

1.   If (0 == a)

2.   If (0 < a);

3.   If (0 == strlen(str))

4.   If (NULL != ptr)

5.   If (“test”.equals(str))

 

上面的写法1和写法4还情有可原，但是其他三种写法就是一种病态的代码了，是盲目遵守规范的结果。

1      编译器对于==写成=的处理
如果把if (a==0)写成if (a = 0), gcc打开-Wall开关以后会有如下告警：warning: suggest parentheses around assignment used as truth value

 

Java语言中直接编译失败：Type mismatch: cannot convert from String to boolean。

但是如果在Java中这么写：

Boolean b =false;

If (b = true) 这个Eclipse是不会上报告警和编译错误的

但是在Java的编译规范中，对于boolean类型，推荐if(b) 或者 if (!b)，不要使用==来判断。

 

如果写成If (strlen(str) = 0)

那么gcc会编译失败：

error: lvalue required as left operand of assignment

Java也有同样的提示。

 

对于下面这段代码：

int a = 0;

        if (0 < a && a < 9)  //写法一

        {

           

        }

       

        if (a > 0 && a < 9)  //写法二

        {

           

        }

 

大家觉得写法一好还是写法二好，赞成写法一的一般是参照数学里面里面的0 < a < 9这种写法，但是我依旧还是推荐写法二，因为我希望第一时间看到的是变化的东西，而不是一个常量。

 

 

对于Java中，

              String str = null;

             

              //...

             

             

              if (str.equals("huawei")) //写法一

              {

              }

             

              if ("huawei".equals(str)) //写法二

              {

              }

       

这两种写法到底哪种写法更合适，这种就比较争议，如果常量写在左边，可以避免抛出空指针异常，而是返回false，但是这样却让代码不好阅读，并且如果str前面有null检查，那么写在前面是没有必要的。并且我觉得有错误提前跑出来就隐藏更好，如果str为null，那么就要抛出空指针，这样可以快速修改。所以的建议还是写法一

2      常量写在右边更适合人的思维
然后我们看看人类的思维，如果我要做一个判断：小明的岁数大于5岁。对于人来说，第一个接受的信息应该是主语小明的岁数，如果第一反应看到的是5这个常量，那么第一反应是不知道含义，只有全部看完以后才可以判断出来。

否则看起来就是这种效果：

 

 "if blue is the sky" or "if tall is the man".

 

所以我建议在==和其他场景下，大家把常量写在左边，这样可以提高代码的可读性，也满足人的基本思维方式。

 

 

这个时候就会有人反驳：万一写错了怎么处理，万一没有关注到编译告警怎么办？出现了现网问题谁负责？

 

3      好的代码：多方面平衡的结果
且不说程序员为什么不关注编译器告警，这里就涉及到一个很重要的东西：

程序员要对自己的代码做一个最优的权衡。

我们就从固网的代码Program Smart标准来说明。

http://3ms.huawei.com/hi/showimage-1427411959-40602-20151207044830875003m77.jpg

 

又没有可以写出完全满足这6个方面的代码，我相信没有，好的程序员一定是在这6个方面做一些平衡点。

 

比如我的代码写的很简洁，简单明了，但是却损失了一些可移植性可扩展性。

或者代码写的很可靠，很高效，但是我却使用了生僻的写法，导致代码的可读性不是太好。

或者我的代码写的维护性很高，扩展性很强，代码分层，抽象写了很多，但是却损失了部分性能。所以我们是不可能写出完美的代码，只能写出最适合当前最合适的代码。

 

所以大家在写代码的时候还是要根据实际情况进行调节，我觉得在现代软件开发中，代码可读性和代码可维护性是最重要的，其他的可靠性，高性能只有在特定的软件领域和特定的模块中才有价值。所以建议软件开发以代码的可读性和可维护性为基本目标，如果出现性能，可靠性问题，首先应该是从软件架构层面，算法实现等层面去探索，而不是从代码层面去做微优化，除非你的代码写的实在太乱了，严重影响程序的可靠性和性能。

 

以上都是个人的观点，有些问题可能就没有答案，没有最好的代码，只有最合适的代码。希望大家多讨论，究竟什么代码才是好的代码。

 

如果我们因为追求某些代码特质而放弃其他的东西，那么是可以通过其他的手段补回来的，比如编译器，pclint, codecc等等都可以检查很多错误，好的代码架构，优秀的设计理念都可以显著提高软件可靠性和可扩展性。

 

最后还是那句简单的话，也是对程序员的基本要求：先让自己的代码好读一些，这是对你自己好，也是对别人负责。
